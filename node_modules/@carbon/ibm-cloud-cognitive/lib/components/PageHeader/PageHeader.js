"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PageHeader = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _propsHelper = require("../../global/js/utils/props-helper");

var _layout = require("@carbon/layout");

var _classnames = _interopRequireDefault(require("classnames"));

var _reactResizeDetector = _interopRequireDefault(require("react-resize-detector"));

var _use = require("../../global/js/use");

var _carbonComponentsReact = require("carbon-components-react");

var _ActionBar = require("../ActionBar/");

var _BreadcrumbWithOverflow = require("../BreadcrumbWithOverflow");

var _TagSet = require("../TagSet");

var _ButtonSetWithOverflow = require("../ButtonSetWithOverflow");

var _settings = require("../../settings");

var _iconsReact = require("@carbon/icons-react");

var _PageHeaderUtils = require("./PageHeaderUtils");

var _excluded = ["actionBarItems", "availableSpace", "background", "breadcrumbItems", "className", "collapseHeader", "collapseHeaderLabel", "expandHeaderLabel", "collapseHeaderToggleWanted", "preventBreadcrumbScroll", "navigation", "pageActions", "pageHeaderOffset", "preCollapseTitleRow", "subtitle", "tags", "title", "titleIcon"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var componentName = 'PageHeader';

var PageHeader = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var _extractShapesArray, _ref5, _cx, _ref7, _cx4, _cx9;

  var actionBarItems = _ref.actionBarItems,
      availableSpace = _ref.availableSpace,
      background = _ref.background,
      breadcrumbItems = _ref.breadcrumbItems,
      className = _ref.className,
      collapseHeader = _ref.collapseHeader,
      collapseHeaderLabel = _ref.collapseHeaderLabel,
      expandHeaderLabel = _ref.expandHeaderLabel,
      collapseHeaderToggleWanted = _ref.collapseHeaderToggleWanted,
      preventBreadcrumbScroll = _ref.preventBreadcrumbScroll,
      navigation = _ref.navigation,
      pageActions = _ref.pageActions,
      pageHeaderOffset = _ref.pageHeaderOffset,
      preCollapseTitleRow = _ref.preCollapseTitleRow,
      subtitle = _ref.subtitle,
      tags = _ref.tags,
      title = _ref.title,
      titleIcon = _ref.titleIcon,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _useState = (0, _react.useState)({}),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      metrics = _useState2[0],
      setMetrics = _useState2[1]; // refs


  var localHeaderRef = (0, _react.useRef)(null);
  var headerRef = ref || localHeaderRef; // utility functions
  // Title shape is used to allow title to be string or shape

  var getTitleShape = function getTitleShape() {
    return (0, _PageHeaderUtils.utilGetTitleShape)(title, titleIcon, PageHeader.defaultProps.title);
  };

  var checkUpdateVerticalSpace = function checkUpdateVerticalSpace() {
    return (0, _PageHeaderUtils.utilCheckUpdateVerticalSpace)(headerRef, navigation, preventBreadcrumbScroll, setMetrics);
  }; // state based on props only


  var actionBarItemArray = (0, _propsHelper.extractShapesArray)(actionBarItems);
  var hasActionBar = actionBarItemArray.length;
  var hasBreadcrumbRow = !(breadcrumbItems === undefined && actionBarItems === undefined);
  var pageActionsItemArray = (_extractShapesArray = (0, _propsHelper.extractShapesArray)(pageActions)) === null || _extractShapesArray === void 0 ? void 0 : _extractShapesArray.map(function (shape) {
    return _objectSpread({
      label: shape.children
    }, shape);
  });
  /* Title shape is used to allow title to be string or shape */

  var titleShape = getTitleShape(); // NOTE: The buffer is used to add space between the bottom of the header and the last content
  // Not pre-collapsed and (subtitle or available space)

  var lastRowBufferActive = (title || pageActions) && !preCollapseTitleRow || subtitle || availableSpace; // state based on scroll/resize based effects

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      pageActionsInBreadcrumbRow = _useState4[0],
      setPageActionsInBreadcrumbRow = _useState4[1];

  var _useState5 = (0, _react.useState)(0),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      scrollYValue = _useState6[0],
      setScrollYValue = _useState6[1];

  var _useState7 = (0, _react.useState)(0),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      backgroundOpacity = _useState8[0],
      setBackgroundOpacity = _useState8[1];

  var _useState9 = (0, _react.useState)(false),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      hasCollapseButton = _useState10[0],
      setHasCollapseButton = _useState10[1];

  var _useState11 = (0, _react.useState)(false),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      spaceForCollapseButton = _useState12[0],
      setSpaceForCollapseButton = _useState12[1];

  var _useState13 = (0, _react.useState)(0),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      actionBarMaxWidth = _useState14[0],
      setActionBarMaxWidth = _useState14[1];

  var _useState15 = (0, _react.useState)(0),
      _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
      actionBarMinWidth = _useState16[0],
      setActionBarMinWidth = _useState16[1];

  var _useState17 = (0, _react.useState)(0),
      _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
      pageActionInBreadcrumbMaxWidth = _useState18[0],
      setPageActionInBreadcrumbMaxWidth = _useState18[1];

  var _useState19 = (0, _react.useState)(0),
      _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
      pageActionInBreadcrumbMinWidth = _useState20[0],
      setPageActionInBreadcrumbMinWidth = _useState20[1];

  var _useState21 = (0, _react.useState)(0),
      _useState22 = (0, _slicedToArray2.default)(_useState21, 2),
      actionBarColumnWidth = _useState22[0],
      setActionBarColumnWidth = _useState22[1];

  var _useState23 = (0, _react.useState)(false),
      _useState24 = (0, _slicedToArray2.default)(_useState23, 2),
      fullyCollapsed = _useState24[0],
      setFullyCollapsed = _useState24[1]; // handlers


  var handleActionBarWidthChange = function handleActionBarWidthChange(_ref2) {
    var minWidth = _ref2.minWidth,
        maxWidth = _ref2.maxWidth;

    /* don't know how to test resize */

    /* istanbul ignore next */
    setActionBarMaxWidth(maxWidth);
    /* don't know how to test resize */

    /* istanbul ignore next */

    setActionBarMinWidth(minWidth);
  };

  var handleButtonSetWidthChange = function handleButtonSetWidthChange(_ref3) {
    var minWidth = _ref3.minWidth,
        maxWidth = _ref3.maxWidth;

    /* don't know how to test resize */

    /* istanbul ignore next */
    setPageActionInBreadcrumbMaxWidth(maxWidth);
    /* don't know how to test resize */

    /* istanbul ignore next */

    setPageActionInBreadcrumbMinWidth(minWidth);
  };

  var handleResizeActionBarColumn = function handleResizeActionBarColumn(width) {
    /* don't know how to test resize */

    /* istanbul ignore next */
    setActionBarColumnWidth(width);
  };

  var handleResize = function handleResize() {
    // receives width and height parameters if needed

    /* don't know how to test resize */

    /* istanbul ignore next */
    checkUpdateVerticalSpace();
  };

  var toggleCollapse = function toggleCollapse(forceCollapse) {
    var collapse = typeof forceCollapse !== 'undefined' ? forceCollapse : !fullyCollapsed;
    /* don't know how to test resize */

    /* istanbul ignore next if */

    if (collapse) {
      window.scrollTo({
        top: pageHeaderOffset - ((metrics === null || metrics === void 0 ? void 0 : metrics.headerTopValue) || 0),
        behavior: 'smooth'
      });
    } else {
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    }
  };

  var handleCollapseToggle = function handleCollapseToggle() {
    toggleCollapse();
  }; // use effects


  (0, _react.useEffect)(function () {
    // Determine the location of the pageAction buttons
    setPageActionsInBreadcrumbRow(preCollapseTitleRow || scrollYValue > metrics.titleRowSpaceAbove && hasActionBar);
  }, [hasActionBar, metrics.breadcrumbRowSpaceBelow, metrics.titleRowSpaceAbove, preCollapseTitleRow, scrollYValue]);
  (0, _react.useEffect)(function () {
    var _utilSetCustomCSSProp;

    var newActionBarWidth = 'initial';
    var newPageActionInBreadcrumbWidth = 'initial';
    /* don't know how to test resize */

    /* istanbul ignore next if */

    if (actionBarColumnWidth > 0) {
      if (pageActionInBreadcrumbMaxWidth > 0 && actionBarColumnWidth > actionBarMaxWidth + pageActionInBreadcrumbMaxWidth) {
        newPageActionInBreadcrumbWidth = "".concat(pageActionInBreadcrumbMaxWidth, "px");
      } else if (pageActionInBreadcrumbMinWidth > 0) {
        newPageActionInBreadcrumbWidth = "".concat(pageActionInBreadcrumbMinWidth, "px");
      }

      if (actionBarMaxWidth > 0 && actionBarColumnWidth > pageActionInBreadcrumbMinWidth + actionBarMaxWidth) {
        newActionBarWidth = "".concat(actionBarMaxWidth, "px");
      } else {
        if (actionBarMinWidth > 0) {
          newActionBarWidth = "".concat(actionBarColumnWidth - pageActionInBreadcrumbMinWidth, "px");
        }
      }
    }

    (0, _PageHeaderUtils.utilSetCustomCSSProps)(headerRef, (_utilSetCustomCSSProp = {}, (0, _defineProperty2.default)(_utilSetCustomCSSProp, "--".concat(_PageHeaderUtils.blockClass, "--max-action-bar-width-px"), newActionBarWidth), (0, _defineProperty2.default)(_utilSetCustomCSSProp, "--".concat(_PageHeaderUtils.blockClass, "--button-set-in-breadcrumb-width-px"), "".concat(newPageActionInBreadcrumbWidth)), _utilSetCustomCSSProp));
  }, [actionBarColumnWidth, actionBarMaxWidth, actionBarMinWidth, pageActionInBreadcrumbMaxWidth, pageActionInBreadcrumbMinWidth, headerRef]);
  (0, _react.useEffect)(function () {
    var _utilSetCustomCSSProp2;

    // Updates custom CSS props used to manage scroll behaviour
    (0, _PageHeaderUtils.utilSetCustomCSSProps)(headerRef, (_utilSetCustomCSSProp2 = {}, (0, _defineProperty2.default)(_utilSetCustomCSSProp2, "--".concat(_PageHeaderUtils.blockClass, "--height-px"), "".concat(metrics.headerHeight, "px")), (0, _defineProperty2.default)(_utilSetCustomCSSProp2, "--".concat(_PageHeaderUtils.blockClass, "--width-px"), "".concat(metrics.headerWidth, "px")), (0, _defineProperty2.default)(_utilSetCustomCSSProp2, "--".concat(_PageHeaderUtils.blockClass, "--header-top"), "".concat(metrics.headerTopValue + pageHeaderOffset, "px")), (0, _defineProperty2.default)(_utilSetCustomCSSProp2, "--".concat(_PageHeaderUtils.blockClass, "--breadcrumb-title-visibility"), scrollYValue > 0 ? 'visible' : 'hidden'), (0, _defineProperty2.default)(_utilSetCustomCSSProp2, "--".concat(_PageHeaderUtils.blockClass, "--scroll"), "".concat(scrollYValue)), (0, _defineProperty2.default)(_utilSetCustomCSSProp2, "--".concat(_PageHeaderUtils.blockClass, "--breadcrumb-title-top"), "".concat(Math.max(0, metrics.breadcrumbTitleHeight + metrics.titleRowSpaceAbove - scrollYValue), "px")), (0, _defineProperty2.default)(_utilSetCustomCSSProp2, "--".concat(_PageHeaderUtils.blockClass, "--breadcrumb-title-opacity"), "".concat(Math.min(1, Math.max(0, (scrollYValue - (metrics.titleRowSpaceAbove || 0)) / (metrics.breadcrumbTitleHeight || 1) // don't want to divide by zero
    )))), (0, _defineProperty2.default)(_utilSetCustomCSSProp2, "--".concat(_PageHeaderUtils.blockClass, "--breadcrumb-row-width-px"), "".concat(metrics.breadcrumbRowWidth, "px")), _utilSetCustomCSSProp2));
  }, [headerRef, preventBreadcrumbScroll, metrics, metrics.breadcrumbRowHeight, metrics.breadcrumbRowSpaceBelow, metrics.breadcrumbTitleHeight, metrics.breadcrumbRowWidth, metrics.headerHeight, metrics.headerWidth, metrics.headerTopValue, metrics.navigationRowHeight, navigation, pageHeaderOffset, scrollYValue, tags]);
  (0, _use.useWindowScroll)( // on scroll or various layout changes check updates if needed
  function (_ref4) {
    var current = _ref4.current;
    (0, _PageHeaderUtils.utilSetCustomCSSProps)(headerRef, (0, _defineProperty2.default)({}, "--".concat(_PageHeaderUtils.blockClass, "--breadcrumb-top"), "".concat(pageHeaderOffset, "px")));
    var fullyCollapsed = current.scrollY + metrics.headerTopValue + pageHeaderOffset >= 0;
    setFullyCollapsed(fullyCollapsed); // set offset for tagset tooltip

    var tagsetTooltipOffset = fullyCollapsed ? metrics.headerHeight + metrics.headerTopValue + pageHeaderOffset : metrics.headerHeight + pageHeaderOffset;
    document.documentElement.style.setProperty("--".concat(_PageHeaderUtils.blockClass, "--tagset-tooltip-position"), fullyCollapsed ? 'fixed' : 'absolute');
    document.documentElement.style.setProperty("--".concat(_PageHeaderUtils.blockClass, "--tagset-tooltip-offset"), "".concat(tagsetTooltipOffset, "px"));
    setScrollYValue(current.scrollY);
  }, [metrics.headerHeight, metrics.headerTopValue, pageHeaderOffset]);
  (0, _use.useWindowResize)(function () {
    // on window resieze and other updates some values may have changed
    checkUpdateVerticalSpace();
  }, [actionBarItems, availableSpace, breadcrumbItems, preventBreadcrumbScroll, navigation, pageActions, subtitle, tags, title]);
  (0, _react.useEffect)(function () {
    // Determines if the background should be one based on the header height or scroll
    var result = background && 1;

    if (!result && metrics.headerHeight > 0 && (breadcrumbItems || actionBarItems || tags || navigation)) {
      var startAddingAt = parseFloat(_layout.layout05, 10) * parseInt(_layout.baseFontSize);
      var scrollRemaining = metrics.headerHeight - scrollYValue;
      /* don't know how to test resize */

      /* istanbul ignore next if */

      if (scrollRemaining < startAddingAt) {
        var distanceAddingOver = startAddingAt - metrics.breadcrumbRowHeight;
        result = Math.min(1, (startAddingAt - scrollRemaining) / distanceAddingOver);
      }
    }

    (0, _PageHeaderUtils.utilSetCustomCSSProps)(headerRef, (0, _defineProperty2.default)({}, "--".concat(_PageHeaderUtils.blockClass, "--background-opacity"), result));
    setBackgroundOpacity(result);
    setHasCollapseButton(collapseHeaderToggleWanted && result > 0);
  }, [actionBarItems, background, breadcrumbItems, headerRef, metrics.breadcrumbRowHeight, metrics.headerHeight, navigation, scrollYValue, collapseHeaderToggleWanted, tags]);
  (0, _react.useEffect)(function () {
    // Determine if space is needed in the breadcrumb for a collapse button
    setSpaceForCollapseButton(hasCollapseButton && !(navigation || tags) && metrics.headerHeight);
  }, [hasCollapseButton, navigation, tags, metrics.headerHeight]);

  var nextToTabsCheck = function nextToTabsCheck() {
    return preventBreadcrumbScroll && actionBarItems === undefined && scrollYValue + metrics.headerTopValue >= 0;
  };

  (0, _react.useEffect)(function () {
    toggleCollapse(collapseHeader); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [collapseHeader]);
  var titleText = titleShape.text,
      TitleIcon = titleShape.icon,
      titleLoading = titleShape.loading;
  var tempTagSetOverflowProps = {
    // temp fix pending changes to PageHeader implementation
    allTagsModalTitle: 'All tags',
    allTagsModalSearchLabel: 'Search all tags',
    allTagsModalSearchPlaceholderText: 'Search all tags',
    showAllTagsLabel: 'View all tags'
  };
  return /*#__PURE__*/_react.default.createElement(_reactResizeDetector.default, {
    handleHeight: true,
    onResize: handleResize
  }, /*#__PURE__*/_react.default.createElement("section", (0, _extends2.default)({}, rest, {
    className: (0, _classnames.default)([_PageHeaderUtils.blockClass, "".concat(_PageHeaderUtils.blockClass, "--no-margins-below-row"), className, (_ref5 = {}, (0, _defineProperty2.default)(_ref5, "".concat(_PageHeaderUtils.blockClass, "--show-background"), backgroundOpacity > 0), (0, _defineProperty2.default)(_ref5, "".concat(_PageHeaderUtils.blockClass, "--has-navigation"), navigation || tags), (0, _defineProperty2.default)(_ref5, "".concat(_PageHeaderUtils.blockClass, "--has-navigation-tags-only"), !navigation && tags), _ref5)]),
    ref: headerRef
  }), /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Grid, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(_PageHeaderUtils.blockClass, "__non-navigation-row-contnet")
  }, hasBreadcrumbRow ? /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Row, {
    className: (0, _classnames.default)("".concat(_PageHeaderUtils.blockClass, "__breadcrumb-row"), (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(_PageHeaderUtils.blockClass, "__breadcrumb-row--next-to-tabs"), nextToTabsCheck()), (0, _defineProperty2.default)(_cx, "".concat(_PageHeaderUtils.blockClass, "__breadcrumb-row--has-breadcrumbs"), breadcrumbItems), (0, _defineProperty2.default)(_cx, "".concat(_PageHeaderUtils.blockClass, "__breadcrumb-row--has-action-bar"), hasActionBar), _cx))
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(_PageHeaderUtils.blockClass, "__breadcrumb-row--container")
  }, /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Column, {
    className: (0, _classnames.default)("".concat(_PageHeaderUtils.blockClass, "__breadcrumb-column"), (0, _defineProperty2.default)({}, "".concat(_PageHeaderUtils.blockClass, "__breadcrumb-column--background"), breadcrumbItems !== undefined || hasActionBar))
  }, breadcrumbItems !== undefined ? /*#__PURE__*/_react.default.createElement(_BreadcrumbWithOverflow.BreadcrumbWithOverflow, {
    className: "".concat(_PageHeaderUtils.blockClass, "__breadcrumb"),
    noTrailingSlash: title !== undefined
  }, breadcrumbItems, title ? /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.BreadcrumbItem, {
    href: "#",
    isCurrentPage: true,
    className: (0, _classnames.default)(["".concat(_PageHeaderUtils.blockClass, "__breadcrumb-title"), (0, _defineProperty2.default)({}, "".concat(_PageHeaderUtils.blockClass, "__breadcrumb-title--pre-collapsed"), preCollapseTitleRow)])
  }, titleLoading ? /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.SkeletonText, null) : titleText) : '') : ''), /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Column, {
    className: (0, _classnames.default)(["".concat(_PageHeaderUtils.blockClass, "__action-bar-column ").concat(_PageHeaderUtils.blockClass, "__action-bar-column--background"), (_ref7 = {}, (0, _defineProperty2.default)(_ref7, "".concat(_PageHeaderUtils.blockClass, "__action-bar-column--has-page-actions"), pageActions), (0, _defineProperty2.default)(_ref7, "".concat(_PageHeaderUtils.blockClass, "__action-bar-column--influenced-by-collapse-button"), spaceForCollapseButton), _ref7)])
  }, /*#__PURE__*/_react.default.createElement(_reactResizeDetector.default, {
    handleWidth: true,
    onResize: handleResizeActionBarColumn
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(_PageHeaderUtils.blockClass, "__action-bar-column-content")
  }, hasActionBar ?
  /*#__PURE__*/
  // Investigate the responsive  behaviour or this and the title also fix the ActionBar Item and PageAction story css
  _react.default.createElement(_react.default.Fragment, null, pageActions && /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)("".concat(_PageHeaderUtils.blockClass, "__page-actions"), (0, _defineProperty2.default)({}, "".concat(_PageHeaderUtils.blockClass, "__page-actions--in-breadcrumb"), pageActionsInBreadcrumbRow))
  }, /*#__PURE__*/_react.default.createElement(_ButtonSetWithOverflow.ButtonSetWithOverflow, {
    className: "".concat(_PageHeaderUtils.blockClass, "__button-set--in-breadcrumb"),
    onWidthChange: handleButtonSetWidthChange,
    buttons: pageActionsItemArray
  })), /*#__PURE__*/_react.default.createElement(_ActionBar.ActionBar, {
    actions: actionBarItemArray,
    className: "".concat(_PageHeaderUtils.blockClass, "__action-bar"),
    onWidthChange: handleActionBarWidthChange,
    rightAlign: true
  })) : null))))) : null, !preCollapseTitleRow && !(title === undefined && pageActions === undefined) ? /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Row, {
    className: (0, _classnames.default)("".concat(_PageHeaderUtils.blockClass, "__title-row"), (_cx4 = {}, (0, _defineProperty2.default)(_cx4, "".concat(_PageHeaderUtils.blockClass, "__title-row--no-breadcrumb-row"), !hasBreadcrumbRow), (0, _defineProperty2.default)(_cx4, "".concat(_PageHeaderUtils.blockClass, "__title-row--under-action-bar"), hasActionBar), (0, _defineProperty2.default)(_cx4, "".concat(_PageHeaderUtils.blockClass, "__title-row--has-page-actions"), pageActions !== undefined), (0, _defineProperty2.default)(_cx4, "".concat(_PageHeaderUtils.blockClass, "__title-row--sticky"), pageActions !== undefined && actionBarItems === undefined && hasBreadcrumbRow), _cx4))
  }, /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Column, {
    className: "".concat(_PageHeaderUtils.blockClass, "__title-column")
  }, title !== undefined ? /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)("".concat(_PageHeaderUtils.blockClass, "__title"), (0, _defineProperty2.default)({}, "".concat(_PageHeaderUtils.blockClass, "__title--fades"), hasBreadcrumbRow))
  }, TitleIcon && !titleLoading ? /*#__PURE__*/_react.default.createElement(TitleIcon, {
    className: "".concat(_PageHeaderUtils.blockClass, "__title-icon")
  }) : null, /*#__PURE__*/_react.default.createElement("span", {
    title: !titleLoading ? titleText : null
  }, titleLoading ? /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.SkeletonText, {
    className: "".concat(_PageHeaderUtils.blockClass, "__title-skeleton")
  }) : titleText)) : null), pageActions !== undefined ? /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Column, {
    className: (0, _classnames.default)("".concat(_PageHeaderUtils.blockClass, "__page-actions"), (0, _defineProperty2.default)({}, "".concat(_PageHeaderUtils.blockClass, "__page-actions--in-breadcrumb"), pageActionsInBreadcrumbRow))
  }, /*#__PURE__*/_react.default.createElement(_ButtonSetWithOverflow.ButtonSetWithOverflow, {
    className: "".concat(_PageHeaderUtils.blockClass, "__page-actions-container"),
    onWidthChange: handleButtonSetWidthChange,
    buttons: pageActionsItemArray
  })) : null) : null, subtitle !== undefined ? /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Row, {
    className: "".concat(_PageHeaderUtils.blockClass, "__subtitle-row")
  }, /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Column, {
    className: "".concat(_PageHeaderUtils.blockClass, "__subtitle")
  }, subtitle)) : null, availableSpace !== undefined ? /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Row, {
    className: "".concat(_PageHeaderUtils.blockClass, "__available-row")
  }, /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Column, {
    className: "".concat(_PageHeaderUtils.blockClass, "__available-column")
  }, availableSpace)) : null, (breadcrumbItems || actionBarItems || title || pageActions || availableSpace || subtitle) && /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(["".concat(_PageHeaderUtils.blockClass, "__last-row-buffer"), (0, _defineProperty2.default)({}, "".concat(_PageHeaderUtils.blockClass, "__last-row-buffer--active"), lastRowBufferActive)])
  }), // this navigation row scrolls under the breadcrumb if there is one
  tags && !navigation ? /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Row, {
    className: (0, _classnames.default)("".concat(_PageHeaderUtils.blockClass, "__navigation-row"), (0, _defineProperty2.default)({}, "".concat(_PageHeaderUtils.blockClass, "__navigation-row--has-tags"), tags))
  }, /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Column, {
    className: (0, _classnames.default)("".concat(_PageHeaderUtils.blockClass, "__navigation-tags"), (0, _defineProperty2.default)({}, "".concat(_PageHeaderUtils.blockClass, "__navigation-tags--tags-only"), navigation === undefined))
  }, /*#__PURE__*/_react.default.createElement(_TagSet.TagSet, (0, _extends2.default)({
    overflowAlign: "end"
  }, tempTagSetOverflowProps, {
    tags: tags
  })))) : null), // this navigation pushes the breadcrumb off or settles underneath it depending on preventBreadcrumbScroll
  navigation ? /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Row, {
    className: (0, _classnames.default)("".concat(_PageHeaderUtils.blockClass, "__navigation-row"), (_cx9 = {}, (0, _defineProperty2.default)(_cx9, "".concat(_PageHeaderUtils.blockClass, "__navigation-row--spacing-above-06"), navigation !== undefined), (0, _defineProperty2.default)(_cx9, "".concat(_PageHeaderUtils.blockClass, "__navigation-row--has-tags"), tags), _cx9))
  }, /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Column, {
    className: "".concat(_PageHeaderUtils.blockClass, "__navigation-tabs")
  }, navigation), tags !== undefined ? /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Column, {
    className: (0, _classnames.default)("".concat(_PageHeaderUtils.blockClass, "__navigation-tags"), (0, _defineProperty2.default)({}, "".concat(_PageHeaderUtils.blockClass, "__navigation-tags--tags-only"), navigation === undefined))
  }, /*#__PURE__*/_react.default.createElement(_TagSet.TagSet, (0, _extends2.default)({
    overflowAlign: "end"
  }, tempTagSetOverflowProps, {
    tags: tags
  }))) : null) : null), hasCollapseButton ? /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Button, {
    className: (0, _classnames.default)("".concat(_PageHeaderUtils.blockClass, "__collapse-expand-toggle"), (0, _defineProperty2.default)({}, "".concat(_PageHeaderUtils.blockClass, "__collapse-expand-toggle--collapsed"), fullyCollapsed)),
    "data-collapse": fullyCollapsed ? 'collapsed' : 'not collapsed',
    hasIconOnly: true,
    iconDescription: fullyCollapsed ? expandHeaderLabel : collapseHeaderLabel,
    kind: "ghost",
    onClick: handleCollapseToggle,
    renderIcon: _iconsReact.ChevronUp16,
    size: "field",
    tooltipPosition: "bottom",
    tooltipAlignment: "end",
    type: "button"
  }) : null));
}); // Return a placeholder if not released and not enabled by feature flag


exports.PageHeader = PageHeader;
exports.PageHeader = PageHeader = _settings.pkg.checkComponentEnabled(PageHeader, componentName); // copied from carbon-components-react/src/components/Tag/Tag.js for DocGen

var TYPES = {
  red: 'Red',
  magenta: 'Magenta',
  purple: 'Purple',
  blue: 'Blue',
  cyan: 'Cyan',
  teal: 'Teal',
  green: 'Green',
  gray: 'Gray',
  'cool-gray': 'Cool-Gray',
  'warm-gray': 'Warm-Gray',
  'high-contrast': 'High-Contrast'
};
var tagTypes = Object.keys(TYPES);
PageHeader.propTypes = {
  /**
   * Specifies the action bar items. Each item is specified as an object
   * with the properties of a Carbon Button in icon only form. Button kind, size, tooltipPosition,
   * tooltipAlignment and type are ignored.
   */
  actionBarItems: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.shape(_objectSpread(_objectSpread({}, (0, _propsHelper.prepareProps)(_carbonComponentsReact.Button.propTypes, ['kind', 'size', 'tooltipPosition', 'tooltipAlignment'])), {}, {
    iconDescription: _propTypes.default.string.isRequired,
    onClick: _carbonComponentsReact.Button.propTypes.onClick,
    renderIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]).isRequired
  }))), (0, _propsHelper.deprecatePropUsage)(_propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.element), _propTypes.default.element]), 'Expects an array of objects with the following properties: iconDescription, renderIcon and onClick.')]),
  // expects action bar item as array or in fragment

  /**
   * A zone for placing high-level, client content above the page tabs.
   * Accepts arbitrary renderable content as a React node. Optional.
   */
  availableSpace: _propTypes.default.node,

  /**
   * Specifies if the PageHeader should have a background color or not.
   * Optional.
   */
  background: _propTypes.default.bool,

  /**
   * One or more Carbon BreadcrumbItem components, passed in as React element(s).
   * If provided, these are rendered at the top left of the header as
   * a breadcrumb. Optional.
   */
  breadcrumbItems: _propTypes.default.element,
  // expects BreadcrumbItems,

  /**
   * Specifies class(es) to be applied to the top-level PageHeader node.
   * Optional.
   */
  className: _propTypes.default.string,

  /**
   * The header can as a whole be collapsed, expanded or somewhere in between.
   * This setting controls the initial value, but also takes effect on change
   *
   * NOTE: The header is collapsed by setting the scroll position to hide part of the header. Collapsing has no effect if there is insufficient content to scroll.
   */
  collapseHeader: _propTypes.default.bool,

  /**
   * Label/assistive text for the collapse/expand button
   * Default 'Collapse'
   */
  collapseHeaderLabel: _propTypes.default.string,

  /**
   * Enable the collapse header toggle.
   *
   * NOTE: The header is collapsed by setting the scroll position to hide part of the header. Collapsing has no effect if there is insufficient content to scroll.
   */
  collapseHeaderToggleWanted: _propTypes.default.bool,

  /**
   * Label/assistive text for the collapse/expand button
   * Default 'Expand'
   */
  expandHeaderLabel: _propTypes.default.string,

  /**
   * Content for the navigation area in the PageHeader. Should
   * be a React element that is normally a Carbon Tabs component. Optional.
   */
  navigation: _propTypes.default.element,
  // Supports Tabs

  /**
   * Specifies the primary page actions. Each action is specified as an object
   * with the properties of a Carbon Button plus:
   * - label: node
   *
   * Carbon Button API https://react.carbondesignsystem.com/?path=/docs/components-button--default#component-api
   */
  pageActions: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.shape(_objectSpread(_objectSpread({}, _carbonComponentsReact.Button.propTypes), {}, {
    kind: _carbonComponentsReact.Button.propTypes.kind,
    label: _propTypes.default.node.isRequired,
    onClick: _carbonComponentsReact.Button.propTypes.onClick
  }))), (0, _propsHelper.deprecatePropUsage)(_propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.element), _propTypes.default.element]), 'Expects an array of objects with the following properties: label and onClick.')]),

  /**
   * Number of pixels the page header sits from the top of the screen.
   * The nature of the pageHeader makes this hard to measure
   */
  pageHeaderOffset: _propTypes.default.number,

  /**
   * The title row typically starts below the breadcrumb row. This option
   * preCollapses it into the breadcrumb row.
   */
  preCollapseTitleRow: _propTypes.default.bool,

  /**
   * Standard behavior scrolls the breadcrumb off to leave just tabs. This
   * option preserves vertical space for both.
   */
  preventBreadcrumbScroll: _propTypes.default.bool,

  /**
   * A subtitle or description that provides additional context to
   * identify the current page. Optional.
   */
  subtitle: _propTypes.default.string,

  /**
   * The tags to be shown in the PageHeader. Each tag is specified as an object
   * with properties: **label**\* (required) to supply the tag content, and
   * other properties will be passed to the Carbon Tag component, such as
   * **type**, **disabled**, **ref**, **className** , and any other Tag props.
   * NOTE: **filter** is not supported. Any other fields in the object will be passed through to the HTML element
   * as HTML attributes.
   *
   * See https://react.carbondesignsystem.com/?path=/docs/components-tag--default
   */
  tags: _propTypes.default.arrayOf(_propTypes.default.shape(_objectSpread(_objectSpread({}, (0, _propsHelper.prepareProps)(_carbonComponentsReact.Tag.propTypes, 'filter')), {}, {
    label: _propTypes.default.string.isRequired,
    // we duplicate this prop to improve the DocGen
    type: _propTypes.default.oneOf(tagTypes)
  }))),

  /**
   * The title of the page.
   * Optional string or object with the following attributes: text, icon, loading
   */
  title: _propTypes.default.oneOfType([_propTypes.default.shape({
    text: _propTypes.default.string.isRequired,
    icon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    loading: _propTypes.default.bool
  }), _propTypes.default.string]),

  /**
   * An icon to be included to the left of the title text.
   * Optional.
   */
  titleIcon: (0, _propsHelper.deprecateProp)(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]), 'Use `title` prop shape instead.')
};
PageHeader.defaultProps = {
  background: true,
  className: '',
  collapseHeaderLabel: 'Collapse',
  expandHeaderLabel: 'Expand',
  preventBreadcrumbScroll: false,
  pageHeaderOffset: 0,
  preCollapseTitleRow: false
};
PageHeader.displayName = componentName;