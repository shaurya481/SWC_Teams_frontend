"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CreateFullPage = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _settings = require("../../settings");

var _constants = require("./constants");

var _uuidv = _interopRequireDefault(require("../../global/js/utils/uuidv4"));

var _carbonComponentsReact = require("carbon-components-react");

var _ActionSet = require("../ActionSet");

var _excluded = ["backButtonText", "cancelButtonText", "children", "className", "hasToggle", "modalDangerButtonText", "modalDescription", "modalSecondaryButtonText", "modalTitle", "nextButtonText", "onClose", "onRequestSubmit", "submitButtonText", "toggleAriaLabel", "toggleLabelText"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var blockClass = "".concat(_settings.pkg.prefix, "--create-full-page");
var componentName = 'CreateFullPage'; // Custom PropType validator which checks and ensures that the children property has no more than 4 nodes

var isValidChildren = function isValidChildren() {
  return function (_ref) {
    var children = _ref.children;
    children.length > 1 && children.map(function (child) {
      if (child && child.props && child.props.type !== _constants.CREATE_FULL_PAGE_STEP) {
        throw new Error('Each child of Create Full Page is required to be a `CreateFullPageStep`. Please remove the HTML element, or wrap it around the `CreateFullPageStep` component.');
      }

      return;
    });
  };
};

var CreateFullPage = /*#__PURE__*/_react.default.forwardRef(function (_ref2, ref) {
  var backButtonText = _ref2.backButtonText,
      cancelButtonText = _ref2.cancelButtonText,
      children = _ref2.children,
      className = _ref2.className,
      hasToggle = _ref2.hasToggle,
      modalDangerButtonText = _ref2.modalDangerButtonText,
      modalDescription = _ref2.modalDescription,
      modalSecondaryButtonText = _ref2.modalSecondaryButtonText,
      modalTitle = _ref2.modalTitle,
      nextButtonText = _ref2.nextButtonText,
      onClose = _ref2.onClose,
      onRequestSubmit = _ref2.onRequestSubmit,
      submitButtonText = _ref2.submitButtonText,
      toggleAriaLabel = _ref2.toggleAriaLabel,
      toggleLabelText = _ref2.toggleLabelText,
      rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded);

  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      createFullPageActions = _useState2[0],
      setCreateFullPageActions = _useState2[1];

  var _useState3 = (0, _react.useState)(1),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      currentStep = _useState4[0],
      setCurrentStep = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      isSubmitting = _useState6[0],
      setIsSubmitting = _useState6[1];

  var _useState7 = (0, _react.useState)(false),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      modalIsOpen = _useState8[0],
      setModalIsOpen = _useState8[1];

  (0, _react.useEffect)(function () {
    var _getFullPageSteps;

    var onUnmount = function onUnmount() {
      setIsSubmitting(false);
      onClose();
    };

    var handleOnRequestSubmit = /*#__PURE__*/function () {
      var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return onRequestSubmit();

              case 3:
                onUnmount();
                _context.next = 10;
                break;

              case 6:
                _context.prev = 6;
                _context.t0 = _context["catch"](0);
                setIsSubmitting(false);
                console.warn("".concat(componentName, " submit error: ").concat(_context.t0));

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 6]]);
      }));

      return function handleOnRequestSubmit() {
        return _ref3.apply(this, arguments);
      };
    }();

    var isSubmitDisabled = function isSubmitDisabled() {
      var step = 0;
      var submitDisabled = false;
      var createFullPageSteps = getFullPageSteps();
      createFullPageSteps.forEach(function (child) {
        step++;

        if (currentStep === step) {
          submitDisabled = child.props.disableSubmit;
        }
      });
      return submitDisabled;
    };

    var handleNext = /*#__PURE__*/function () {
      var _ref4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var createSteps;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                setIsSubmitting(true);
                createSteps = getFullPageSteps();

                if (!createSteps[currentStep - 1].props.onNext) {
                  _context2.next = 15;
                  break;
                }

                _context2.prev = 3;
                _context2.next = 6;
                return createSteps[currentStep - 1].props.onNext();

              case 6:
                continueToNextStep();
                _context2.next = 13;
                break;

              case 9:
                _context2.prev = 9;
                _context2.t0 = _context2["catch"](3);
                setIsSubmitting(false);
                console.warn("".concat(componentName, " onNext error: ").concat(_context2.t0));

              case 13:
                _context2.next = 16;
                break;

              case 15:
                continueToNextStep();

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[3, 9]]);
      }));

      return function handleNext() {
        return _ref4.apply(this, arguments);
      };
    }();

    var handleSubmit = /*#__PURE__*/function () {
      var _ref5 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
        var createSteps;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                setIsSubmitting(true);
                createSteps = getFullPageSteps(); // last step should have onNext as well

                if (!createSteps[currentStep - 1].props.onNext) {
                  _context3.next = 16;
                  break;
                }

                _context3.prev = 3;
                _context3.next = 6;
                return createSteps[currentStep - 1].props.onNext();

              case 6:
                _context3.next = 8;
                return handleOnRequestSubmit();

              case 8:
                _context3.next = 14;
                break;

              case 10:
                _context3.prev = 10;
                _context3.t0 = _context3["catch"](3);
                setIsSubmitting(false);
                console.warn("".concat(componentName, " onNext error: ").concat(_context3.t0));

              case 14:
                _context3.next = 18;
                break;

              case 16:
                _context3.next = 18;
                return handleOnRequestSubmit();

              case 18:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[3, 10]]);
      }));

      return function handleSubmit() {
        return _ref5.apply(this, arguments);
      };
    }();

    if ((_getFullPageSteps = getFullPageSteps()) !== null && _getFullPageSteps !== void 0 && _getFullPageSteps.length) {
      var createSteps = getFullPageSteps();
      var total = createSteps.length;
      var buttons = [];

      if (total > 1) {
        buttons.push({
          label: backButtonText,
          onClick: function onClick() {
            return setCurrentStep(function (prev) {
              return prev - 1;
            });
          },
          kind: 'secondary',
          disabled: currentStep === 1
        });
        buttons.push({
          label: cancelButtonText,
          onClick: function onClick() {
            setModalIsOpen(true);
          },
          kind: 'ghost'
        });
        buttons.push({
          label: currentStep < total ? nextButtonText : submitButtonText,
          onClick: currentStep < total ? handleNext : handleSubmit,
          disabled: isSubmitDisabled(),
          kind: 'primary',
          loading: isSubmitting,
          className: "".concat(blockClass, "__create-button")
        });
        setCreateFullPageActions(buttons);
      }
    }
  }, [getFullPageSteps, children, backButtonText, cancelButtonText, currentStep, onClose, nextButtonText, submitButtonText, onRequestSubmit, isSubmitting, modalIsOpen]);
  (0, _react.useEffect)(function () {
    var createSteps = getFullPageSteps();
    var total = createSteps.length;

    if (total === 1) {
      console.warn("".concat(componentName, ": CreateFullPages with one step are not permitted. If you require only one step, please use either the CreateTearsheet, CreateSidePanel, or CreateModal components."));
    }
  }, [getFullPageSteps]);

  var continueToNextStep = function continueToNextStep() {
    setIsSubmitting(false);
    setCurrentStep(function (prev) {
      return prev + 1;
    });
  }; // returns an array of full page steps


  var getFullPageSteps = (0, _react.useCallback)(function () {
    var steps = [];
    var childrenArray = Array.isArray(children) ? children : [children];
    childrenArray.forEach(function (child) {
      if (isFullPageStep(child)) {
        steps.push(child);
      }
    });
    return steps;
  }, [children]); // check if child is a full page step component

  var isFullPageStep = function isFullPageStep(child) {
    if (child && child.props && child.props.type === _constants.CREATE_FULL_PAGE_STEP) {
      return true;
    }

    return false;
  };

  var renderProgressSteps = function renderProgressSteps(childrenElements) {
    var childrenArray = Array.isArray(childrenElements) ? childrenElements : [childrenElements];
    childrenArray = childrenArray.filter(function (child) {
      return isFullPageStep(child);
    });
    return /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.ProgressIndicator, {
      currentIndex: currentStep - 1,
      spaceEqually: true,
      vertical: true,
      className: "".concat(blockClass, "__progress-indicator")
    }, childrenArray.map(function (child, stepIndex) {
      return /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.ProgressStep, {
        label: child.props.title ? child.props.title : '',
        key: stepIndex
      });
    }));
  };

  var renderChildren = function renderChildren(childrenElements) {
    var step = 0;
    var childrenArray = Array.isArray(childrenElements) ? childrenElements : [childrenElements];
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, childrenArray.map(function (child, stepIndex) {
      var _cx;

      if (!isFullPageStep(child)) {
        return child;
      }

      step++;
      return /*#__PURE__*/_react.default.cloneElement(child, {
        className: (0, _classnames.default)(child.props.className, (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__step--hidden-section"), currentStep !== step), (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__step--visible-section"), currentStep === step), _cx)),
        key: "key_".concat(stepIndex)
      });
    }));
  };

  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, rest, {
    ref: ref,
    className: (0, _classnames.default)(blockClass, className)
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__influencer")
  }, renderProgressSteps(children), hasToggle && /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Toggle, {
    className: "".concat(blockClass, "__influencer-toggle"),
    "aria-label": toggleAriaLabel,
    id: "toggle-".concat((0, _uuidv.default)()),
    labelText: toggleLabelText
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__body")
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__main")
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__content")
  }, /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Grid, null, renderChildren(children))), /*#__PURE__*/_react.default.createElement(_ActionSet.ActionSet, {
    className: "".concat(blockClass, "__buttons"),
    actions: createFullPageActions,
    size: "max"
  }))), /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.ComposedModal, {
    size: "sm",
    open: modalIsOpen
  }, /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.ModalHeader, {
    title: modalTitle
  }), /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.ModalBody, null, /*#__PURE__*/_react.default.createElement("p", null, modalDescription)), /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.ModalFooter, null, /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Button, {
    type: "button",
    kind: "secondary",
    onClick: function onClick() {
      setModalIsOpen(!modalIsOpen);
    }
  }, modalSecondaryButtonText), /*#__PURE__*/_react.default.createElement(_carbonComponentsReact.Button, {
    type: "button",
    kind: "danger",
    onClick: onClose
  }, modalDangerButtonText))));
}); // Return a placeholder if not released and not enabled by feature flag.


exports.CreateFullPage = CreateFullPage;
exports.CreateFullPage = CreateFullPage = _settings.pkg.checkComponentEnabled(CreateFullPage, componentName); // The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.

CreateFullPage.displayName = componentName; // The types and DocGen commentary for the component props,
// in alphabetical order (for consistency).
// See https://www.npmjs.com/package/prop-types#usage.

CreateFullPage.propTypes = {
  /**
   * The back button text
   */
  backButtonText: _propTypes.default.string.isRequired,

  /**
   * The cancel button text
   */
  cancelButtonText: _propTypes.default.string.isRequired,

  /**
   * The main content of the full page
   */
  children: isValidChildren(),

  /**
   * Provide an optional class to be applied to the containing node.
   */
  className: _propTypes.default.string,

  /**
   * An optional prop that provides a toggle element in the left side influencer panel
   */
  hasToggle: _propTypes.default.bool,

  /**
   * The primary 'danger' button text in the modal
   */
  modalDangerButtonText: _propTypes.default.string.isRequired,

  /**
   * The description located below the title in the modal
   */
  modalDescription: _propTypes.default.string,

  /**
   * The secondary button text in the modal
   */
  modalSecondaryButtonText: _propTypes.default.string.isRequired,

  /**
   * The title located in the header of the modal
   */
  modalTitle: _propTypes.default.string.isRequired,

  /**
   * The next button text
   */
  nextButtonText: _propTypes.default.string.isRequired,

  /**
   * An optional handler that is called when the user closes the full page (by
   * clicking the secondary button, located in the modal, which triggers after
   * clicking the ghost button in the modal
   */
  onClose: _propTypes.default.func,

  /**
   * Specify a handler for submitting the multi step full page (final step).
   * This function can _optionally_ return a promise that is either resolved or rejected and the Createfull page will handle the submitting state of the create button.
   */
  onRequestSubmit: _propTypes.default.func.isRequired,

  /**
   * The submit button text
   */
  submitButtonText: _propTypes.default.string.isRequired,

  /**
   * The main title of the full page, displayed in the header area.
   */
  // title: isTitleRequired(),

  /**
   * The aria label applied to toggle element for accessibility purposes
   */
  toggleAriaLabel: _propTypes.default.string,

  /**
   * The text that will appear above the toggle element
   */
  toggleLabelText: _propTypes.default.string
};