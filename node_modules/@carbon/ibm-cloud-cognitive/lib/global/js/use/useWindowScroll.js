"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useWindowScroll = useWindowScroll;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = require("react");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var windowExists = typeof window !== "undefined";

var getScrollPosition = function getScrollPosition() {
  if (!windowExists) {
    return {
      scrollX: -1,
      scrollY: -1
    };
  } //


  var _window = _objectSpread({}, window),
      scrollX = _window.scrollX,
      scrollY = _window.scrollY;

  return {
    scrollX: scrollX,
    scrollY: scrollY
  };
};

function useWindowScroll(effect, deps) {
  var throttleInterval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var scrollPosition = (0, _react.useRef)({});
  var throttleTimeout = (0, _react.useRef)(null);

  var doGetScrollPosition = function doGetScrollPosition() {
    var newVal = {
      previous: scrollPosition.current,
      current: getScrollPosition()
    }; // call effect

    effect(newVal);
    scrollPosition.current = newVal.current;
    throttleTimeout.current = null;
  };

  (0, _react.useLayoutEffect)(function () {
    var handleScroll = function handleScroll() {
      if (throttleInterval) {
        if (throttleTimeout.current === null) {
          throttleTimeout.current = setTimeout(doGetScrollPosition, throttleInterval);
        }
      } else {
        doGetScrollPosition();
      }
    };

    window.addEventListener('scroll', handleScroll);
    doGetScrollPosition();
    return function () {
      return window.removeEventListener('scroll', handleScroll);
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
}