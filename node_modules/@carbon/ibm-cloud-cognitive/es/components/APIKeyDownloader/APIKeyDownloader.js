import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { pkg } from '../../settings';
var componentName = 'APIKeyDownloader';
export var APIKeyDownloader = function APIKeyDownloader(_ref) {
  var apiKey = _ref.apiKey,
      bodyText = _ref.bodyText,
      fileName = _ref.fileName,
      linkText = _ref.linkText;

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      linkProps = _useState2[0],
      setLinkProps = _useState2[1];

  useEffect(function () {
    var generateLinkProps = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var data, json, blob, href, download, props;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                data = {
                  apiKey: apiKey
                };
                json = JSON.stringify(data);
                blob = new Blob([json], {
                  type: 'application/json'
                });
                _context.next = 5;
                return URL.createObjectURL(blob);

              case 5:
                href = _context.sent;
                download = "".concat(fileName || 'apikey', ".json");
                props = {
                  href: href,
                  download: download
                };
                setLinkProps(props);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function generateLinkProps() {
        return _ref2.apply(this, arguments);
      };
    }();

    generateLinkProps();
  }, [apiKey, fileName]);
  return /*#__PURE__*/React.createElement("p", {
    className: "".concat(pkg.prefix, "--apikey-modal__messaging-text")
  }, bodyText, " ", /*#__PURE__*/React.createElement("a", linkProps, linkText));
};
APIKeyDownloader.displayName = componentName;
APIKeyDownloader.propTypes = {
  /**
   * the api key the user recieves
   */
  apiKey: PropTypes.string,

  /**
   * main component text
   */
  bodyText: PropTypes.string,

  /**
   * optional name for the file being generated
   */
  fileName: PropTypes.string,

  /**
   * text for the anchor tag
   */
  linkText: PropTypes.string
};
APIKeyDownloader.defaultProps = {
  apiKey: '',
  bodyText: '',
  fileName: '',
  linkText: ''
};