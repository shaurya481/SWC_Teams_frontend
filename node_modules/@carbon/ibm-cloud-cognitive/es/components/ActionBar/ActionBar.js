import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["actions", "children", "className", "maxVisible", "onWidthChange", "overflowAriaLabel", "rightAlign"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

//
// Copyright IBM Corp. 2020, 2021
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//
// Import portions of React that are needed.
import React, { useEffect, useState, useRef } from 'react'; // Other standard imports.

import PropTypes from 'prop-types';
import cx from 'classnames';
import { pkg } from '../../settings';
import ReactResizeDetector from 'react-resize-detector'; // Carbon and package components we use.

import { Button, OverflowMenu, OverflowMenuItem } from 'carbon-components-react';
import uuidv4 from '../../global/js/utils/uuidv4';
import { deprecateProp, extractShapesArray, prepareProps } from '../../global/js/utils/props-helper';
import { ActionBarItem } from './ActionBarItem'; // The block part of our conventional BEM class names (blockClass__E--M).

var blockClass = "".concat(pkg.prefix, "--action-bar");
var componentName = 'ActionBar'; // NOTE: the component SCSS is not imported here: it is rolled up separately.

/**
 * The ActionBar is used internally by the PageHeader to wrap ActionBarItems.
 */

export var ActionBar = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var actions = _ref.actions,
      children = _ref.children,
      className = _ref.className,
      maxVisible = _ref.maxVisible,
      onWidthChange = _ref.onWidthChange,
      overflowAriaLabel = _ref.overflowAriaLabel,
      rightAlign = _ref.rightAlign,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      displayCount = _useState2[0],
      setDisplayCount = _useState2[1];

  var _useState3 = useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      displayedItems = _useState4[0],
      setDisplayedItems = _useState4[1];

  var internalId = useRef(uuidv4());

  var _useState5 = useState([]),
      _useState6 = _slicedToArray(_useState5, 2),
      itemArray = _useState6[0],
      setItemArray = _useState6[1];

  var refDisplayedItems = useRef(null);

  var ActionBarOverflowItems = function ActionBarOverflowItems(_ref2) {
    var overflowItems = _ref2.overflowItems;
    return /*#__PURE__*/React.createElement(OverflowMenu, {
      ariaLabel: overflowAriaLabel,
      className: "".concat(blockClass, "__overflow-menu"),
      direction: "bottom",
      flipped: true,
      menuOptionsClass: "".concat(blockClass, "-options")
    }, overflowItems.map(function (item, index) {
      // This uses a copy of a menu item option
      // NOTE: Cannot use a real Tooltip icon below as it uses a <button /> the
      // div equivalent below is based on Carbon 10.25.0
      return /*#__PURE__*/React.createElement(OverflowMenuItem, {
        className: "".concat(blockClass, "__overflow-menu-item"),
        key: "".concat(blockClass, "-overflow-").concat(internalId.current, "-").concat(index),
        itemText: /*#__PURE__*/React.createElement("div", {
          className: "".concat(blockClass, "__overflow-menu-item-content"),
          "aria-describedby": "".concat(internalId, "--overflow-menu-item-label")
        }, /*#__PURE__*/React.createElement("span", {
          className: "".concat(blockClass, "__overflow-menu-item-label"),
          id: "".concat(internalId, "--overflow-menu-item-label")
        }, item.props.iconDescription), /*#__PURE__*/React.createElement(item.props.renderIcon, null))
      });
    }));
  };

  ActionBarOverflowItems.propTypes = {
    /**
     * overflowItems: items to bre shown in the ActionBar overflow menu
     */
    overflowItems: PropTypes.arrayOf(PropTypes.element)
  }; // create child array from children which may be a fragment

  useEffect(function () {
    if (actions) {
      setItemArray(actions);
    } else {
      setItemArray(extractShapesArray(children));
    }
  }, [actions, children]); // creates displayed items based on displayCount and alignment

  useEffect(function () {
    var newDisplayedItems = itemArray.map(function (item, index) {
      return /*#__PURE__*/React.createElement(ActionBarItem, _extends({}, item, {
        key: "".concat(index)
      }));
    }); // extract any there are not room for to newOverflowItems

    var newOverflowItems = newDisplayedItems.splice(displayCount); // add overflow menu if needed

    if (newOverflowItems.length) {
      newDisplayedItems.push( /*#__PURE__*/React.createElement(ActionBarOverflowItems, {
        overflowItems: newOverflowItems,
        key: "overflow-menu-".concat(internalId.current)
      }));
    }

    setDisplayedItems(newDisplayedItems);
  }, [itemArray, displayCount]); // determine display count based on space available and width of pageActions

  var checkFullyVisibleItems = function checkFullyVisibleItems() {
    var spaceAvailable = refDisplayedItems.current.offsetWidth;
    var actionBarItemWidth = refDisplayedItems.current.offsetHeight; // short cut measure width

    /* istanbul ignore next if */

    if (actionBarItemWidth > 0) {
      var mightFit = spaceAvailable / actionBarItemWidth; // visibleItems may include 1 overflow menu

      var visibleItems = maxVisible ? Math.min(itemArray.length, maxVisible + 1) // + 1 for overflow menu if needed
      : itemArray.length;
      var willFit = Math.min(Math.floor(mightFit), visibleItems);
      onWidthChange && onWidthChange({
        maxWidth: actionBarItemWidth * visibleItems,
        minWidth: actionBarItemWidth
      }); // action bar items are a fixed width

      if (willFit < itemArray.length) {
        willFit -= 1; // remove one for overflow menu
      }

      if (willFit < 1) {
        setDisplayCount(0);
      } else {
        setDisplayCount(willFit);
      }
    }
  };

  useEffect(function () {
    checkFullyVisibleItems(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [maxVisible, itemArray]);

  var handleResize = function handleResize() {
    // width is the space available for all action bar items horizontally
    // the action bar items are squares so the height should be one item wide

    /* istanbul ignore next */
    // not sure how to fake window resize
    checkFullyVisibleItems();
  };

  return /*#__PURE__*/React.createElement(ReactResizeDetector, {
    onResize: handleResize
  }, /*#__PURE__*/React.createElement("div", _extends({}, rest, {
    className: cx([blockClass, className]),
    ref: ref
  }), /*#__PURE__*/React.createElement("div", {
    ref: refDisplayedItems,
    className: cx(["".concat(blockClass, "__displayed-items"), _defineProperty({}, "".concat(blockClass, "__displayed-items--right"), rightAlign)])
  }, displayedItems)));
});
ActionBar.displayName = componentName;
ActionBar.propTypes = {
  /**
   * Specifies the action bar items. Each item is specified as an object
   * with the properties of a Carbon Button in icon only form. Button kind, size, tooltipPosition,
   * tooltipAlignment and type are ignored.
   *
   * Carbon Button API https://react.carbondesignsystem.com/?path=/docs/components-button--default#component-api
   */
  actions: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape(_objectSpread(_objectSpread({}, prepareProps(Button.propTypes, ['kind', 'size', 'tooltipPosition', 'tooltipAlignment'])), {}, {
    iconDescription: PropTypes.string.isRequired,
    onClick: Button.propTypes.onClick,
    renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired
  })))]),

  /**
   * children of the action bar (action bar items)
   */
  children: deprecateProp(PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element]), 'See documentation on the `actions` prop.'),
  // expects action bar item as array or in fragment,

  /**
   * className
   */
  className: PropTypes.string,

  /**
   * maxVisible : Maximum action bar items visible before going into the overflow menu
   */
  maxVisible: PropTypes.number,

  /**
   * onItemCountChange - event reporting maxWidth
   */
  onWidthChange: PropTypes.func,

  /**
   * overflowAriaLabel label for open close button overflow used for action bar items that do nto fit.
   */
  overflowAriaLabel: PropTypes.string,

  /**
   * align tags to right of available space
   */
  rightAlign: PropTypes.bool
};
ActionBar.defaultProps = {
  overflowAriaLabel: 'Open and close additional action bar items list.',
  rightAlign: false
};