import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["apiKey", "apiKeyInputId", "apiKeyLabel", "apiKeyVisibility", "className", "copyButtonText", "createButtonText", "customSteps", "createHeader", "downloadBodyText", "downloadLinkText", "downloadable", "downloadableFileName", "error", "errorMessage", "loading", "loadingMessage", "body", "modalLabel", "nameHelperText", "nameInputId", "nameLabel", "namePlaceholder", "nameRequired", "nextStepButtonText", "onClose", "onRequestSubmit", "open", "previousStepButtonText", "secondaryButtonText", "successBody", "successHeader", "stepHeaders"];
//
// Copyright IBM Corp. 2021, 2021
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//
import React, { useState, useRef, useEffect, forwardRef } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { ComposedModal, ModalHeader, ModalFooter, ModalBody, TextInput, InlineLoading, Form, Button } from 'carbon-components-react';
import { InformationFilled16, Copy16, ErrorFilled16 } from '@carbon/icons-react';
import { APIKeyDownloader } from '../APIKeyDownloader';
import { pkg } from '../../settings';
var componentName = 'APIKeyModal';
export var APIKeyModal = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var apiKey = _ref.apiKey,
      apiKeyInputId = _ref.apiKeyInputId,
      apiKeyLabel = _ref.apiKeyLabel,
      apiKeyVisibility = _ref.apiKeyVisibility,
      className = _ref.className,
      copyButtonText = _ref.copyButtonText,
      createButtonText = _ref.createButtonText,
      customSteps = _ref.customSteps,
      createHeader = _ref.createHeader,
      downloadBodyText = _ref.downloadBodyText,
      downloadLinkText = _ref.downloadLinkText,
      downloadable = _ref.downloadable,
      downloadableFileName = _ref.downloadableFileName,
      error = _ref.error,
      errorMessage = _ref.errorMessage,
      loading = _ref.loading,
      loadingMessage = _ref.loadingMessage,
      body = _ref.body,
      modalLabel = _ref.modalLabel,
      nameHelperText = _ref.nameHelperText,
      nameInputId = _ref.nameInputId,
      nameLabel = _ref.nameLabel,
      namePlaceholder = _ref.namePlaceholder,
      nameRequired = _ref.nameRequired,
      nextStepButtonText = _ref.nextStepButtonText,
      onClose = _ref.onClose,
      onRequestSubmit = _ref.onRequestSubmit,
      open = _ref.open,
      previousStepButtonText = _ref.previousStepButtonText,
      secondaryButtonText = _ref.secondaryButtonText,
      successBody = _ref.successBody,
      successHeader = _ref.successHeader,
      stepHeaders = _ref.stepHeaders,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      name = _useState2[0],
      setName = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      currentStep = _useState4[0],
      setCurrentStep = _useState4[1];

  var inputRef = useRef();
  var hasSteps = Boolean(customSteps.length);
  var apiKeyLoaded = apiKey && !loading;
  var hasNextStep = hasSteps && currentStep < customSteps.length - 1;
  var hasPreviousStep = hasSteps && currentStep !== 0;
  useEffect(function () {
    if (inputRef.current && open) {
      inputRef.current.focus();
    }
  }, [open]);

  var isPrimaryButtonDisabled = function isPrimaryButtonDisabled() {
    if (loading) {
      return true;
    }

    if (hasSteps && 'valid' in customSteps[currentStep]) {
      return !customSteps[currentStep].valid;
    }

    if (nameRequired && !name) {
      return true;
    }

    return false;
  };

  var getPrimaryButtonText = function getPrimaryButtonText() {
    if (apiKey) {
      return copyButtonText;
    }

    if (hasNextStep) {
      return nextStepButtonText;
    }

    return createButtonText;
  };

  var getSecondaryButtonText = function getSecondaryButtonText() {
    if (hasPreviousStep && !apiKeyLoaded) {
      return previousStepButtonText;
    }

    return secondaryButtonText;
  };

  var getHeader = function getHeader() {
    if (apiKeyLoaded) {
      return successHeader;
    } else if (hasSteps) {
      return stepHeaders[currentStep];
    }

    return createHeader;
  };

  var setNameHandler = function setNameHandler(evt) {
    setName(evt.target.value);
  };

  var onCloseHandler = function onCloseHandler() {
    setName('');
    setCurrentStep(0);
    onClose();
  };

  var submitHandler = function submitHandler(evt) {
    if (hasNextStep) {
      setCurrentStep(currentStep + 1);
    } else if (apiKeyLoaded) {
      navigator.clipboard.writeText(apiKey);
    } else {
      evt.preventDefault();
      onRequestSubmit();
    }
  };

  var onBackHandler = function onBackHandler() {
    if (hasPreviousStep && !apiKeyLoaded) {
      setCurrentStep(currentStep - 1);
    } else {
      onCloseHandler();
    }
  };

  var blockClass = "".concat(pkg.prefix, "--apikey-modal");
  return /*#__PURE__*/React.createElement(ComposedModal, _extends({}, rest, {
    open: open,
    ref: ref,
    className: cx(className, blockClass),
    onClose: onCloseHandler,
    size: "sm",
    preventCloseOnClickOutside: true
  }), /*#__PURE__*/React.createElement(ModalHeader, {
    className: "".concat(blockClass, "__header"),
    title: getHeader(),
    label: hasPreviousStep ? modalLabel : ''
  }), /*#__PURE__*/React.createElement(ModalBody, {
    className: "".concat(blockClass, "__body-container")
  }, hasSteps && !apiKeyLoaded ? customSteps[currentStep].content : /*#__PURE__*/React.createElement(React.Fragment, null, body && /*#__PURE__*/React.createElement("p", {
    className: "".concat(blockClass, "__body")
  }, body), apiKey && apiKeyVisibility && /*#__PURE__*/React.createElement(TextInput.PasswordInput, {
    value: apiKey,
    labelText: apiKeyLabel,
    id: apiKeyInputId
  }), apiKey && !apiKeyVisibility && /*#__PURE__*/React.createElement(TextInput, {
    value: apiKey,
    labelText: apiKeyLabel,
    id: apiKeyInputId
  }), nameRequired && !apiKeyLoaded && /*#__PURE__*/React.createElement(Form, {
    onSubmit: submitHandler
  }, /*#__PURE__*/React.createElement(TextInput, {
    helperText: nameHelperText,
    placeholder: namePlaceholder,
    labelText: nameLabel,
    onChange: function onChange(evt) {
      return setNameHandler(evt);
    },
    value: name,
    id: nameInputId,
    disabled: loading,
    ref: inputRef
  })), loading && /*#__PURE__*/React.createElement(InlineLoading, {
    description: loadingMessage,
    className: "".concat(blockClass, "__loader")
  }), error && /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__messaging")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__error-icon")
  }, /*#__PURE__*/React.createElement(ErrorFilled16, null)), /*#__PURE__*/React.createElement("p", {
    className: "".concat(blockClass, "__messaging-text")
  }, errorMessage)), apiKeyLoaded && /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__messaging")
  }, /*#__PURE__*/React.createElement(InformationFilled16, null), downloadable ? /*#__PURE__*/React.createElement(APIKeyDownloader, {
    apiKey: apiKey,
    bodyText: downloadBodyText,
    fileName: downloadableFileName,
    linkText: downloadLinkText
  }) : /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__messaging-text")
  }, successBody)))), /*#__PURE__*/React.createElement(ModalFooter, {
    className: "".concat(blockClass, "__footer")
  }, /*#__PURE__*/React.createElement(Button, {
    type: "button",
    kind: "secondary",
    onClick: onBackHandler
  }, getSecondaryButtonText()), /*#__PURE__*/React.createElement(Button, _extends({}, apiKeyLoaded ? {
    renderIcon: Copy16
  } : {}, {
    type: "submit",
    kind: "primary",
    onClick: submitHandler,
    disabled: isPrimaryButtonDisabled()
  }), getPrimaryButtonText())));
}); // Return a placeholder if not released and not enabled by feature flag

APIKeyModal = pkg.checkComponentEnabled(APIKeyModal, componentName);
APIKeyModal.propTypes = {
  /**
   * the api key the user receives
   */
  apiKey: PropTypes.string,

  /**
   * id for the api key input field
   */
  apiKeyInputId: PropTypes.string,

  /**
   * label for the api key input field
   */
  apiKeyLabel: PropTypes.string,

  /**
   * specifies if the api key input should use the password type toggle
   */
  apiKeyVisibility: PropTypes.bool,

  /**
   * content for modal body
   */
  body: PropTypes.string,

  /**
   * Optional classname
   */
  className: PropTypes.string,

  /**
   * text for the copy button
   */
  copyButtonText: PropTypes.string.isRequired,

  /**
   * button text for the create key button
   */
  createButtonText: PropTypes.string,

  /**
   * modal header for the create a key screen
   */
  createHeader: PropTypes.string,

  /**
   * an array that contains the custom step content and if the step has passed validation
   */
  customSteps: PropTypes.arrayOf(PropTypes.shape({
    valid: PropTypes.bool,
    content: PropTypes.node
  })),

  /**
   * text fot the download message
   */
  downloadBodyText: PropTypes.string,

  /**
   * text for the download link
   */
  downloadLinkText: PropTypes.string,

  /**
   * specifies if the api key is downloadable or not
   */
  downloadable: PropTypes.bool,

  /**
   * specifies the filename for downloadable api keys
   */
  downloadableFileName: PropTypes.string,

  /**
   * specifices if an error has occured
   */
  error: PropTypes.bool,

  /**
   * message to display when modal in an error state
   */
  errorMessage: PropTypes.string,

  /**
   * specifies if the api key creation is loading
   */
  loading: PropTypes.bool,

  /**
   * loading message for when the api key is loading
   */
  loadingMessage: PropTypes.string,

  /**
   * Label for modal
   */
  modalLabel: PropTypes.string,

  /**
   * helper text for name input
   */
  nameHelperText: PropTypes.string,

  /**
   * id for name input
   */
  nameInputId: PropTypes.string,

  /**
   * label for name input
   */
  nameLabel: PropTypes.string,

  /**
   * placeholder for name input
   */
  namePlaceholder: PropTypes.string,

  /**
   * specifices if a name is required. If you are using custom steps DO NOT use this for validation.
   * use the `valid` prop in the `customSteps` prop array for validation. see `customSteps` for additional information.
   */
  nameRequired: PropTypes.bool,

  /**
   * Specifies text for next step button
   */
  nextStepButtonText: PropTypes.string,

  /**
   * function to close the modal
   */
  onClose: PropTypes.func,

  /**
   * function that is called to create the api key
   */
  onRequestSubmit: PropTypes.func,

  /**
   * specifies if the modal is open or not
   */
  open: PropTypes.bool,

  /**
   * Specifices text for previous step button
   */
  previousStepButtonText: PropTypes.string,

  /**
   * text for the close button
   */
  secondaryButtonText: PropTypes.string,

  /**
   * Modal header for individual steps
   */
  stepHeaders: PropTypes.arrayOf(PropTypes.string),

  /**
   * content for when an api key is created successfully
   */
  successBody: PropTypes.node.isRequired,

  /**
   * modal header for a successful api key creation
   */
  successHeader: PropTypes.string.isRequired
};
APIKeyModal.defaultProps = {
  apiKeyVisibility: false,
  customSteps: [],
  downloadable: false,
  loading: false,
  nameRequired: false,
  open: false,
  stepHeaders: []
};
APIKeyModal.displayName = componentName;