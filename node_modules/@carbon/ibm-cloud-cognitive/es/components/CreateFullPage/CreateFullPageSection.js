import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { pkg } from '../../settings';
import { Row, Column } from 'carbon-components-react';
import { CREATE_FULL_PAGE_SECTION } from './constants';
var componentName = 'CreateFullPageSection';
var blockClass = "".concat(pkg.prefix, "--create-full-page__section");
export var CreateFullPageSection = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      _ref$hasDivider = _ref.hasDivider,
      hasDivider = _ref$hasDivider === void 0 ? true : _ref$hasDivider,
      _ref$hasForm = _ref.hasForm,
      hasForm = _ref$hasForm === void 0 ? true : _ref$hasForm,
      title = _ref.title,
      subtitle = _ref.subtitle,
      description = _ref.description;
  return /*#__PURE__*/React.createElement("div", {
    className: cx(blockClass, className),
    ref: ref
  }, title && /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "-text-content")
  }, /*#__PURE__*/React.createElement("h2", {
    className: "".concat(blockClass, "-title")
  }, title), subtitle && /*#__PURE__*/React.createElement("h3", {
    className: "".concat(blockClass, "-subtitle")
  }, subtitle), description && /*#__PURE__*/React.createElement("p", {
    className: "".concat(blockClass, "-description")
  }, description)))), hasForm && /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "-form")
  }, children), hasDivider && /*#__PURE__*/React.createElement("span", {
    className: "".concat(blockClass, "-divider")
  }));
}); // Return a placeholder if not released and not enabled by feature flag

CreateFullPageSection = pkg.checkComponentEnabled(CreateFullPageSection, componentName);
CreateFullPageSection.propTypes = {
  /**
   * Content that shows in the CreateFullPage step
   */
  children: PropTypes.node,

  /**
   * Sets an optional className to be added to the CreateFullPage step
   */
  className: PropTypes.string,

  /**
   * Sets an optional description for a create full page step
   */
  description: PropTypes.node,

  /**
   * This will conditionally disable the submit button in the multi step CreateFullPage
   */
  disableSubmit: PropTypes.bool,

  /**
   * This will conditionally render a 1px gray divider span. This is defaulted to true
   */
  hasDivider: PropTypes.bool,

  /**
   * This will conditionally render form content below the step condition. This is defaulted to true
   */
  hasForm: PropTypes.bool,

  /**
   * Sets the subtitle text for a create full page step
   */
  subtitle: PropTypes.node,

  /**
   * Sets the title text for a CreateFullPage step
   */
  title: PropTypes.node
}; // Default values for component props. Default values are not required for
// props that are required, nor for props where the component can apply
// 'undefined' values reasonably. Default values should be provided when the
// component needs to make a choice or assumption when a prop is not supplied.

CreateFullPageSection.defaultProps = {
  type: CREATE_FULL_PAGE_SECTION
};