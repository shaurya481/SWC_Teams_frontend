import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["backButtonText", "cancelButtonText", "children", "className", "hasToggle", "modalDangerButtonText", "modalDescription", "modalSecondaryButtonText", "modalTitle", "nextButtonText", "onClose", "onRequestSubmit", "submitButtonText", "toggleAriaLabel", "toggleLabelText"];
import _regeneratorRuntime from "@babel/runtime/regenerator";

/**
 * Copyright IBM Corp. 2021, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Import portions of React that are needed.
import React, { useEffect, useCallback, useState } from 'react'; // Other standard imports.

import PropTypes from 'prop-types';
import cx from 'classnames';
import { pkg } from '../../settings';
import { CREATE_FULL_PAGE_STEP } from './constants';
import uuidv4 from '../../global/js/utils/uuidv4'; // Carbon and package components we use.

import { Grid, ModalFooter, ProgressIndicator, ProgressStep, Toggle, ComposedModal, ModalHeader, ModalBody, Button } from 'carbon-components-react';
import { ActionSet } from '../ActionSet';
var blockClass = "".concat(pkg.prefix, "--create-full-page");
var componentName = 'CreateFullPage'; // Custom PropType validator which checks and ensures that the children property has no more than 4 nodes

var isValidChildren = function isValidChildren() {
  return function (_ref) {
    var children = _ref.children;
    children.length > 1 && children.map(function (child) {
      if (child && child.props && child.props.type !== CREATE_FULL_PAGE_STEP) {
        throw new Error('Each child of Create Full Page is required to be a `CreateFullPageStep`. Please remove the HTML element, or wrap it around the `CreateFullPageStep` component.');
      }

      return;
    });
  };
};

export var CreateFullPage = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {
  var backButtonText = _ref2.backButtonText,
      cancelButtonText = _ref2.cancelButtonText,
      children = _ref2.children,
      className = _ref2.className,
      hasToggle = _ref2.hasToggle,
      modalDangerButtonText = _ref2.modalDangerButtonText,
      modalDescription = _ref2.modalDescription,
      modalSecondaryButtonText = _ref2.modalSecondaryButtonText,
      modalTitle = _ref2.modalTitle,
      nextButtonText = _ref2.nextButtonText,
      onClose = _ref2.onClose,
      onRequestSubmit = _ref2.onRequestSubmit,
      submitButtonText = _ref2.submitButtonText,
      toggleAriaLabel = _ref2.toggleAriaLabel,
      toggleLabelText = _ref2.toggleLabelText,
      rest = _objectWithoutProperties(_ref2, _excluded);

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      createFullPageActions = _useState2[0],
      setCreateFullPageActions = _useState2[1];

  var _useState3 = useState(1),
      _useState4 = _slicedToArray(_useState3, 2),
      currentStep = _useState4[0],
      setCurrentStep = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      isSubmitting = _useState6[0],
      setIsSubmitting = _useState6[1];

  var _useState7 = useState(false),
      _useState8 = _slicedToArray(_useState7, 2),
      modalIsOpen = _useState8[0],
      setModalIsOpen = _useState8[1];

  useEffect(function () {
    var _getFullPageSteps;

    var onUnmount = function onUnmount() {
      setIsSubmitting(false);
      onClose();
    };

    var handleOnRequestSubmit = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return onRequestSubmit();

              case 3:
                onUnmount();
                _context.next = 10;
                break;

              case 6:
                _context.prev = 6;
                _context.t0 = _context["catch"](0);
                setIsSubmitting(false);
                console.warn("".concat(componentName, " submit error: ").concat(_context.t0));

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 6]]);
      }));

      return function handleOnRequestSubmit() {
        return _ref3.apply(this, arguments);
      };
    }();

    var isSubmitDisabled = function isSubmitDisabled() {
      var step = 0;
      var submitDisabled = false;
      var createFullPageSteps = getFullPageSteps();
      createFullPageSteps.forEach(function (child) {
        step++;

        if (currentStep === step) {
          submitDisabled = child.props.disableSubmit;
        }
      });
      return submitDisabled;
    };

    var handleNext = /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var createSteps;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                setIsSubmitting(true);
                createSteps = getFullPageSteps();

                if (!createSteps[currentStep - 1].props.onNext) {
                  _context2.next = 15;
                  break;
                }

                _context2.prev = 3;
                _context2.next = 6;
                return createSteps[currentStep - 1].props.onNext();

              case 6:
                continueToNextStep();
                _context2.next = 13;
                break;

              case 9:
                _context2.prev = 9;
                _context2.t0 = _context2["catch"](3);
                setIsSubmitting(false);
                console.warn("".concat(componentName, " onNext error: ").concat(_context2.t0));

              case 13:
                _context2.next = 16;
                break;

              case 15:
                continueToNextStep();

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[3, 9]]);
      }));

      return function handleNext() {
        return _ref4.apply(this, arguments);
      };
    }();

    var handleSubmit = /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var createSteps;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                setIsSubmitting(true);
                createSteps = getFullPageSteps(); // last step should have onNext as well

                if (!createSteps[currentStep - 1].props.onNext) {
                  _context3.next = 16;
                  break;
                }

                _context3.prev = 3;
                _context3.next = 6;
                return createSteps[currentStep - 1].props.onNext();

              case 6:
                _context3.next = 8;
                return handleOnRequestSubmit();

              case 8:
                _context3.next = 14;
                break;

              case 10:
                _context3.prev = 10;
                _context3.t0 = _context3["catch"](3);
                setIsSubmitting(false);
                console.warn("".concat(componentName, " onNext error: ").concat(_context3.t0));

              case 14:
                _context3.next = 18;
                break;

              case 16:
                _context3.next = 18;
                return handleOnRequestSubmit();

              case 18:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[3, 10]]);
      }));

      return function handleSubmit() {
        return _ref5.apply(this, arguments);
      };
    }();

    if ((_getFullPageSteps = getFullPageSteps()) !== null && _getFullPageSteps !== void 0 && _getFullPageSteps.length) {
      var createSteps = getFullPageSteps();
      var total = createSteps.length;
      var buttons = [];

      if (total > 1) {
        buttons.push({
          label: backButtonText,
          onClick: function onClick() {
            return setCurrentStep(function (prev) {
              return prev - 1;
            });
          },
          kind: 'secondary',
          disabled: currentStep === 1
        });
        buttons.push({
          label: cancelButtonText,
          onClick: function onClick() {
            setModalIsOpen(true);
          },
          kind: 'ghost'
        });
        buttons.push({
          label: currentStep < total ? nextButtonText : submitButtonText,
          onClick: currentStep < total ? handleNext : handleSubmit,
          disabled: isSubmitDisabled(),
          kind: 'primary',
          loading: isSubmitting,
          className: "".concat(blockClass, "__create-button")
        });
        setCreateFullPageActions(buttons);
      }
    }
  }, [getFullPageSteps, children, backButtonText, cancelButtonText, currentStep, onClose, nextButtonText, submitButtonText, onRequestSubmit, isSubmitting, modalIsOpen]);
  useEffect(function () {
    var createSteps = getFullPageSteps();
    var total = createSteps.length;

    if (total === 1) {
      console.warn("".concat(componentName, ": CreateFullPages with one step are not permitted. If you require only one step, please use either the CreateTearsheet, CreateSidePanel, or CreateModal components."));
    }
  }, [getFullPageSteps]);

  var continueToNextStep = function continueToNextStep() {
    setIsSubmitting(false);
    setCurrentStep(function (prev) {
      return prev + 1;
    });
  }; // returns an array of full page steps


  var getFullPageSteps = useCallback(function () {
    var steps = [];
    var childrenArray = Array.isArray(children) ? children : [children];
    childrenArray.forEach(function (child) {
      if (isFullPageStep(child)) {
        steps.push(child);
      }
    });
    return steps;
  }, [children]); // check if child is a full page step component

  var isFullPageStep = function isFullPageStep(child) {
    if (child && child.props && child.props.type === CREATE_FULL_PAGE_STEP) {
      return true;
    }

    return false;
  };

  var renderProgressSteps = function renderProgressSteps(childrenElements) {
    var childrenArray = Array.isArray(childrenElements) ? childrenElements : [childrenElements];
    childrenArray = childrenArray.filter(function (child) {
      return isFullPageStep(child);
    });
    return /*#__PURE__*/React.createElement(ProgressIndicator, {
      currentIndex: currentStep - 1,
      spaceEqually: true,
      vertical: true,
      className: "".concat(blockClass, "__progress-indicator")
    }, childrenArray.map(function (child, stepIndex) {
      return /*#__PURE__*/React.createElement(ProgressStep, {
        label: child.props.title ? child.props.title : '',
        key: stepIndex
      });
    }));
  };

  var renderChildren = function renderChildren(childrenElements) {
    var step = 0;
    var childrenArray = Array.isArray(childrenElements) ? childrenElements : [childrenElements];
    return /*#__PURE__*/React.createElement(React.Fragment, null, childrenArray.map(function (child, stepIndex) {
      var _cx;

      if (!isFullPageStep(child)) {
        return child;
      }

      step++;
      return /*#__PURE__*/React.cloneElement(child, {
        className: cx(child.props.className, (_cx = {}, _defineProperty(_cx, "".concat(blockClass, "__step--hidden-section"), currentStep !== step), _defineProperty(_cx, "".concat(blockClass, "__step--visible-section"), currentStep === step), _cx)),
        key: "key_".concat(stepIndex)
      });
    }));
  };

  return /*#__PURE__*/React.createElement("div", _extends({}, rest, {
    ref: ref,
    className: cx(blockClass, className)
  }), /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__influencer")
  }, renderProgressSteps(children), hasToggle && /*#__PURE__*/React.createElement(Toggle, {
    className: "".concat(blockClass, "__influencer-toggle"),
    "aria-label": toggleAriaLabel,
    id: "toggle-".concat(uuidv4()),
    labelText: toggleLabelText
  })), /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__body")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__main")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__content")
  }, /*#__PURE__*/React.createElement(Grid, null, renderChildren(children))), /*#__PURE__*/React.createElement(ActionSet, {
    className: "".concat(blockClass, "__buttons"),
    actions: createFullPageActions,
    size: "max"
  }))), /*#__PURE__*/React.createElement(ComposedModal, {
    size: "sm",
    open: modalIsOpen
  }, /*#__PURE__*/React.createElement(ModalHeader, {
    title: modalTitle
  }), /*#__PURE__*/React.createElement(ModalBody, null, /*#__PURE__*/React.createElement("p", null, modalDescription)), /*#__PURE__*/React.createElement(ModalFooter, null, /*#__PURE__*/React.createElement(Button, {
    type: "button",
    kind: "secondary",
    onClick: function onClick() {
      setModalIsOpen(!modalIsOpen);
    }
  }, modalSecondaryButtonText), /*#__PURE__*/React.createElement(Button, {
    type: "button",
    kind: "danger",
    onClick: onClose
  }, modalDangerButtonText))));
}); // Return a placeholder if not released and not enabled by feature flag.

CreateFullPage = pkg.checkComponentEnabled(CreateFullPage, componentName); // The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.

CreateFullPage.displayName = componentName; // The types and DocGen commentary for the component props,
// in alphabetical order (for consistency).
// See https://www.npmjs.com/package/prop-types#usage.

CreateFullPage.propTypes = {
  /**
   * The back button text
   */
  backButtonText: PropTypes.string.isRequired,

  /**
   * The cancel button text
   */
  cancelButtonText: PropTypes.string.isRequired,

  /**
   * The main content of the full page
   */
  children: isValidChildren(),

  /**
   * Provide an optional class to be applied to the containing node.
   */
  className: PropTypes.string,

  /**
   * An optional prop that provides a toggle element in the left side influencer panel
   */
  hasToggle: PropTypes.bool,

  /**
   * The primary 'danger' button text in the modal
   */
  modalDangerButtonText: PropTypes.string.isRequired,

  /**
   * The description located below the title in the modal
   */
  modalDescription: PropTypes.string,

  /**
   * The secondary button text in the modal
   */
  modalSecondaryButtonText: PropTypes.string.isRequired,

  /**
   * The title located in the header of the modal
   */
  modalTitle: PropTypes.string.isRequired,

  /**
   * The next button text
   */
  nextButtonText: PropTypes.string.isRequired,

  /**
   * An optional handler that is called when the user closes the full page (by
   * clicking the secondary button, located in the modal, which triggers after
   * clicking the ghost button in the modal
   */
  onClose: PropTypes.func,

  /**
   * Specify a handler for submitting the multi step full page (final step).
   * This function can _optionally_ return a promise that is either resolved or rejected and the Createfull page will handle the submitting state of the create button.
   */
  onRequestSubmit: PropTypes.func.isRequired,

  /**
   * The submit button text
   */
  submitButtonText: PropTypes.string.isRequired,

  /**
   * The main title of the full page, displayed in the header area.
   */
  // title: isTitleRequired(),

  /**
   * The aria label applied to toggle element for accessibility purposes
   */
  toggleAriaLabel: PropTypes.string,

  /**
   * The text that will appear above the toggle element
   */
  toggleLabelText: PropTypes.string
};