function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Copyright IBM Corp. 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { useEffect, useRef, useState } from 'react';
import classnames from 'classnames';
import PropTypes from 'prop-types';
import { settings } from 'carbon-components';
import { keys, match } from '../../internal/keyboard';
import ClickListener from '../../internal/ClickListener';
import { capWithinRange, clickedElementHasSubnodes, focusNode as focusNodeUtil, getNextNode, getParentMenu, getParentNode, getPosition, getValidNodes, resetFocus } from './_utils';
import MenuGroup from './MenuGroup';
import MenuRadioGroup from './MenuRadioGroup';
import MenuRadioGroupOptions from './MenuRadioGroupOptions';
import MenuSelectableItem from './MenuSelectableItem';
var prefix = settings.prefix;
var margin = 16; // distance to keep to body edges, in px

var Menu = function Menu(_ref) {
  var _classnames;

  var _ref$autoclose = _ref.autoclose,
      autoclose = _ref$autoclose === void 0 ? true : _ref$autoclose,
      children = _ref.children,
      open = _ref.open,
      _ref$level = _ref.level,
      level = _ref$level === void 0 ? 1 : _ref$level,
      _ref$x = _ref.x,
      x = _ref$x === void 0 ? 0 : _ref$x,
      _ref$y = _ref.y,
      y = _ref$y === void 0 ? 0 : _ref$y,
      _ref$onClose = _ref.onClose,
      onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose,
      rest = _objectWithoutProperties(_ref, ["autoclose", "children", "open", "level", "x", "y", "onClose"]);

  var rootRef = useRef(null);

  var _useState = useState(1),
      _useState2 = _slicedToArray(_useState, 2),
      direction = _useState2[0],
      setDirection = _useState2[1]; // 1 = to right, -1 = to left


  var _useState3 = useState([x, y]),
      _useState4 = _slicedToArray(_useState3, 2),
      position = _useState4[0],
      setPosition = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      canBeClosed = _useState6[0],
      setCanBeClosed = _useState6[1];

  var isRootMenu = level === 1;

  function getContainerBoundaries() {
    var _document$body = document.body,
        bodyWidth = _document$body.clientWidth,
        bodyHeight = _document$body.clientHeight;
    return [margin, margin, bodyWidth - margin, bodyHeight - margin];
  }

  function getTargetBoundaries() {
    var xIsRange = _typeof(x) === 'object' && x.length === 2;
    var yIsRange = _typeof(y) === 'object' && y.length === 2;
    var targetBoundaries = [xIsRange ? x[0] : x, yIsRange ? y[0] : y, xIsRange ? x[1] : x, yIsRange ? y[1] : y];

    if (!isRootMenu) {
      var _getParentMenu, _rootRef$current;

      var _getParentMenu$getBou = (_getParentMenu = getParentMenu(rootRef === null || rootRef === void 0 ? void 0 : (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.element)) === null || _getParentMenu === void 0 ? void 0 : _getParentMenu.getBoundingClientRect(),
          parentWidth = _getParentMenu$getBou.width;

      targetBoundaries[2] -= parentWidth;
    }

    var containerBoundaries = getContainerBoundaries();
    return [capWithinRange(targetBoundaries[0], containerBoundaries[0], containerBoundaries[2]), capWithinRange(targetBoundaries[1], containerBoundaries[1], containerBoundaries[3]), capWithinRange(targetBoundaries[2], containerBoundaries[0], containerBoundaries[2]), capWithinRange(targetBoundaries[3], containerBoundaries[1], containerBoundaries[3])];
  }

  function focusNode(node) {
    if (node) {
      var _rootRef$current2;

      resetFocus(rootRef === null || rootRef === void 0 ? void 0 : (_rootRef$current2 = rootRef.current) === null || _rootRef$current2 === void 0 ? void 0 : _rootRef$current2.element);
      focusNodeUtil(node);
    }
  }

  function handleKeyDown(event) {
    if (event.target.tagName === 'LI' && (match(event, keys.Enter) || match(event, keys.Space))) {
      handleClick(event);
    } else {
      event.stopPropagation();
    }

    if (match(event, keys.Escape) || !isRootMenu && match(event, keys.ArrowLeft)) {
      onClose();
    }

    var nodeToFocus;

    if (event.target.tagName === 'LI') {
      var currentNode = event.target;

      if (match(event, keys.ArrowUp)) {
        nodeToFocus = getNextNode(currentNode, -1);
      } else if (match(event, keys.ArrowDown)) {
        nodeToFocus = getNextNode(currentNode, 1);
      } else if (match(event, keys.ArrowLeft)) {
        nodeToFocus = getParentNode(currentNode);
      }
    } else if (event.target.tagName === 'UL') {
      var validNodes = getValidNodes(event.target);

      if (validNodes.length > 0 && match(event, keys.ArrowUp)) {
        nodeToFocus = validNodes[validNodes.length - 1];
      } else if (validNodes.length > 0 && match(event, keys.ArrowDown)) {
        nodeToFocus = validNodes[0];
      }
    }

    focusNode(nodeToFocus);

    if (rest.onKeyDown) {
      rest.onKeyDown(event);
    }
  }

  function handleClick(e) {
    if (!clickedElementHasSubnodes(e) && e.target.tagName !== 'UL') {
      onClose();
    } else {
      e.stopPropagation();
    }
  }

  function handleClickOutside(e) {
    if (!clickedElementHasSubnodes(e) && open && canBeClosed && autoclose) {
      onClose();
    }
  }

  function getCorrectedPosition(preferredDirection) {
    var _rootRef$current3, _rootRef$current3$ele;

    var elementRect = rootRef === null || rootRef === void 0 ? void 0 : (_rootRef$current3 = rootRef.current) === null || _rootRef$current3 === void 0 ? void 0 : (_rootRef$current3$ele = _rootRef$current3.element) === null || _rootRef$current3$ele === void 0 ? void 0 : _rootRef$current3$ele.getBoundingClientRect();
    var elementDimensions = [elementRect.width, elementRect.height];
    var targetBoundaries = getTargetBoundaries();
    var containerBoundaries = getContainerBoundaries();

    var _getPosition = getPosition(elementDimensions, targetBoundaries, containerBoundaries, preferredDirection),
        correctedPosition = _getPosition.position,
        correctedDirection = _getPosition.direction;

    setDirection(correctedDirection);
    return correctedPosition;
  }

  useEffect(function () {
    setCanBeClosed(false);

    if (open) {
      var localDirection = 1;

      if (isRootMenu) {
        var _rootRef$current4, _rootRef$current4$ele;

        rootRef === null || rootRef === void 0 ? void 0 : (_rootRef$current4 = rootRef.current) === null || _rootRef$current4 === void 0 ? void 0 : (_rootRef$current4$ele = _rootRef$current4.element) === null || _rootRef$current4$ele === void 0 ? void 0 : _rootRef$current4$ele.focus();
      } else {
        var _rootRef$current5;

        var parentMenu = getParentMenu(rootRef === null || rootRef === void 0 ? void 0 : (_rootRef$current5 = rootRef.current) === null || _rootRef$current5 === void 0 ? void 0 : _rootRef$current5.element);

        if (parentMenu) {
          localDirection = Number(parentMenu.dataset.direction);
        }
      }

      var correctedPosition = getCorrectedPosition(localDirection);
      setPosition(correctedPosition);
      setCanBeClosed(true);
    } else {
      setPosition([0, 0]);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [open, x, y]);
  var someNodesHaveIcons = React.Children.toArray(children).some(function (node) {
    return node.type === MenuSelectableItem || node.type === MenuRadioGroup;
  });
  var options = React.Children.map(children, function (node) {
    if ( /*#__PURE__*/React.isValidElement(node)) {
      return /*#__PURE__*/React.cloneElement(node, {
        indented: someNodesHaveIcons,
        level: level
      });
    }
  });
  var classes = classnames("".concat(prefix, "--menu"), (_classnames = {}, _defineProperty(_classnames, "".concat(prefix, "--menu--open"), open), _defineProperty(_classnames, "".concat(prefix, "--menu--invisible"), open && position[0] === 0 && position[1] === 0), _defineProperty(_classnames, "".concat(prefix, "--menu--root"), isRootMenu), _classnames));
  var ulAttributes = {
    className: classes,
    onKeyDown: handleKeyDown,
    onClick: handleClick,
    role: 'menu',
    tabIndex: -1,
    'data-direction': direction,
    'data-level': level,
    style: {
      left: "".concat(position[0], "px"),
      top: "".concat(position[1], "px")
    }
  };
  var childrenToRender = options; // if the only child is a radiogroup, don't render it as radiogroup component, but
  // only the items to prevent duplicate markup

  if (options && options.length === 1 && options[0].type === MenuRadioGroup) {
    var radioGroupProps = options[0].props;
    ulAttributes['aria-label'] = radioGroupProps.label;
    childrenToRender = /*#__PURE__*/React.createElement(MenuRadioGroupOptions, {
      items: radioGroupProps.items,
      initialSelectedItem: radioGroupProps.initialSelectedItem,
      onChange: radioGroupProps.onChange
    });
  } // if the only child is a generic group, don't render it as group component, but
  // only the children to prevent duplicate markup


  if (options && options.length === 1 && options[0].type === MenuGroup) {
    var groupProps = options[0].props;
    ulAttributes['aria-label'] = groupProps.label;
    childrenToRender = React.Children.toArray(options[0].props.children);
  }

  return /*#__PURE__*/React.createElement(ClickListener, {
    onClickOutside: handleClickOutside,
    ref: rootRef
  }, /*#__PURE__*/React.createElement("ul", ulAttributes, childrenToRender));
};

Menu.propTypes = {
  /**
   * Whether or not the menu should automatically close when
   * an outside click is registered
   */
  autoclose: PropTypes.bool,

  /**
   * Specify the children of the Menu
   */
  children: PropTypes.node,

  /**
   * Internal: keeps track of the nesting level of the menu
   */
  level: PropTypes.number,

  /**
   * Function called when the menu is closed
   */
  onClose: PropTypes.func,

  /**
   * Specify whether the Menu is currently open
   */
  open: PropTypes.bool,

  /**
   * Specify the x position where this menu is rendered
   */
  x: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),

  /**
   * Specify the y position where this menu is rendered
   */
  y: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)])
};
export default Menu;