{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"borderColor\", \"boxedBorder\", \"className\", \"disabled\", \"onPrimaryClick\", \"onSecondaryClick\", \"primaryButtonLabel\", \"primaryKind\", \"secondaryButtonLabel\", \"secondaryKind\", \"size\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2020, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\n\nimport React from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pkg } from '../../settings'; // Carbon and package components we use.\n\nimport { Button, ButtonSet } from 'carbon-components-react'; // The block part of our conventional BEM class names (blockClass__E--M).\n\nvar blockClass = \"\".concat(pkg.prefix, \"--example-component\");\nvar componentName = 'ExampleComponent'; // NOTE: the component SCSS is not imported here: it is rolled up separately.\n\n/**\n * This is an example component to show relevant conventions and usage.\n */\n\nexport var ExampleComponent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var borderColor = _ref.borderColor,\n      boxedBorder = _ref.boxedBorder,\n      className = _ref.className,\n      disabled = _ref.disabled,\n      onPrimaryClick = _ref.onPrimaryClick,\n      onSecondaryClick = _ref.onSecondaryClick,\n      primaryButtonLabel = _ref.primaryButtonLabel,\n      primaryKind = _ref.primaryKind,\n      secondaryButtonLabel = _ref.secondaryButtonLabel,\n      secondaryKind = _ref.secondaryKind,\n      size = _ref.size,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var modeClass = boxedBorder ? \"\".concat(blockClass, \"--boxed-set\") : \"\".concat(blockClass, \"--shadow-set\");\n\n  var handlePrimaryClick = function handlePrimaryClick(e) {\n    if (onPrimaryClick) {\n      onPrimaryClick(e);\n    }\n  };\n\n  var handleSecondaryClick = function handleSecondaryClick(e) {\n    if (onSecondaryClick) {\n      onSecondaryClick(e);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ButtonSet, _extends({}, // Pass through any other property values as HTML attributes.\n  rest, {\n    className: cx(blockClass, // Apply the block class to the main HTML element\n    className, // Apply any supplied class names to the main HTML element.\n    \"\".concat(blockClass, \"--\").concat(size), modeClass),\n    ref: ref,\n    role: \"main\",\n    style: _objectSpread(_objectSpread({}, style), {}, _defineProperty({}, \"--\".concat(pkg.prefix, \"-border-color\"), borderColor))\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"\".concat(blockClass, \"__secondary-button\"),\n    kind: secondaryKind,\n    onClick: handleSecondaryClick,\n    disabled: disabled,\n    size: size\n  }, secondaryButtonLabel), /*#__PURE__*/React.createElement(Button, {\n    className: \"\".concat(blockClass, \"__primary-button\"),\n    kind: primaryKind,\n    onClick: handlePrimaryClick,\n    disabled: disabled,\n    size: size\n  }, primaryButtonLabel));\n}); // Return a placeholder if not released and not enabled by feature flag.\n\nExampleComponent = pkg.checkComponentEnabled(ExampleComponent, componentName); // The display name of the component, used by React. Note that displayName\n// is used in preference to relying on function.name.\n\nExampleComponent.displayName = componentName; // The types and DocGen commentary for the component props,\n// in alphabetical order (for consistency).\n// See https://www.npmjs.com/package/prop-types#usage.\n\nExampleComponent.propTypes = {\n  /**\n   * What border color (HTML color value) to use.\n   */\n  borderColor: PropTypes.string,\n\n  /**\n   * If true, the border is a box, otherwise it is a shadow.\n   */\n  boxedBorder: PropTypes.bool,\n\n  /**\n   * Provide an optional class to be applied to the containing node.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If true, the buttons are disabled, otherwise they can be used.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * An optional primary button click handler.\n   */\n  onPrimaryClick: PropTypes.func,\n\n  /**\n   * An optional secondary button click handler.\n   */\n  onSecondaryClick: PropTypes.func,\n\n  /**\n   * The primary button label.\n   */\n  primaryButtonLabel: PropTypes.string.isRequired,\n\n  /**\n   * The kind of button for the primary button ('primary' or 'danger').\n   */\n  primaryKind: PropTypes.oneOf(['primary', 'danger']),\n\n  /**\n   * The secondary button label.\n   */\n  secondaryButtonLabel: PropTypes.string.isRequired,\n\n  /**\n   * The kind of button for the secondary button ('secondary' or 'tertiary').\n   */\n  secondaryKind: PropTypes.oneOf(['secondary', 'tertiary']),\n\n  /**\n   * The size for the buttons ('default', 'small' or 'field').\n   */\n  size: PropTypes.oneOf(['default', 'small', 'field']),\n\n  /**\n   * Optional style settings for the containing node.\n   */\n  style: PropTypes.object\n}; // Default values for component props. Default values are not required for\n// props that are required, nor for props where the component can apply\n// 'undefined' values reasonably. Default values should be provided when the\n// component needs to make a choice or assumption when a prop is not supplied.\n\nExampleComponent.defaultProps = {\n  boxedBorder: false,\n  primaryKind: 'primary',\n  secondaryKind: 'secondary',\n  size: 'default'\n};","map":null,"metadata":{},"sourceType":"module"}