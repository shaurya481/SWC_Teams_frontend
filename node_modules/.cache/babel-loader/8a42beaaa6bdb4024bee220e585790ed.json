{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2020, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\n\nimport React from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport { pkg } from '../../settings';\nimport { allPropTypes, deprecateProp, prepareProps } from '../../global/js/utils/props-helper'; // Carbon and package components we use.\n\nimport { Button } from 'carbon-components-react';\nimport { ActionSet } from '../ActionSet';\nimport { tearsheetHasCloseIcon, TearsheetShell } from './TearsheetShell';\nvar componentName = 'Tearsheet'; // NOTE: the component SCSS is not imported here: it is rolled up separately.\n\n/**\n * A tearsheet is a mostly full-screen type of dialog that keeps users\n * in-context and focused by bringing actionable content front and center while\n * revealing parts of the UI behind it. There is also a narrow variant of the\n * tearsheet.\n *\n * A tearsheet comprises up to 5 zones, allowing for flexibility depending on\n * the content: a heading area including a title, an optional navigation area\n * that sits just below the heading, an optional influencer which is a side\n * panel on either the left or right side, the main content area, and a set of\n * action buttons.\n */\n\nexport var Tearsheet = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(TearsheetShell, prepareProps(props, [], {\n    ref: ref,\n    size: 'wide'\n  }));\n}); // Return a placeholder if not released and not enabled by feature flag\n\nTearsheet = pkg.checkComponentEnabled(Tearsheet, componentName); // The display name of the component, used by React. Note that displayName\n// is used in preference to relying on function.name.\n\nTearsheet.displayName = componentName; // The types and DocGen commentary for the component props,\n// in alphabetical order (for consistency).\n// See https://www.npmjs.com/package/prop-types#usage.\n// Note that the descriptions here should be kept in sync with those for the\n// corresponding props for TearsheetNarrow and TearsheetShell components.\n\nTearsheet.propTypes = {\n  /**\n   * The navigation actions to be shown as buttons in the action area at the\n   * bottom of the tearsheet. Each action is specified as an object with\n   * optional fields: 'label' to supply the button label, 'kind' to select the\n   * button kind (must be 'primary', 'secondary' or 'ghost'), 'loading' to\n   * display a loading indicator, and 'onClick' to receive notifications when\n   * the button is clicked. Additional fields in the object will be passed to\n   * the Button component, and these can include 'disabled', 'ref', 'className',\n   * and any other Button props. Any other fields in the object will be passed\n   * through to the button element as HTML attributes.\n   *\n   * See https://react.carbondesignsystem.com/?path=/docs/components-button--default#component-api\n   */\n  actions: allPropTypes([ActionSet.validateActions(function () {\n    return 'max';\n  }), PropTypes.arrayOf(PropTypes.shape(_objectSpread(_objectSpread({}, Button.propTypes), {}, {\n    kind: PropTypes.oneOf(['ghost', 'secondary', 'primary']),\n    label: PropTypes.string,\n    loading: PropTypes.bool,\n    // we duplicate this Button prop to improve the DocGen here\n    onClick: Button.propTypes.onClick\n  })))]),\n\n  /**\n   * An optional class or classes to be added to the outermost element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The accessibility title for the close icon (if shown).\n   *\n   * **Note:** This prop is only required if a close icon is shown, i.e. if\n   * there are a no navigation actions and/or hasCloseIcon is true.\n   */\n  closeIconDescription: PropTypes.string.isRequired.if(function (_ref) {\n    var actions = _ref.actions,\n        hasCloseIcon = _ref.hasCloseIcon;\n    return tearsheetHasCloseIcon(actions, hasCloseIcon);\n  }),\n\n  /**\n   * A description of the flow, displayed in the header area of the tearsheet.\n   */\n  description: PropTypes.node,\n\n  /**\n   * Enable a close icon ('x') in the header area of the tearsheet. By default,\n   * (when this prop is omitted, or undefined or null) a tearsheet does not\n   * display a close icon if there are navigation actions (\"transactional\n   * tearsheet\") and displays one if there are no navigation actions (\"passive\n   * tearsheet\"), and that behavior can be overridden if required by setting\n   * this prop to either true or false.\n   */\n  hasCloseIcon: PropTypes.bool,\n\n  /**\n   * The content for the influencer section of the tearsheet, displayed\n   * alongside the main content. This is typically a menu, or filter, or\n   * progress indicator, or similar.\n   */\n  influencer: PropTypes.element,\n\n  /**\n   * The position of the influencer section, 'left' or 'right'.\n   */\n  influencerPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * The width of the influencer: 'narrow' (the default) is 256px, and 'wide'\n   * is 320px.\n   */\n  influencerWidth: PropTypes.oneOf(['narrow', 'wide']),\n\n  /**\n   * A label for the tearsheet, displayed in the header area of the tearsheet\n   * to maintain context for the tearsheet (e.g. as the title changes from page\n   * to page of a multi-page task).\n   */\n  label: PropTypes.node,\n\n  /**\n   * Navigation content, such as a set of tabs, to be displayed at the bottom\n   * of the header area of the tearsheet.\n   */\n  navigation: PropTypes.element,\n\n  /**\n   * An optional handler that is called when the user closes the tearsheet (by\n   * clicking the close button, if enabled, or clicking outside, if enabled).\n   * Returning `false` here prevents the modal from closing.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Specifies whether the tearsheet is currently open.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Prevent the tearsheet from automatically closing (triggering onClose, if\n   * provided, which can be cancelled by returning 'false') if the user clicks\n   * outside it.\n   */\n  preventCloseOnClickOutside: deprecateProp(PropTypes.bool, 'The tearsheet will close automatically if the user clicks outside it if and only if the tearsheet is passive (no navigation actions)'),\n\n  /**\n   * The main title of the tearsheet, displayed in the header area.\n   */\n  title: PropTypes.node,\n\n  /**\n   * The position of the top of tearsheet in the viewport. The 'normal'\n   * position (the default) is a short distance down from the top of the\n   * viewport, leaving room at the top for a global header bar to show through\n   * from below. The 'lower' position provides a little extra room at the top\n   * to allow an action bar navigation or breadcrumbs to also show through.\n   */\n  verticalPosition: PropTypes.oneOf(['normal', 'lower'])\n}; // Default values for component props. Default values are not required for\n// props that are required, nor for props where the component can apply\n// 'undefined' values reasonably. Default values should be provided when the\n// component needs to make a choice or assumption when a prop is not supplied.\n\nTearsheet.defaultProps = {\n  influencerPosition: 'left',\n  influencerWidth: 'narrow',\n  verticalPosition: 'normal'\n};","map":null,"metadata":{},"sourceType":"module"}