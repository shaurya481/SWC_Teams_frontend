{"ast":null,"code":"var _defaultTranslations;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Close16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nimport { match, keys } from '../../../internal/keyboard';\nvar prefix = settings.prefix;\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\n\nfunction ListBoxSelection(_ref) {\n  var _cx;\n\n  var clearSelection = _ref.clearSelection,\n      selectionCount = _ref.selectionCount,\n      t = _ref.translateWithId,\n      disabled = _ref.disabled,\n      onClearSelection = _ref.onClearSelection,\n      rest = _objectWithoutProperties(_ref, [\"clearSelection\", \"selectionCount\", \"translateWithId\", \"disabled\", \"onClearSelection\"]);\n\n  var className = cx(\"\".concat(prefix, \"--list-box__selection\"), (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--tag--filter\"), selectionCount), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__selection--multi\"), selectionCount), _cx));\n  var description = selectionCount ? t('clear.all') : t('clear.selection');\n  var tagClasses = cx(\"\".concat(prefix, \"--tag\"), \"\".concat(prefix, \"--tag--filter\"), \"\".concat(prefix, \"--tag--high-contrast\"), _defineProperty({}, \"\".concat(prefix, \"--tag--disabled\"), disabled));\n\n  function onClick(event) {\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    }\n\n    clearSelection(event);\n\n    if (onClearSelection) {\n      onClearSelection(event);\n    }\n  }\n\n  function onKeyDown(event) {\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    } // When a user hits ENTER, we'll clear the selection\n\n\n    if (match(event, keys.Enter)) {\n      clearSelection(event);\n\n      if (onClearSelection) {\n        onClearSelection(event);\n      }\n    }\n  }\n\n  if (selectionCount) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: tagClasses\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefix, \"--tag__label\"),\n      title: selectionCount\n    }, selectionCount), /*#__PURE__*/React.createElement(\"button\", {\n      \"aria-label\": description,\n      className: \"\".concat(prefix, \"--tag__close-icon\"),\n      disabled: disabled,\n      onClick: onClick,\n      onKeyDown: onKeyDown,\n      tabIndex: disabled ? -1 : 0,\n      title: description,\n      type: \"button\"\n    }, /*#__PURE__*/React.createElement(Close16, null)));\n  }\n\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, rest, {\n    \"aria-label\": description,\n    className: className,\n    onClick: onClick,\n    onKeyDown: onKeyDown,\n    tabIndex: disabled ? -1 : 0,\n    title: description,\n    type: \"button\"\n  }), /*#__PURE__*/React.createElement(Close16, null));\n}\n\nexport var translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['clear.all'], 'Clear all selected items'), _defineProperty(_defaultTranslations, translationIds['clear.selection'], 'Clear selected item'), _defaultTranslations);\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: PropTypes.func.isRequired,\n\n  /**\n   * Specify whether or not the clear selection element should be disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify an optional `onClearSelection` handler that is called when the underlying\n   * element is cleared\n   */\n  onClearSelection: PropTypes.func,\n\n  /**\n   * Specify an optional `onClick` handler that is called when the underlying\n   * clear selection element is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Specify an optional `onKeyDown` handler that is called when the underlying\n   * clear selection element fires a keydown event\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: PropTypes.number,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxSelection.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxSelection;","map":null,"metadata":{},"sourceType":"module"}