{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"buttons\", \"size\"],\n    _excluded2 = [\"label\"],\n    _excluded3 = [\"buttons\"],\n    _excluded4 = [\"label\", \"kind\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n} //\n// Copyright IBM Corp. 2020, 2021\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { ButtonSet, Button } from 'carbon-components-react';\nimport { ButtonMenu, ButtonMenuItem } from '../ButtonMenu';\nimport { pkg, carbon } from '../../settings';\nimport { deprecateProp, extractShapesArray, prepareProps } from '../../global/js/utils/props-helper';\nvar blockClass = \"\".concat(pkg.prefix, \"--button-set-with-overflow\");\nvar componentName = 'ButtonSetWithOverflow';\nexport var ButtonSetWithOverflow = function ButtonSetWithOverflow(_ref) {\n  var buttons = _ref.buttons,\n      children = _ref.children,\n      className = _ref.className,\n      onWidthChange = _ref.onWidthChange,\n      pageActionsLabel = _ref.pageActionsLabel,\n      rightAlign = _ref.rightAlign,\n      size = _ref.size;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showAsOverflow = _useState2[0],\n      setShowAsOverflow = _useState2[1];\n\n  var spaceAvailableRef = useRef(null);\n  var sizingContainerRefSet = useRef(null);\n  var sizingContainerRefCombo = useRef(null);\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      itemArray = _useState4[0],\n      setItemArray = _useState4[1]; // determine display count based on space available and width of pageActions\n\n\n  var checkFullyVisibleItems = function checkFullyVisibleItems() {\n    var _spaceAvailableRef$cu, _sizingContainerRefSe, _sizingContainerRefCo, _sizingContainerRefCo2;\n\n    var spaceAvailable = (_spaceAvailableRef$cu = spaceAvailableRef.current) === null || _spaceAvailableRef$cu === void 0 ? void 0 : _spaceAvailableRef$cu.offsetWidth;\n    var newShowAsOverflow = true;\n    var sizingSet = (_sizingContainerRefSe = sizingContainerRefSet.current) === null || _sizingContainerRefSe === void 0 ? void 0 : _sizingContainerRefSe.querySelectorAll(\".\".concat(carbon.prefix, \"--btn\"));\n    var sizingSetTotalSize = 0;\n\n    var _iterator = _createForOfIteratorHelper(sizingSet),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        sizingSetTotalSize += item.offsetWidth;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var sizingComboSize = (_sizingContainerRefCo = sizingContainerRefCombo.current) !== null && _sizingContainerRefCo !== void 0 && _sizingContainerRefCo.offsetWidth ? (_sizingContainerRefCo2 = sizingContainerRefCombo.current) === null || _sizingContainerRefCo2 === void 0 ? void 0 : _sizingContainerRefCo2.offsetWidth : 0;\n    onWidthChange && onWidthChange({\n      maxWidth: sizingSetTotalSize,\n      minWidth: sizingComboSize\n    });\n\n    if (sizingSetTotalSize <= spaceAvailable) {\n      newShowAsOverflow = false;\n    }\n\n    setShowAsOverflow(newShowAsOverflow);\n  };\n\n  useEffect(function () {\n    checkFullyVisibleItems(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [itemArray]);\n\n  var handleResize = function handleResize() {\n    // width is the space available for all action bar items horizontally\n    // the action bar items are squares so the height should be one item wide\n\n    /* istanbul ignore next */\n    // not sure how to test resize\n    checkFullyVisibleItems();\n  };\n\n  var handleButtonResize = function handleButtonResize() {\n    /* istanbul ignore next */\n    // not sure how to test resize\n    checkFullyVisibleItems();\n  };\n\n  useEffect(function () {\n    if (buttons) {\n      setItemArray(buttons);\n    } else {\n      var _extractShapesArray;\n\n      setItemArray((_extractShapesArray = extractShapesArray(children)) === null || _extractShapesArray === void 0 ? void 0 : _extractShapesArray.map(function (shape) {\n        return _objectSpread({\n          label: shape.children\n        }, shape);\n      }));\n    }\n  }, [buttons, children]);\n  var AButtonSet = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n    var buttons = _ref2.buttons,\n        size = _ref2.size,\n        rest = _objectWithoutProperties(_ref2, _excluded);\n\n    return /*#__PURE__*/React.createElement(ButtonSet, _extends({}, rest, {\n      ref: ref\n    }), buttons.map(function (_ref3, index) {\n      var label = _ref3.label,\n          other = _objectWithoutProperties(_ref3, _excluded2);\n\n      return /*#__PURE__*/React.createElement(Button, _extends({\n        key: index\n      }, other, {\n        size: size,\n        type: \"button\"\n      }), label);\n    }));\n  });\n  var AButtonMenu = /*#__PURE__*/React.forwardRef(function (_ref4, ref) {\n    var buttons = _ref4.buttons,\n        rest = _objectWithoutProperties(_ref4, _excluded3);\n\n    return /*#__PURE__*/React.createElement(ButtonMenu, _extends({}, rest, {\n      ref: ref,\n      label: pageActionsLabel\n    }), buttons.map(function (_ref5, index) {\n      var label = _ref5.label,\n          kind = _ref5.kind,\n          other = _objectWithoutProperties(_ref5, _excluded4);\n\n      return /*#__PURE__*/React.createElement(ButtonMenuItem, _extends({\n        key: index,\n        isDelete: kind === 'danger',\n        itemText: label\n      }, prepareProps(other, ['iconDescription', 'renderIcon'])));\n    }).reverse());\n  });\n  return /*#__PURE__*/React.createElement(ReactResizeDetector, {\n    handleWidth: true,\n    onResize: handleResize\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: cx([blockClass, className, _defineProperty({}, \"\".concat(blockClass, \"--right\"), rightAlign)]),\n    ref: spaceAvailableRef\n  }, /*#__PURE__*/React.createElement(ReactResizeDetector, {\n    onResize: handleButtonResize\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__button-container \").concat(blockClass, \"__button-container--hidden\")\n  }, /*#__PURE__*/React.createElement(AButtonSet, {\n    \"aria-hidden\": true,\n    ref: sizingContainerRefSet,\n    size: size,\n    buttons: itemArray\n  }))), /*#__PURE__*/React.createElement(ReactResizeDetector, {\n    onResize: handleButtonResize\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__button-container \").concat(blockClass, \"__button-container--hidden\"),\n    \"aria-hidden\": true\n  }, /*#__PURE__*/React.createElement(AButtonMenu, {\n    ref: sizingContainerRefCombo,\n    buttons: itemArray,\n    size: size\n  }))), showAsOverflow ? /*#__PURE__*/React.createElement(AButtonMenu, {\n    buttons: itemArray,\n    size: size\n  }) : /*#__PURE__*/React.createElement(AButtonSet, {\n    className: \"\".concat(blockClass, \"__button-container\"),\n    size: size,\n    buttons: itemArray\n  })));\n};\nButtonSetWithOverflow.propTypes = {\n  /**\n  /**\n   * Specifies the buttons for the ButtonSetWithOverflow. Each item is specified as an object\n   * with the properties of a Carbon Button plus a label.\n   *\n   * Carbon Button API https://react.carbondesignsystem.com/?path=/docs/components-button--default#component-api\n   */\n  buttons: PropTypes.arrayOf(PropTypes.shape(_objectSpread(_objectSpread({}, Button.propTypes), {}, {\n    kind: Button.propTypes.kind,\n    label: PropTypes.node,\n    onClick: Button.propTypes.onClick\n  }))),\n\n  /**\n   * children of the button set\n   */\n  children: deprecateProp(PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element]), 'See documentation on the `buttons` property.'),\n  // expects action bar item as array or in fragment,\n\n  /**\n   * className\n   */\n  className: PropTypes.string,\n\n  /**\n   * onResize reports maxSize on resize\n   */\n  onWidthChange: PropTypes.func,\n\n  /**\n   * pageActionsLabel - used when button set is shown as combo button\n   */\n  pageActionsLabel: PropTypes.node,\n\n  /**\n   * align buttons to right of available space\n   */\n  rightAlign: PropTypes.bool,\n\n  /**\n   * Specify the size of the button, from a list of available sizes.\n   * For `default` buttons, this prop can remain unspecified.\n   */\n  size: Button.propTypes.size\n};\nButtonSetWithOverflow.defaultProps = {\n  pageActionsLabel: 'Page actions',\n  size: 'field'\n};\nButtonSetWithOverflow.displayName = componentName;","map":null,"metadata":{},"sourceType":"module"}