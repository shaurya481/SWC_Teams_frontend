{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"secondaryButtonText\", \"className\", \"defaultIconDescription\", \"defaultText\", \"failIconDescription\", \"failText\", \"inProgressIconDescription\", \"inProgressText\", \"onRequestCancel\", \"onRequestSave\", \"status\", \"successIconDescription\", \"successText\", \"type\"];\n/**\n * Copyright IBM Corp. 2021, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { forwardRef } from 'react';\nimport cx from 'classnames';\nimport { Button, InlineLoading } from 'carbon-components-react';\nimport { Save16, CheckmarkOutline16, ErrorOutline16, ErrorFilled16 } from '@carbon/icons-react';\nimport PropTypes from 'prop-types';\nimport { pkg } from '../../settings';\nvar componentName = 'Saving';\nexport var Saving = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _statusObj, _statusObj$status, _statusObj$status2, _statusObj$status3, _statusObj$status4;\n\n  var secondaryButtonText = _ref.secondaryButtonText,\n      className = _ref.className,\n      defaultIconDescription = _ref.defaultIconDescription,\n      defaultText = _ref.defaultText,\n      failIconDescription = _ref.failIconDescription,\n      failText = _ref.failText,\n      inProgressIconDescription = _ref.inProgressIconDescription,\n      inProgressText = _ref.inProgressText,\n      onRequestCancel = _ref.onRequestCancel,\n      onRequestSave = _ref.onRequestSave,\n      status = _ref.status,\n      successIconDescription = _ref.successIconDescription,\n      successText = _ref.successText,\n      type = _ref.type,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var statusObj = (_statusObj = {\n    default: {\n      text: defaultText,\n      iconDescription: defaultIconDescription,\n      icon: CheckmarkOutline16\n    }\n  }, _defineProperty(_statusObj, 'in-progress', {\n    text: inProgressText,\n    iconDescription: inProgressIconDescription,\n    icon: InlineLoading\n  }), _defineProperty(_statusObj, \"success\", {\n    text: successText,\n    iconDescription: successIconDescription,\n    icon: Save16\n  }), _defineProperty(_statusObj, \"fail\", {\n    text: failText,\n    iconDescription: failIconDescription,\n    icon: ErrorOutline16\n  }), _statusObj);\n  var blockClass = \"\".concat(pkg.prefix, \"--saving\");\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    ref: ref,\n    className: cx(blockClass, className)\n  }), type === 'auto' ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__message\")\n  }, status === 'fail' && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__error-icon\")\n  }, /*#__PURE__*/React.createElement(ErrorFilled16, null)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(blockClass, \"__text\")\n  }, (_statusObj$status = statusObj[status]) === null || _statusObj$status === void 0 ? void 0 : _statusObj$status.text)) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__buttons\")\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: onRequestCancel,\n    kind: \"secondary\",\n    disabled: status !== 'in-progress',\n    type: \"button\"\n  }, secondaryButtonText), /*#__PURE__*/React.createElement(Button, {\n    onClick: onRequestSave,\n    kind: \"primary\",\n    renderIcon: (_statusObj$status2 = statusObj[status]) === null || _statusObj$status2 === void 0 ? void 0 : _statusObj$status2.icon,\n    iconDescription: (_statusObj$status3 = statusObj[status]) === null || _statusObj$status3 === void 0 ? void 0 : _statusObj$status3.iconDescription,\n    disabled: status === 'in-progress',\n    type: \"button\"\n  }, (_statusObj$status4 = statusObj[status]) === null || _statusObj$status4 === void 0 ? void 0 : _statusObj$status4.text)));\n});\nSaving = pkg.checkComponentEnabled(Saving, componentName);\nSaving.propTypes = {\n  /**\n   * Provide an optional class to be applied to the containing node.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Description for default state icon (manual).\n   */\n  defaultIconDescription: PropTypes.string,\n\n  /**\n   * Default text for the save button (manual). Per design guidelines you probably don't want to display this in the auto mode.\n   */\n  defaultText: PropTypes.string,\n\n  /**\n   * Description for fail state icon (manual).\n   */\n  failIconDescription: PropTypes.string,\n\n  /**\n   * Text for failure state.\n   */\n  failText: PropTypes.string,\n\n  /**\n   * Description for in progress state icon (manual).\n   */\n  inProgressIconDescription: PropTypes.string,\n\n  /**\n   * Text for in progress state.\n   */\n  inProgressText: PropTypes.string,\n\n  /**\n   * Function handler for cancel button (manual).\n   */\n  onRequestCancel: PropTypes.func,\n\n  /**\n   * Function handler for save button (manual).\n   */\n  onRequestSave: PropTypes.func,\n\n  /**\n   * Text for the secondary or cancel button (manual).\n   */\n  secondaryButtonText: PropTypes.string,\n\n  /**\n   * The status of the save. default being the untouched default state -> in-progress being a save has been initiated -> fail or success being the outcome.\n   */\n  status: PropTypes.oneOf(['default', 'in-progress', 'success', 'fail']).isRequired,\n\n  /**\n   * Description for success state icon (manual).\n   */\n  successIconDescription: PropTypes.string,\n\n  /**\n   * Text for success state\n   */\n  successText: PropTypes.string,\n\n  /**\n   * Designates the style of the save component. Manual uses a set of buttons and auto just displays a string. See usage guidelines for additional information.\n   */\n  type: PropTypes.oneOf(['manual', 'auto']).isRequired\n};\nSaving.displayName = componentName;","map":null,"metadata":{},"sourceType":"module"}