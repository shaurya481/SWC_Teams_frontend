{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useFeatureFlag } from '../FeatureFlags';\nvar prefix = settings.prefix;\n\nfunction Column(_ref) {\n  var _ref$as = _ref.as,\n      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,\n      children = _ref.children,\n      containerClassName = _ref.className,\n      sm = _ref.sm,\n      md = _ref.md,\n      lg = _ref.lg,\n      xlg = _ref.xlg,\n      max = _ref.max,\n      rest = _objectWithoutProperties(_ref, [\"as\", \"children\", \"className\", \"sm\", \"md\", \"lg\", \"xlg\", \"max\"]);\n\n  var hasCSSGrid = useFeatureFlag('enable-css-grid');\n  var columnClassName = hasCSSGrid ? getClassNameForBreakpoints([sm, md, lg, xlg, max]) : getClassNameForFlexGridBreakpoints([sm, md, lg, xlg, max]);\n  var className = cx(containerClassName, columnClassName, _defineProperty({}, \"\".concat(prefix, \"--col\"), columnClassName.length === 0));\n  return /*#__PURE__*/React.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\n\nvar spanPropType = PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.shape({\n  span: PropTypes.number,\n  offset: PropTypes.number\n})]);\nColumn.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n\n  /**\n   * Pass in content that will be rendered within the `Column`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify a custom className to be applied to the `Column`\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)\n   * This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  lg: spanPropType,\n\n  /**\n   * Specify column span for the `max` breakpoint. This breakpoint supports 16\n   * columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  max: spanPropType,\n\n  /**\n   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)\n   * This breakpoint supports 8 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  md: spanPropType,\n\n  /**\n   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)\n   * This breakpoint supports 4 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  sm: spanPropType,\n\n  /**\n   * Specify column span for the `xlg` breakpoint (Default breakpoint up to\n   * 1584px) This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  xlg: spanPropType\n};\nvar breakpointNames = ['sm', 'md', 'lg', 'xlg', 'max'];\n/**\n * @typedef {object} Breakpoint\n * @property {boolean|number} [span]\n * @property {number} [offset]\n */\n\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\nfunction getClassNameForBreakpoints(breakpoints) {\n  var classNames = [];\n\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-auto\"));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(breakpoint));\n      continue;\n    }\n\n    var span = breakpoint.span,\n        offset = breakpoint.offset;\n\n    if (typeof offset === 'number' && offset > 0) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-start-\").concat(offset + 1));\n    }\n\n    if (typeof span === 'number') {\n      if (typeof offset === 'number' && offset > 0) {\n        classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-end-\").concat(offset + span + 1));\n      } else {\n        classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(span));\n      }\n    }\n\n    if (span === true) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-auto\"));\n    }\n  }\n\n  return classNames.join(' ');\n}\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\n\nfunction getClassNameForFlexGridBreakpoints(breakpoints) {\n  var classNames = [];\n\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(breakpoint));\n      continue;\n    }\n\n    var span = breakpoint.span,\n        offset = breakpoint.offset;\n\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(span));\n    }\n\n    if (span === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n    }\n\n    if (typeof offset === 'number') {\n      classNames.push(\"\".concat(prefix, \"--offset-\").concat(name, \"-\").concat(offset));\n    }\n  }\n\n  return classNames.join(' ');\n}\n\nexport default Column;","map":null,"metadata":{},"sourceType":"module"}