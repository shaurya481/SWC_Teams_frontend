{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"className\", \"data\", \"daysAgoText\", \"dismissAllLabel\", \"dismissSingleNotificationIconDescription\", \"doNotDisturbLabel\", \"emptyStateLabel\", \"hoursAgoText\", \"hourAgoText\", \"minuteAgoText\", \"minutesAgoText\", \"monthsAgoText\", \"monthAgoText\", \"nowText\", \"onClickOutside\", \"onDismissAllNotifications\", \"onDismissSingleNotification\", \"onDoNotDisturbChange\", \"onSettingsClick\", \"onViewAllClick\", \"open\", \"previousLabel\", \"readLessLabel\", \"readMoreLabel\", \"secondsAgoText\", \"settingsIconDescription\", \"title\", \"todayLabel\", \"viewAllLabel\", \"yearsAgoText\", \"yearAgoText\", \"yesterdayAtText\", \"yesterdayLabel\"];\n/**\n * Copyright IBM Corp. 2020, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\nimport React, { useEffect, useState, useRef } from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport useClickOutside from '../../global/js/use/useClickOutside';\nimport { pkg } from '../../settings';\nimport { timeAgo } from './utils';\nimport { NotificationsEmptyState } from '../EmptyStates/NotificationsEmptyState'; // Carbon and package components we use.\n\nimport { Button, Link, Toggle } from 'carbon-components-react';\nimport { ErrorFilled16, WarningAltFilled16, CheckmarkFilled16, InformationSquareFilled16, ChevronDown16, Close16, Settings16 } from '@carbon/icons-react'; // The block part of our conventional BEM class names (blockClass__E--M).\n\nvar componentName = 'NotificationsPanel';\nvar blockClass = \"\".concat(pkg.prefix, \"--notifications-panel\");\nexport var NotificationsPanel = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var className = _ref.className,\n      data = _ref.data,\n      daysAgoText = _ref.daysAgoText,\n      dismissAllLabel = _ref.dismissAllLabel,\n      dismissSingleNotificationIconDescription = _ref.dismissSingleNotificationIconDescription,\n      doNotDisturbLabel = _ref.doNotDisturbLabel,\n      emptyStateLabel = _ref.emptyStateLabel,\n      hoursAgoText = _ref.hoursAgoText,\n      hourAgoText = _ref.hourAgoText,\n      minuteAgoText = _ref.minuteAgoText,\n      minutesAgoText = _ref.minutesAgoText,\n      monthsAgoText = _ref.monthsAgoText,\n      monthAgoText = _ref.monthAgoText,\n      nowText = _ref.nowText,\n      onClickOutside = _ref.onClickOutside,\n      onDismissAllNotifications = _ref.onDismissAllNotifications,\n      onDismissSingleNotification = _ref.onDismissSingleNotification,\n      onDoNotDisturbChange = _ref.onDoNotDisturbChange,\n      onSettingsClick = _ref.onSettingsClick,\n      onViewAllClick = _ref.onViewAllClick,\n      open = _ref.open,\n      previousLabel = _ref.previousLabel,\n      readLessLabel = _ref.readLessLabel,\n      readMoreLabel = _ref.readMoreLabel,\n      secondsAgoText = _ref.secondsAgoText,\n      settingsIconDescription = _ref.settingsIconDescription,\n      title = _ref.title,\n      todayLabel = _ref.todayLabel,\n      viewAllLabel = _ref.viewAllLabel,\n      yearsAgoText = _ref.yearsAgoText,\n      yearAgoText = _ref.yearAgoText,\n      yesterdayAtText = _ref.yesterdayAtText,\n      yesterdayLabel = _ref.yesterdayLabel,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var notificationPanelRef = useRef();\n\n  var _useState = useState(open),\n      _useState2 = _slicedToArray(_useState, 2),\n      shouldRender = _useState2[0],\n      setRender = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allNotifications = _useState4[0],\n      setAllNotifications = _useState4[1];\n\n  useEffect(function () {\n    // Set the notifications passed to the state within this component\n    setAllNotifications(data);\n  }, [data]);\n  useClickOutside(ref || notificationPanelRef, function () {\n    onClickOutside();\n  });\n  useEffect(function () {\n    // initialize the notification panel to open\n    if (open) {\n      setRender(true);\n    }\n  }, [open]);\n\n  var onAnimationEnd = function onAnimationEnd() {\n    // initialize the notification panel to close\n    !open && setRender(false);\n  };\n\n  var sortChronologically = function sortChronologically(arr) {\n    if (!arr || arr && !arr.length) {\n      return;\n    }\n\n    return arr.sort(function (a, b) {\n      return b.timestamp - a.timestamp;\n    });\n  }; // Notifications should be grouped by \"Today\", \"Yesterday\", and \"Previous\", the variables\n  // below filter the notifications based on those conditions and then render them in those groups\n\n\n  var yesterdayDate = new Date();\n  yesterdayDate = new Date(yesterdayDate.setDate(yesterdayDate.getDate() - 1));\n  var dayBeforeYesterdayDate = new Date();\n  dayBeforeYesterdayDate = new Date(dayBeforeYesterdayDate.setDate(dayBeforeYesterdayDate.getDate() - 2));\n  var withinLastDayNotifications = allNotifications && allNotifications.length && allNotifications.filter(function (item) {\n    return item.timestamp.getTime() >= yesterdayDate.getTime();\n  });\n  withinLastDayNotifications = sortChronologically(withinLastDayNotifications);\n  var previousDayNotifications = allNotifications && allNotifications.length && allNotifications.filter(function (item) {\n    return item.timestamp.getTime() < yesterdayDate.getTime() && item.timestamp.getTime() >= dayBeforeYesterdayDate.getTime();\n  });\n  previousDayNotifications = sortChronologically(previousDayNotifications);\n  var previousNotifications = allNotifications && allNotifications.length && allNotifications.filter(function (item) {\n    return item.timestamp.getTime() < dayBeforeYesterdayDate.getTime();\n  });\n  previousNotifications = sortChronologically(previousNotifications);\n\n  var renderDescription = function renderDescription(id) {\n    var _ref2, _ref3;\n\n    var notification = allNotifications && allNotifications.length && allNotifications.filter(function (item) {\n      return item.id === id;\n    })[0];\n    var trimLength = 88;\n    var description = notification.description;\n    var descriptionClassName = cx([\"\".concat(blockClass, \"__notification-description\"), (_ref2 = {}, _defineProperty(_ref2, \"\".concat(blockClass, \"__notification-long-description\"), notification.showAll), _defineProperty(_ref2, \"\".concat(blockClass, \"__notification-short-description\"), !notification.showAll), _ref2)]);\n    var showMoreButtonClassName = cx([(_ref3 = {}, _defineProperty(_ref3, \"\".concat(blockClass, \"__notification-read-less-button\"), notification.showAll), _defineProperty(_ref3, \"\".concat(blockClass, \"__notification-read-more-button\"), !notification.showAll), _ref3)]);\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"p\", {\n      className: descriptionClassName\n    }, description), description.length > trimLength && /*#__PURE__*/React.createElement(Button, {\n      kind: \"ghost\",\n      size: \"small\",\n      renderIcon: ChevronDown16,\n      iconDescription: notification.showAll ? readLessLabel : readMoreLabel,\n      onClick: function onClick(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        var newData = allNotifications.map(function (item) {\n          if (item.id === notification.id) {\n            return Object.assign({}, item, {\n              showAll: !item.showAll\n            });\n          }\n\n          return item;\n        });\n        setAllNotifications(newData);\n      },\n      className: showMoreButtonClassName\n    }, notification.showAll ? readLessLabel : readMoreLabel));\n  };\n\n  var renderNotification = function renderNotification(group, notification, index) {\n    var notificationClassName = cx([\"\".concat(blockClass, \"__notification\"), \"\".concat(blockClass, \"__notification-\").concat(group)]);\n    var notificationHeaderClassName = cx([\"\".concat(blockClass, \"__notification-title\"), _defineProperty({}, \"\".concat(blockClass, \"__notification-title-unread\"), notification.unread)]);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"aria-label\": notification.title,\n      key: \"\".concat(notification.timestamp, \"-\").concat(notification.title, \"-\").concat(index),\n      className: notificationClassName,\n      type: \"button\",\n      role: \"button\",\n      tabIndex: 0,\n      onClick: function onClick() {\n        return notification.onNotificationClick(notification);\n      },\n      onKeyDown: function onKeyDown(event) {\n        if (event.target.classList.contains(\"\".concat(blockClass, \"__dismiss-single-button\"))) {\n          return;\n        }\n\n        event.which === 13 && notification.onNotificationClick(notification);\n      }\n    }, notification.type === 'error' && /*#__PURE__*/React.createElement(ErrorFilled16, {\n      className: cx([\"\".concat(blockClass, \"__notification-status-icon\"), \"\".concat(blockClass, \"__notification-status-icon-error\")])\n    }), notification.type === 'success' && /*#__PURE__*/React.createElement(CheckmarkFilled16, {\n      className: cx([\"\".concat(blockClass, \"__notification-status-icon\"), \"\".concat(blockClass, \"__notification-status-icon-success\")])\n    }), notification.type === 'warning' && /*#__PURE__*/React.createElement(WarningAltFilled16, {\n      className: cx([\"\".concat(blockClass, \"__notification-status-icon\"), \"\".concat(blockClass, \"__notification-status-icon-warning\")])\n    }), notification.type === 'informational' && /*#__PURE__*/React.createElement(InformationSquareFilled16, {\n      className: cx([\"\".concat(blockClass, \"__notification-status-icon\"), \"\".concat(blockClass, \"__notification-status-icon-informational\")])\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(blockClass, \"__notification-content\")\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"\".concat(blockClass, \"__notification-time-label\")\n    }, timeAgo({\n      previousTime: notification.timestamp,\n      secondsAgoText: secondsAgoText,\n      minuteAgoText: minuteAgoText,\n      minutesAgoText: minutesAgoText,\n      hoursAgoText: hoursAgoText,\n      hourAgoText: hourAgoText,\n      daysAgoText: daysAgoText,\n      yesterdayAtText: yesterdayAtText,\n      monthsAgoText: monthsAgoText,\n      monthAgoText: monthAgoText,\n      yearsAgoText: yearsAgoText,\n      yearAgoText: yearAgoText,\n      nowText: nowText\n    })), /*#__PURE__*/React.createElement(\"h6\", {\n      className: notificationHeaderClassName\n    }, notification.title), notification.description && notification.description.length && renderDescription(notification.id), notification.link && notification.link.text && notification.link.url && /*#__PURE__*/React.createElement(Link, {\n      href: notification.link.url,\n      className: \"\".concat(blockClass, \"__notifications-link\")\n    }, notification.link.text)), /*#__PURE__*/React.createElement(Button, {\n      kind: \"ghost\",\n      size: \"small\",\n      renderIcon: Close16,\n      iconDescription: dismissSingleNotificationIconDescription,\n      tooltipPosition: \"left\",\n      className: \"\".concat(blockClass, \"__dismiss-single-button\"),\n      onClick: function onClick(event) {\n        return dismissSingleNotification(event, notification);\n      }\n    }));\n  };\n\n  var dismissSingleNotification = function dismissSingleNotification(event, notification) {\n    event.preventDefault();\n    event.stopPropagation();\n    onDismissSingleNotification(notification);\n  };\n\n  var mainSectionClassName = cx([\"\".concat(blockClass, \"__main-section\"), _defineProperty({}, \"\".concat(blockClass, \"__main-section-empty\"), allNotifications && !allNotifications.length)]);\n  return shouldRender ? /*#__PURE__*/React.createElement(\"div\", _extends({}, // Pass through any other property values as HTML attributes.\n  rest, {\n    id: blockClass,\n    className: cx(blockClass, className, \"\".concat(blockClass, \"__container\")),\n    style: {\n      animation: \"\".concat(open ? 'fadeIn 250ms' : 'fadeOut 250ms')\n    },\n    onAnimationEnd: onAnimationEnd,\n    ref: ref || notificationPanelRef\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__header-container\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__header-flex\")\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"\".concat(blockClass, \"__header\")\n  }, title), /*#__PURE__*/React.createElement(Button, {\n    size: \"small\",\n    kind: \"ghost\",\n    className: \"\".concat(blockClass, \"__dismiss-button\"),\n    onClick: function onClick() {\n      return onDismissAllNotifications();\n    }\n  }, dismissAllLabel)), /*#__PURE__*/React.createElement(Toggle, {\n    size: \"sm\",\n    className: \"\".concat(blockClass, \"__do-not-disturb-toggle\"),\n    id: \"\".concat(blockClass, \"__do-not-disturb-toggle-component\"),\n    labelA: doNotDisturbLabel,\n    labelB: doNotDisturbLabel,\n    onToggle: function onToggle(event) {\n      return onDoNotDisturbChange(event);\n    },\n    \"aria-label\": doNotDisturbLabel\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: mainSectionClassName\n  }, withinLastDayNotifications && withinLastDayNotifications.length ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"\".concat(blockClass, \"__time-section-label\")\n  }, todayLabel), withinLastDayNotifications.map(function (notification, index) {\n    return renderNotification('today', notification, index);\n  })) : null, previousDayNotifications && previousDayNotifications.length ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"\".concat(blockClass, \"__time-section-label\")\n  }, yesterdayLabel), previousDayNotifications.map(function (notification, index) {\n    return renderNotification('yesterday', notification, index);\n  })) : null, previousNotifications && previousNotifications.length ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"\".concat(blockClass, \"__time-section-label\")\n  }, previousLabel), previousNotifications.map(function (notification, index) {\n    return renderNotification('previous', notification, index);\n  })) : null, !allNotifications.length && /*#__PURE__*/React.createElement(NotificationsEmptyState, {\n    illustrationTheme: \"dark\",\n    title: \"\",\n    subtitle: emptyStateLabel\n  })), onViewAllClick && onSettingsClick && allNotifications && allNotifications.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__bottom-actions\")\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: \"ghost\",\n    className: \"\".concat(blockClass, \"__view-all-button\"),\n    onClick: function onClick() {\n      return onViewAllClick();\n    }\n  }, viewAllLabel(allNotifications.length)), /*#__PURE__*/React.createElement(Button, {\n    kind: \"ghost\",\n    size: \"small\",\n    className: \"\".concat(blockClass, \"__settings-button\"),\n    renderIcon: Settings16,\n    iconDescription: settingsIconDescription,\n    onClick: function onClick() {\n      return onSettingsClick();\n    }\n  })) : null) : null;\n}); // Return a placeholder if not released and not enabled by feature flag\n\nNotificationsPanel = pkg.checkComponentEnabled(NotificationsPanel, componentName); // The display name of the component, used by React. Note that displayName\n// is used in preference to relying on function.name.\n\nNotificationsPanel.displayName = componentName; // The types and DocGen commentary for the component props,\n// in alphabetical order (for consistency).\n// See https://www.npmjs.com/package/prop-types#usage.\n\nNotificationsPanel.propTypes = {\n  /**\n   * Provide an optional class to be applied to the containing node.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Array of data for Notifications component to render\n   */\n  data: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    type: PropTypes.oneOf(['error', 'warning', 'success', 'informational']),\n    timestamp: PropTypes.instanceOf(Date),\n    title: PropTypes.string,\n    description: PropTypes.string,\n    link: PropTypes.shape({\n      url: PropTypes.string,\n      text: PropTypes.string\n    }),\n    unread: PropTypes.bool,\n    onNotificationClick: PropTypes.func\n  })).isRequired,\n\n  /**\n   * Sets the `days ago` label text\n   */\n  daysAgoText: PropTypes.func,\n\n  /**\n   * Label for Dismiss all button\n   */\n  dismissAllLabel: PropTypes.string,\n\n  /**\n   * Label for Dismiss single notfication icon button\n   */\n  dismissSingleNotificationIconDescription: PropTypes.string,\n\n  /**\n   * Label for Do not disturb toggle\n   */\n  doNotDisturbLabel: PropTypes.string,\n\n  /**\n   * Sets the empty state label text when there are no notifications\n   */\n  emptyStateLabel: PropTypes.string,\n\n  /**\n   * Sets the `hour ago` label text\n   */\n  hourAgoText: PropTypes.func,\n\n  /**\n   * Sets the `hours ago` label text\n   */\n  hoursAgoText: PropTypes.func,\n\n  /**\n   * Sets the `minute ago` label text\n   */\n  minuteAgoText: PropTypes.func,\n\n  /**\n   * Sets the `minutes ago` label text\n   */\n  minutesAgoText: PropTypes.func,\n\n  /**\n   * Sets the `month ago` label text\n   */\n  monthAgoText: PropTypes.func,\n\n  /**\n   * Sets the `months ago` label text\n   */\n  monthsAgoText: PropTypes.func,\n\n  /**\n   * Sets the `now` label text\n   */\n  nowText: PropTypes.string,\n\n  /**\n   * Sets the notifications panel open state\n   */\n  onClickOutside: PropTypes.func.isRequired,\n\n  /**\n   * Function that will dismiss all notifications\n   */\n  onDismissAllNotifications: PropTypes.func.isRequired,\n\n  /**\n   * Function that will dismiss a single notification\n   */\n  onDismissSingleNotification: PropTypes.func.isRequired,\n\n  /**\n   * Function that returns the current selected value of the disable notification toggle\n   */\n  onDoNotDisturbChange: PropTypes.func,\n\n  /**\n   * Event handler for the View all button\n   */\n  onSettingsClick: PropTypes.func,\n\n  /**\n   * Event handler for the View all button\n   */\n  onViewAllClick: PropTypes.func,\n\n  /**\n   * Determines whether the notifications panel should render or not\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * Sets the previous label text\n   */\n  previousLabel: PropTypes.string,\n\n  /**\n   * Sets the `read less` label text\n   */\n  readLessLabel: PropTypes.string,\n\n  /**\n   * Sets the `read more` label text\n   */\n  readMoreLabel: PropTypes.string,\n\n  /**\n   * Sets the `seconds ago` label text\n   */\n  secondsAgoText: PropTypes.func,\n\n  /**\n   * Sets the settings icon description text\n   */\n  settingsIconDescription: PropTypes.string,\n\n  /**\n   * Sets the title for the Notifications panel\n   */\n  title: PropTypes.string,\n\n  /**\n   * Sets the today label text\n   */\n  todayLabel: PropTypes.string,\n\n  /**\n   * Sets the View all button text\n   */\n  viewAllLabel: PropTypes.func,\n\n  /**\n   * Sets the `year ago` label text\n   */\n  yearAgoText: PropTypes.func,\n\n  /**\n   * Sets the `years ago` label text\n   */\n  yearsAgoText: PropTypes.func,\n\n  /**\n   * Sets the `Yesterday at` label text\n   */\n  yesterdayAtText: PropTypes.func,\n\n  /**\n   * Sets the yesterday label text\n   */\n  yesterdayLabel: PropTypes.string\n}; // Default values for component props. Default values are not required for\n// props that are required, nor for props where the component can apply\n// 'undefined' values reasonably. Default values should be provided when the\n// component needs to make a choice or assumption when a prop is not supplied.\n\nNotificationsPanel.defaultProps = {\n  daysAgoText: function daysAgoText(value) {\n    return \"\".concat(value, \" days ago\");\n  },\n  dismissAllLabel: 'Dismiss all',\n  dismissSingleNotificationIconDescription: 'Dismiss',\n  doNotDisturbLabel: 'Do not disturb',\n  emptyStateLabel: 'You do not have any notifications',\n  hourAgoText: function hourAgoText(value) {\n    return \"\".concat(value, \" hour ago\");\n  },\n  hoursAgoText: function hoursAgoText(value) {\n    return \"\".concat(value, \" hours ago\");\n  },\n  minuteAgoText: function minuteAgoText(value) {\n    return \"\".concat(value, \" minute ago\");\n  },\n  minutesAgoText: function minutesAgoText(value) {\n    return \"\".concat(value, \" minutes ago\");\n  },\n  monthAgoText: function monthAgoText(value) {\n    return \"\".concat(value, \" month ago\");\n  },\n  monthsAgoText: function monthsAgoText(value) {\n    return \"\".concat(value, \" months ago\");\n  },\n  nowText: 'Now',\n  onDismissAllNotifications: function onDismissAllNotifications() {},\n  onDismissSingleNotification: function onDismissSingleNotification() {},\n  previousLabel: 'Previous',\n  readLessLabel: 'Read less',\n  readMoreLabel: 'Read more',\n  secondsAgoText: function secondsAgoText(value) {\n    return \"\".concat(value, \" seconds ago\");\n  },\n  settingsIconDescription: 'Settings',\n  title: 'Notifications',\n  todayLabel: 'Today',\n  viewAllLabel: function viewAllLabel(value) {\n    return \"View all (\".concat(value, \")\");\n  },\n  yearsAgoText: function yearsAgoText(value) {\n    return \"\".concat(value, \" years ago\");\n  },\n  yearAgoText: function yearAgoText(value) {\n    return \"\".concat(value, \" year ago\");\n  },\n  yesterdayLabel: 'Yesterday',\n  yesterdayAtText: function yesterdayAtText(value) {\n    return \"Yesterday at \".concat(value);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}