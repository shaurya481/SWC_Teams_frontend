{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.DIRECTION_BOTTOM = exports.DIRECTION_RIGHT = exports.DIRECTION_TOP = exports.DIRECTION_LEFT = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _windowOrGlobal = _interopRequireDefault(require(\"window-or-global\"));\n\nvar _carbonComponents = require(\"carbon-components\");\n\nvar _OptimizedResize = _interopRequireDefault(require(\"./OptimizedResize\"));\n\nvar _navigation = require(\"./keyboard/navigation\");\n\nvar _warning = require(\"./warning\");\n\nvar _wrapFocus = _interopRequireDefault(require(\"./wrapFocus\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar prefix = _carbonComponents.settings.prefix;\n/**\n * The structure for the position of floating menu.\n * @typedef {object} FloatingMenu~position\n * @property {number} left The left position.\n * @property {number} top The top position.\n * @property {number} right The right position.\n * @property {number} bottom The bottom position.\n */\n\n/**\n * The structure for the size of floating menu.\n * @typedef {object} FloatingMenu~size\n * @property {number} width The width.\n * @property {number} height The height.\n */\n\n/**\n * The structure for the position offset of floating menu.\n * @typedef {object} FloatingMenu~offset\n * @property {number} top The top position.\n * @property {number} left The left position.\n */\n\n/**\n * The structure for the target container.\n * @typedef {object} FloatingMenu~container\n * @property {DOMRect} rect Return of element.getBoundingClientRect()\n * @property {string} position Position style (static, absolute, relative...)\n */\n\nvar DIRECTION_LEFT = 'left';\nexports.DIRECTION_LEFT = DIRECTION_LEFT;\nvar DIRECTION_TOP = 'top';\nexports.DIRECTION_TOP = DIRECTION_TOP;\nvar DIRECTION_RIGHT = 'right';\nexports.DIRECTION_RIGHT = DIRECTION_RIGHT;\nvar DIRECTION_BOTTOM = 'bottom';\n/**\n * @param {FloatingMenu~offset} [oldMenuOffset={}] The old value.\n * @param {FloatingMenu~offset} [menuOffset={}] The new value.\n * @returns `true` if the parent component wants to change in the adjustment of the floating menu position.\n * @private\n */\n\nexports.DIRECTION_BOTTOM = DIRECTION_BOTTOM;\n\nvar hasChangeInOffset = function hasChangeInOffset() {\n  var oldMenuOffset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var menuOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (_typeof(oldMenuOffset) !== _typeof(menuOffset)) {\n    return true;\n  }\n\n  if (Object(menuOffset) === menuOffset && typeof menuOffset !== 'function') {\n    return oldMenuOffset.top !== menuOffset.top || oldMenuOffset.left !== menuOffset.left;\n  }\n\n  return oldMenuOffset !== menuOffset;\n};\n/**\n * @param {object} params The parameters.\n * @param {FloatingMenu~size} params.menuSize The size of the menu.\n * @param {FloatingMenu~position} params.refPosition The position of the triggering element.\n * @param {FloatingMenu~offset} [params.offset={ left: 0, top: 0 }] The position offset of the menu.\n * @param {string} [params.direction=bottom] The menu direction.\n * @param {number} [params.scrollX=0] The scroll position of the viewport.\n * @param {number} [params.scrollY=0] The scroll position of the viewport.\n * @param {FloatingMenu~container} [params.container] The size and position type of target element.\n * @returns {FloatingMenu~offset} The position of the menu, relative to the top-left corner of the viewport.\n * @private\n */\n\n\nvar getFloatingPosition = function getFloatingPosition(_ref) {\n  var _DIRECTION_LEFT$DIREC;\n\n  var menuSize = _ref.menuSize,\n      _ref$refPosition = _ref.refPosition,\n      refPosition = _ref$refPosition === void 0 ? {} : _ref$refPosition,\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === void 0 ? {} : _ref$offset,\n      _ref$direction = _ref.direction,\n      direction = _ref$direction === void 0 ? DIRECTION_BOTTOM : _ref$direction,\n      _ref$scrollX = _ref.scrollX,\n      pageXOffset = _ref$scrollX === void 0 ? 0 : _ref$scrollX,\n      _ref$scrollY = _ref.scrollY,\n      pageYOffset = _ref$scrollY === void 0 ? 0 : _ref$scrollY,\n      container = _ref.container;\n  var _refPosition$left = refPosition.left,\n      refLeft = _refPosition$left === void 0 ? 0 : _refPosition$left,\n      _refPosition$top = refPosition.top,\n      refTop = _refPosition$top === void 0 ? 0 : _refPosition$top,\n      _refPosition$right = refPosition.right,\n      refRight = _refPosition$right === void 0 ? 0 : _refPosition$right,\n      _refPosition$bottom = refPosition.bottom,\n      refBottom = _refPosition$bottom === void 0 ? 0 : _refPosition$bottom;\n  var scrollX = container.position !== 'static' ? 0 : pageXOffset;\n  var scrollY = container.position !== 'static' ? 0 : pageYOffset;\n  var relativeDiff = {\n    top: container.position !== 'static' ? container.rect.top : 0,\n    left: container.position !== 'static' ? container.rect.left : 0\n  };\n  var width = menuSize.width,\n      height = menuSize.height;\n  var _offset$top = offset.top,\n      top = _offset$top === void 0 ? 0 : _offset$top,\n      _offset$left = offset.left,\n      left = _offset$left === void 0 ? 0 : _offset$left;\n  var refCenterHorizontal = (refLeft + refRight) / 2;\n  var refCenterVertical = (refTop + refBottom) / 2;\n  return (_DIRECTION_LEFT$DIREC = {}, _defineProperty(_DIRECTION_LEFT$DIREC, DIRECTION_LEFT, function () {\n    return {\n      left: refLeft - width + scrollX - left - relativeDiff.left,\n      top: refCenterVertical - height / 2 + scrollY + top - 9 - relativeDiff.top\n    };\n  }), _defineProperty(_DIRECTION_LEFT$DIREC, DIRECTION_TOP, function () {\n    return {\n      left: refCenterHorizontal - width / 2 + scrollX + left - relativeDiff.left,\n      top: refTop - height + scrollY - top - relativeDiff.top\n    };\n  }), _defineProperty(_DIRECTION_LEFT$DIREC, DIRECTION_RIGHT, function () {\n    return {\n      left: refRight + scrollX + left - relativeDiff.left,\n      top: refCenterVertical - height / 2 + scrollY + top + 3 - relativeDiff.top\n    };\n  }), _defineProperty(_DIRECTION_LEFT$DIREC, DIRECTION_BOTTOM, function () {\n    return {\n      left: refCenterHorizontal - width / 2 + scrollX + left - relativeDiff.left,\n      top: refBottom + scrollY + top - relativeDiff.top\n    };\n  }), _DIRECTION_LEFT$DIREC)[direction]();\n};\n/**\n * A menu that is detached from the triggering element.\n * Useful when the container of the triggering element cannot have `overflow:visible` style, etc.\n */\n\n\nvar FloatingMenu = /*#__PURE__*/function (_React$Component) {\n  _inherits(FloatingMenu, _React$Component);\n\n  var _super = _createSuper(FloatingMenu);\n\n  function FloatingMenu() {\n    var _this;\n\n    _classCallCheck(this, FloatingMenu);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_placeInProgress\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      /**\n       * The position of the menu, relative to the top-left corner of the viewport.\n       * @type {FloatingMenu~offset}\n       */\n      floatingPosition: undefined\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_menuContainer\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_menuBody\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"startSentinel\", /*#__PURE__*/_react.default.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"endSentinel\", /*#__PURE__*/_react.default.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateMenuSize\", function () {\n      var prevProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var menuBody = _this._menuBody;\n      process.env.NODE_ENV !== \"production\" ? (0, _warning.warning)(menuBody, 'The DOM node for menu body for calculating its position is not available. Skipping...') : void 0;\n\n      if (!menuBody) {\n        return;\n      }\n\n      var _prevProps$menuOffset = prevProps.menuOffset,\n          oldMenuOffset = _prevProps$menuOffset === void 0 ? {} : _prevProps$menuOffset,\n          oldMenuDirection = prevProps.menuDirection;\n      var _this$props = _this.props,\n          _this$props$menuOffse = _this$props.menuOffset,\n          menuOffset = _this$props$menuOffse === void 0 ? {} : _this$props$menuOffse,\n          menuDirection = _this$props.menuDirection;\n\n      if (hasChangeInOffset(oldMenuOffset, menuOffset) || oldMenuDirection !== menuDirection) {\n        var _this$props2 = _this.props,\n            flipped = _this$props2.flipped,\n            triggerRef = _this$props2.triggerRef;\n        var triggerEl = triggerRef.current;\n        var menuSize = menuBody.getBoundingClientRect();\n        var refPosition = triggerEl && triggerEl.getBoundingClientRect();\n        var offset = typeof menuOffset !== 'function' ? menuOffset : menuOffset(menuBody, menuDirection, triggerEl, flipped); // Skips if either in the following condition:\n        // a) Menu body has `display:none`\n        // b) `menuOffset` as a callback returns `undefined` (The callback saw that it couldn't calculate the value)\n\n        if (menuSize.width > 0 && menuSize.height > 0 || !offset) {\n          _this.setState({\n            floatingPosition: getFloatingPosition({\n              menuSize: menuSize,\n              refPosition: refPosition,\n              direction: menuDirection,\n              offset: offset,\n              scrollX: _windowOrGlobal.default.pageXOffset,\n              scrollY: _windowOrGlobal.default.pageYOffset,\n              container: {\n                rect: _this.props.target().getBoundingClientRect(),\n                position: getComputedStyle(_this.props.target()).position\n              }\n            })\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_focusMenuContent\", function (menuBody) {\n      var primaryFocusNode = menuBody.querySelector(_this.props.selectorPrimaryFocus || null);\n      var tabbableNode = menuBody.querySelector(_navigation.selectorTabbable);\n      var focusableNode = menuBody.querySelector(_navigation.selectorFocusable);\n      var focusTarget = primaryFocusNode || // User defined focusable node\n      tabbableNode || // First sequentially focusable node\n      focusableNode || // First programmatic focusable node\n      menuBody;\n\n      if (_this.props.focusTrap) {\n        focusTarget.focus();\n      }\n\n      if (focusTarget === menuBody && process.env.NODE_ENV !== \"production\") {\n        process.env.NODE_ENV !== \"production\" ? (0, _warning.warning)(focusableNode === null, 'Floating Menus must have at least a programmatically focusable child. ' + 'This can be accomplished by adding tabIndex=\"-1\" to the content element.') : void 0;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_menuRef\", function (menuBody) {\n      var menuRef = _this.props.menuRef;\n      _this._placeInProgress = !!menuBody;\n      menuRef && menuRef(_this._menuBody = menuBody);\n\n      if (menuBody) {\n        _this._updateMenuSize();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_getChildrenWithProps\", function () {\n      var _this$props3 = _this.props,\n          styles = _this$props3.styles,\n          children = _this$props3.children;\n      var pos = _this.state.floatingPosition; // If no pos available, we need to hide the element (offscreen to the left)\n      // This is done so we can measure the content before positioning it correctly.\n\n      var positioningStyle = pos ? {\n        left: \"\".concat(pos.left, \"px\"),\n        top: \"\".concat(pos.top, \"px\"),\n        right: 'auto'\n      } : {\n        visibility: 'hidden',\n        top: '0px'\n      };\n      return /*#__PURE__*/_react.default.cloneElement(children, {\n        ref: _this._menuRef,\n        style: _objectSpread(_objectSpread(_objectSpread({}, styles), positioningStyle), {}, {\n          position: 'absolute',\n          opacity: 1\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function (_ref2) {\n      var oldActiveNode = _ref2.target,\n          currentActiveNode = _ref2.relatedTarget;\n\n      if (currentActiveNode && oldActiveNode) {\n        var startSentinelNode = _this.startSentinel.current;\n        var endSentinelNode = _this.endSentinel.current;\n        (0, _wrapFocus.default)({\n          bodyNode: _this._menuBody,\n          startSentinelNode: startSentinelNode,\n          endSentinelNode: endSentinelNode,\n          currentActiveNode: currentActiveNode,\n          oldActiveNode: oldActiveNode\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(FloatingMenu, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.hResize.release();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.hResize = _OptimizedResize.default.add(function () {\n        _this2._updateMenuSize();\n      });\n    }\n    /**\n     * Set focus on floating menu content after menu placement.\n     * @param {Element} menuBody The DOM element of the menu body.\n     * @private\n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this._updateMenuSize(prevProps);\n\n      var onPlace = this.props.onPlace;\n\n      if (this._placeInProgress && this.state.floatingPosition) {\n        if (this._menuBody && !this._menuBody.contains(document.activeElement)) {\n          this._focusMenuContent(this._menuBody);\n        }\n\n        if (typeof onPlace === 'function') {\n          onPlace(this._menuBody);\n          this._placeInProgress = false;\n        }\n      }\n    }\n    /**\n     * A callback for called when menu body is mounted or unmounted.\n     * @param {Element} menuBody The menu body being mounted. `null` if the menu body is being unmounted.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (typeof document !== 'undefined') {\n        var _this$props4 = this.props,\n            focusTrap = _this$props4.focusTrap,\n            target = _this$props4.target;\n        return /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/_react.default.createElement(\"div\", {\n          onBlur: focusTrap ? this.handleBlur : null\n        }, /*#__PURE__*/_react.default.createElement(\"span\", {\n          ref: this.startSentinel,\n          tabIndex: \"0\",\n          role: \"link\",\n          className: \"\".concat(prefix, \"--visually-hidden\")\n        }, \"Focus sentinel\"), this._getChildrenWithProps(), /*#__PURE__*/_react.default.createElement(\"span\", {\n          ref: this.endSentinel,\n          tabIndex: \"0\",\n          role: \"link\",\n          className: \"\".concat(prefix, \"--visually-hidden\")\n        }, \"Focus sentinel\")), !target ? document.body : target());\n      }\n\n      return null;\n    }\n  }]);\n\n  return FloatingMenu;\n}(_react.default.Component);\n\n_defineProperty(FloatingMenu, \"propTypes\", {\n  /**\n   * Contents to put into the floating menu.\n   */\n  children: _propTypes.default.object,\n\n  /**\n   * `true` if the menu alignment should be flipped.\n   */\n  flipped: _propTypes.default.bool,\n\n  /**\n   * Enable or disable focus trap behavior\n   */\n  focusTrap: _propTypes.default.bool,\n\n  /**\n   * Where to put the tooltip, relative to the trigger button.\n   */\n  menuDirection: _propTypes.default.oneOf([DIRECTION_LEFT, DIRECTION_TOP, DIRECTION_RIGHT, DIRECTION_BOTTOM]),\n\n  /**\n   * The adjustment of the floating menu position, considering the position of dropdown arrow, etc.\n   */\n  menuOffset: _propTypes.default.oneOfType([_propTypes.default.shape({\n    top: _propTypes.default.number,\n    left: _propTypes.default.number\n  }), _propTypes.default.func]),\n\n  /**\n   * The callback called when the menu body has been mounted to/will be unmounted from the DOM.\n   */\n  menuRef: _propTypes.default.func,\n\n  /**\n   * The callback called when the menu body has been mounted and positioned.\n   */\n  onPlace: _propTypes.default.func,\n\n  /**\n   * Specify a CSS selector that matches the DOM element that should\n   * be focused when the Modal opens\n   */\n  selectorPrimaryFocus: _propTypes.default.string,\n\n  /**\n   * The additional styles to put to the floating menu.\n   */\n  styles: _propTypes.default.object,\n\n  /**\n   * The query selector indicating where the floating menu body should be placed.\n   */\n  target: _propTypes.default.func,\n\n  /**\n   * The element ref of the tooltip's trigger button.\n   */\n  triggerRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({\n    current: _propTypes.default.any\n  })])\n});\n\n_defineProperty(FloatingMenu, \"defaultProps\", {\n  menuOffset: {},\n  menuDirection: DIRECTION_BOTTOM\n});\n\nvar _default = FloatingMenu;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}