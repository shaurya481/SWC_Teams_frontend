{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport Downshift from 'downshift';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { settings } from 'carbon-components';\nimport { Checkmark16, WarningAltFilled16, WarningFilled16 } from '@carbon/icons-react';\nimport ListBox, { PropTypes as ListBoxPropTypes } from '../ListBox';\nimport { ListBoxTrigger, ListBoxSelection } from '../ListBox/next';\nimport { match, keys } from '../../internal/keyboard';\nimport setupGetInstanceId from '../../tools/setupGetInstanceId';\nimport { mapDownshiftProps } from '../../tools/createPropAdapter';\nimport mergeRefs from '../../tools/mergeRefs';\nvar prefix = settings.prefix;\n\nvar defaultItemToString = function defaultItemToString(item) {\n  if (typeof item === 'string') {\n    return item;\n  }\n\n  return item && item.label;\n};\n\nvar defaultShouldFilterItem = function defaultShouldFilterItem() {\n  return true;\n};\n\nvar getInputValue = function getInputValue(_ref) {\n  var initialSelectedItem = _ref.initialSelectedItem,\n      inputValue = _ref.inputValue,\n      itemToString = _ref.itemToString,\n      selectedItem = _ref.selectedItem;\n\n  if (selectedItem) {\n    return itemToString(selectedItem);\n  } // TODO: consistent `initialSelectedItem` behavior with other listbox components in v11\n\n\n  if (initialSelectedItem) {\n    return itemToString(initialSelectedItem);\n  }\n\n  return inputValue || '';\n};\n\nvar findHighlightedIndex = function findHighlightedIndex(_ref2, inputValue) {\n  var items = _ref2.items,\n      itemToString = _ref2.itemToString;\n\n  if (!inputValue) {\n    return -1;\n  }\n\n  var searchValue = inputValue.toLowerCase();\n\n  for (var i = 0; i < items.length; i++) {\n    var item = itemToString(items[i]).toLowerCase();\n\n    if (item.indexOf(searchValue) !== -1) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nvar getInstanceId = setupGetInstanceId();\n\nvar ComboBox = function ComboBox(props) {\n  var _cx;\n\n  var ariaLabel = props.ariaLabel,\n      containerClassName = props.className,\n      direction = props.direction,\n      disabled = props.disabled,\n      downshiftProps = props.downshiftProps,\n      helperText = props.helperText,\n      id = props.id,\n      initialSelectedItem = props.initialSelectedItem,\n      invalid = props.invalid,\n      invalidText = props.invalidText,\n      items = props.items,\n      itemToElement = props.itemToElement,\n      itemToString = props.itemToString,\n      light = props.light,\n      onChange = props.onChange,\n      onInputChange = props.onInputChange,\n      onToggleClick = props.onToggleClick,\n      placeholder = props.placeholder,\n      selectedItem = props.selectedItem,\n      shouldFilterItem = props.shouldFilterItem,\n      size = props.size,\n      titleText = props.titleText,\n      translateWithId = props.translateWithId,\n      type = props.type,\n      warn = props.warn,\n      warnText = props.warnText,\n      rest = _objectWithoutProperties(props, [\"ariaLabel\", \"className\", \"direction\", \"disabled\", \"downshiftProps\", \"helperText\", \"id\", \"initialSelectedItem\", \"invalid\", \"invalidText\", \"items\", \"itemToElement\", \"itemToString\", \"light\", \"onChange\", \"onInputChange\", \"onToggleClick\", \"placeholder\", \"selectedItem\", \"shouldFilterItem\", \"size\", \"titleText\", \"translateWithId\", \"type\", \"warn\", \"warnText\"]);\n\n  var textInput = useRef();\n  var comboBoxInstanceId = getInstanceId();\n\n  var _useState = useState(getInputValue({\n    initialSelectedItem: initialSelectedItem,\n    inputValue: '',\n    itemToString: itemToString,\n    selectedItem: selectedItem\n  })),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      prevSelectedItem = _useState4[0],\n      setPrevSelectedItem = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      doneInitialSelectedItem = _useState6[0],\n      setDoneInitialSelectedItem = _useState6[1];\n\n  var savedOnInputChange = useRef(onInputChange);\n\n  if (!doneInitialSelectedItem || prevSelectedItem !== selectedItem) {\n    setDoneInitialSelectedItem(true);\n    setPrevSelectedItem(selectedItem);\n    setInputValue(getInputValue({\n      initialSelectedItem: initialSelectedItem,\n      inputValue: inputValue,\n      itemToString: itemToString,\n      selectedItem: selectedItem\n    }));\n  }\n\n  var filterItems = function filterItems(items, itemToString, inputValue) {\n    return items.filter(function (item) {\n      return shouldFilterItem({\n        item: item,\n        itemToString: itemToString,\n        inputValue: inputValue\n      });\n    });\n  };\n\n  var handleOnChange = function handleOnChange(selectedItem) {\n    if (onChange) {\n      onChange({\n        selectedItem: selectedItem\n      });\n    }\n  };\n\n  var handleOnInputValueChange = function handleOnInputValueChange(inputValue) {\n    setInputValue(inputValue || '');\n  };\n\n  useEffect(function () {\n    savedOnInputChange.current = onInputChange;\n  }, [onInputChange]);\n  useEffect(function () {\n    if (savedOnInputChange.current) {\n      savedOnInputChange.current(inputValue);\n    }\n  }, [inputValue]);\n\n  var handleSelectionClear = function handleSelectionClear() {\n    if (textInput !== null && textInput !== void 0 && textInput.current) {\n      textInput.current.focus();\n    }\n  };\n\n  var handleOnStateChange = function handleOnStateChange(newState, _ref3) {\n    var setHighlightedIndex = _ref3.setHighlightedIndex;\n\n    if (Object.prototype.hasOwnProperty.call(newState, 'inputValue')) {\n      var _inputValue = newState.inputValue;\n      var filteredItems = filterItems(items, itemToString, _inputValue);\n      setHighlightedIndex(findHighlightedIndex(_objectSpread(_objectSpread({}, props), {}, {\n        items: filteredItems\n      }), _inputValue));\n    }\n  };\n\n  var handleToggleClick = function handleToggleClick(isOpen) {\n    return function (event) {\n      if (onToggleClick) {\n        onToggleClick(event);\n      }\n\n      if (event.target === textInput.current && isOpen) {\n        event.preventDownshiftDefault = true;\n        event.persist();\n      }\n    };\n  };\n\n  var showWarning = !invalid && warn;\n  var className = cx(\"\".concat(prefix, \"--combo-box\"), containerClassName, (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--list-box--up\"), direction === 'top'), _defineProperty(_cx, \"\".concat(prefix, \"--combo-box--warning\"), showWarning), _cx));\n  var titleClasses = cx(\"\".concat(prefix, \"--label\"), _defineProperty({}, \"\".concat(prefix, \"--label--disabled\"), disabled));\n  var comboBoxHelperId = !helperText ? undefined : \"combobox-helper-text-\".concat(comboBoxInstanceId);\n  var helperClasses = cx(\"\".concat(prefix, \"--form__helper-text\"), _defineProperty({}, \"\".concat(prefix, \"--form__helper-text--disabled\"), disabled));\n  var wrapperClasses = cx(\"\".concat(prefix, \"--list-box__wrapper\"));\n  var inputClasses = cx(\"\".concat(prefix, \"--text-input\"), _defineProperty({}, \"\".concat(prefix, \"--text-input--empty\"), !inputValue)); // needs to be Capitalized for react to render it correctly\n\n  var ItemToElement = itemToElement;\n  return /*#__PURE__*/React.createElement(Downshift, _extends({}, mapDownshiftProps(downshiftProps), {\n    onChange: handleOnChange,\n    onInputValueChange: handleOnInputValueChange,\n    onStateChange: handleOnStateChange,\n    inputValue: inputValue || '',\n    itemToString: itemToString,\n    initialSelectedItem: initialSelectedItem,\n    inputId: id,\n    selectedItem: selectedItem\n  }), function (_ref4) {\n    var getInputProps = _ref4.getInputProps,\n        getItemProps = _ref4.getItemProps,\n        getLabelProps = _ref4.getLabelProps,\n        getMenuProps = _ref4.getMenuProps,\n        getRootProps = _ref4.getRootProps,\n        getToggleButtonProps = _ref4.getToggleButtonProps,\n        isOpen = _ref4.isOpen,\n        inputValue = _ref4.inputValue,\n        selectedItem = _ref4.selectedItem,\n        highlightedIndex = _ref4.highlightedIndex,\n        clearSelection = _ref4.clearSelection,\n        toggleMenu = _ref4.toggleMenu;\n    var rootProps = getRootProps({}, {\n      suppressRefError: true\n    });\n    var labelProps = getLabelProps();\n    var buttonProps = getToggleButtonProps({\n      disabled: disabled,\n      onClick: handleToggleClick(isOpen),\n      // When we moved the \"root node\" of Downshift to the <input> for\n      // ARIA 1.2 compliance, we unfortunately hit this branch for the\n      // \"mouseup\" event that downshift listens to:\n      // https://github.com/downshift-js/downshift/blob/v5.2.1/src/downshift.js#L1051-L1065\n      //\n      // As a result, it will reset the state of the component and so we\n      // stop the event from propagating to prevent this. This allows the\n      // toggleMenu behavior for the toggleButton to correctly open and\n      // close the menu.\n      onMouseUp: function onMouseUp(event) {\n        event.stopPropagation();\n      }\n    });\n    var inputProps = getInputProps({\n      // Remove excess aria `aria-labelledby`. HTML <label for> provides this aria information.\n      'aria-labelledby': null,\n      disabled: disabled,\n      placeholder: placeholder,\n      onClick: function onClick() {\n        toggleMenu();\n      },\n      onKeyDown: function onKeyDown(event) {\n        if (match(event, keys.Space)) {\n          event.stopPropagation();\n        }\n\n        if (match(event, keys.Enter) && !inputValue) {\n          toggleMenu();\n        }\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: wrapperClasses\n    }, titleText && /*#__PURE__*/React.createElement(\"label\", _extends({\n      className: titleClasses\n    }, labelProps), titleText), /*#__PURE__*/React.createElement(ListBox, {\n      className: className,\n      disabled: disabled,\n      invalid: invalid,\n      invalidText: invalidText,\n      isOpen: isOpen,\n      light: light,\n      size: size,\n      warn: warn,\n      warnText: warnText\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--list-box__field\")\n    }, /*#__PURE__*/React.createElement(\"input\", _extends({\n      role: \"combobox\",\n      disabled: disabled,\n      className: inputClasses,\n      type: \"text\",\n      tabIndex: \"0\",\n      \"aria-autocomplete\": \"list\",\n      \"aria-expanded\": rootProps['aria-expanded'],\n      \"aria-haspopup\": \"listbox\",\n      \"aria-controls\": inputProps['aria-controls']\n    }, inputProps, rest, {\n      ref: mergeRefs(textInput, rootProps.ref)\n    })), invalid && /*#__PURE__*/React.createElement(WarningFilled16, {\n      className: \"\".concat(prefix, \"--list-box__invalid-icon\")\n    }), showWarning && /*#__PURE__*/React.createElement(WarningAltFilled16, {\n      className: \"\".concat(prefix, \"--list-box__invalid-icon \").concat(prefix, \"--list-box__invalid-icon--warning\")\n    }), inputValue && /*#__PURE__*/React.createElement(ListBoxSelection, {\n      clearSelection: clearSelection,\n      translateWithId: translateWithId,\n      disabled: disabled,\n      onClearSelection: handleSelectionClear\n    }), /*#__PURE__*/React.createElement(ListBoxTrigger, _extends({}, buttonProps, {\n      isOpen: isOpen,\n      translateWithId: translateWithId\n    }))), /*#__PURE__*/React.createElement(ListBox.Menu, getMenuProps({\n      'aria-label': ariaLabel\n    }), isOpen ? filterItems(items, itemToString, inputValue).map(function (item, index) {\n      var _getItemProps;\n\n      var itemProps = getItemProps((_getItemProps = {\n        item: item,\n        index: index\n      }, _defineProperty(_getItemProps, 'aria-current', selectedItem === item ? true : null), _defineProperty(_getItemProps, 'aria-selected', highlightedIndex === index ? true : null), _getItemProps));\n      return /*#__PURE__*/React.createElement(ListBox.MenuItem, _extends({\n        key: itemProps.id,\n        isActive: selectedItem === item,\n        tabIndex: \"-1\",\n        isHighlighted: highlightedIndex === index || (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.id) && (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.id) === item.id || false,\n        title: itemToElement ? item.text : itemToString(item)\n      }, itemProps), itemToElement ? /*#__PURE__*/React.createElement(ItemToElement, _extends({\n        key: itemProps.id\n      }, item)) : itemToString(item), selectedItem === item && /*#__PURE__*/React.createElement(Checkmark16, {\n        className: \"\".concat(prefix, \"--list-box__menu-item__selected-icon\")\n      }));\n    }) : null)), helperText && !invalid && !warn && /*#__PURE__*/React.createElement(\"div\", {\n      id: comboBoxHelperId,\n      className: helperClasses\n    }, helperText));\n  });\n};\n\nComboBox.propTypes = {\n  /**\n   * 'aria-label' of the ListBox component.\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * An optional className to add to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the direction of the combobox dropdown. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom']),\n\n  /**\n   * Specify if the control should be disabled, or not\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Additional props passed to Downshift\n   */\n  downshiftProps: PropTypes.shape(Downshift.propTypes),\n\n  /**\n   * Provide helper text that is used alongside the control label for\n   * additional help\n   */\n  helperText: PropTypes.string,\n\n  /**\n   * Specify a custom `id` for the input\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\n   * from their collection that are pre-selected\n   */\n  initialSelectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n\n  /**\n   * Specify if the currently selected value is invalid.\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Message which is displayed if the value is invalid.\n   */\n  invalidText: PropTypes.node,\n\n  /**\n   * Optional function to render items as custom components instead of strings.\n   * Defaults to null and is overriden by a getter\n   */\n  itemToElement: PropTypes.func,\n\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * should use \"light theme\" (white background)?\n   */\n  light: PropTypes.bool,\n\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component when a specific dropdown item is selected.\n   * @param {{ selectedItem }}\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback function to notify consumer when the text input changes.\n   * This provides support to change available items based on the text.\n   * @param {string} inputText\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback function that fires when the combobox menu toggle is clicked\n   * @param {MouseEvent} event\n   */\n  onToggleClick: PropTypes.func,\n\n  /**\n   * Used to provide a placeholder text node before a user enters any input.\n   * This is only present if the control has no items selected\n   */\n  placeholder: PropTypes.string.isRequired,\n\n  /**\n   * For full control of the selection\n   */\n  selectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n\n  /**\n   * Specify your own filtering logic by passing in a `shouldFilterItem`\n   * function that takes in the current input and an item and passes back\n   * whether or not the item should be filtered.\n   */\n  shouldFilterItem: PropTypes.func,\n\n  /**\n   * Specify the size of the ListBox. Currently supports either `sm`, `md` or `lg` as an option.\n   */\n  size: ListBoxPropTypes.ListBoxSize,\n\n  /**\n   * Provide text to be used in a `<label>` element that is tied to the\n   * combobox via ARIA attributes.\n   */\n  titleText: PropTypes.node,\n\n  /**\n   * Specify a custom translation function that takes in a message identifier\n   * and returns the localized string for the message\n   */\n  translateWithId: PropTypes.func,\n\n  /**\n   * Currently supports either the default type, or an inline variant\n   */\n  type: ListBoxPropTypes.ListBoxType,\n\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\nComboBox.defaultProps = {\n  disabled: false,\n  itemToString: defaultItemToString,\n  itemToElement: null,\n  shouldFilterItem: defaultShouldFilterItem,\n  type: 'default',\n  ariaLabel: 'Choose an item',\n  light: false,\n  direction: 'bottom'\n};\nexport default ComboBox;","map":null,"metadata":{},"sourceType":"module"}