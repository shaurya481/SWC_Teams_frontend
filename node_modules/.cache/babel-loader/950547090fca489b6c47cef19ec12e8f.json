{"ast":null,"code":"import { Canary } from './components/_Canary';\nimport featureFlags from './generated/feature-flags/feature-flags';\nimport pkgSettings from './global/js/package-settings';\nimport { settings as carbonSettings } from 'carbon-components';\nimport React from 'react';\nimport { themes } from '@carbon/themes';\nexport var carbon = {\n  get prefix() {\n    return carbonSettings.prefix;\n  },\n\n  set prefix(val) {\n    carbonSettings.prefix = val;\n  },\n\n  get flags() {\n    return featureFlags;\n  },\n\n  get themes() {\n    return themes;\n  }\n\n}; // Check that a component is enabled. This function returns a stub which checks\n// the component status on first use and then renders as the component or as\n// a Canary placeholder initialised with the name of the replaced component.\n// Note that the returned stub carries any other properties which had already\n// been assigned (eg propTypes, displayName, etc).\n\npkgSettings.checkComponentEnabled = function (component, name) {\n  if (component.render) {\n    // The component is a forward-ref, so make a stub forward-ref.\n    var forward = /*#__PURE__*/React.forwardRef(function (props, ref) {\n      return (// Replace the stub's render fn so this test only happens once.\n        (forward.render = pkgSettings.isComponentEnabled(name) ? // Replace the stub's render fn with the component's render fn.\n        component.render : // Note that Canary is a direct render fn (not a forward-ref) and\n        // will ignore the passed props and ref (if any)\n        Canary.bind(undefined, {\n          componentName: name\n        }))( // Call it now (after this it will be directly called).\n        props, ref)\n      );\n    }); // Transfer object properties already assigned (eg propTypes, displayName)\n    // then merge in the stub forward-ref which checks the component status\n    // when first used.\n\n    return Object.assign({}, component, forward);\n  } else {\n    // The component is a direct render fn, so make a stub render fn.\n    var _render = function render(props) {\n      return (// Replace the stub render fn so this test only happens once.\n        (_render = pkgSettings.isComponentEnabled(name) ? // Replace the stub render fn with the component render fn.\n        component : // Replace the stub render fn with the Canary render fn, which will\n        // ignore the passed props.\n        Canary.bind(undefined, {\n          componentName: name\n        }))( // Call it now (after this it will be directly called).\n        props)\n      );\n    }; // Transfer object properties already assigned (eg propTypes, displayName)\n    // to a function which calls the stub render fn which checks the component\n    // status when first used.\n\n\n    return Object.assign(function (props) {\n      return _render(props);\n    }, component);\n  }\n};\n\nexport var pkg = pkgSettings;","map":null,"metadata":{},"sourceType":"module"}