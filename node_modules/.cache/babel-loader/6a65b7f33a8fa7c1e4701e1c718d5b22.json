{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"active\", \"ariaLabel\", \"className\", \"id\", \"percentage\", \"percentageIndicatorText\", \"showPercentageIndicator\", \"small\"];\n/**\n * Copyright IBM Corp. 2021, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\nimport React, { useEffect, useRef } from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pkg\n/*, carbon */\n} from '../../settings'; // Carbon and package components we use.\n\n/* @import(s) of carbon components and other package components. */\n// The block part of our conventional BEM class names (blockClass__E--M).\n\nvar blockClass = \"\".concat(pkg.prefix, \"--loading-bar\");\nvar componentName = 'LoadingBar'; // NOTE: the component SCSS is not imported here: it is rolled up separately.\n\n/**\n * The LoadingBar component provides a way to communicate the loading state to users.\n * It is intended to fill the space of where it's used, and should persist until the\n * loading action is complete. Once complete, the active prop may be set to false to\n * hide the LoadingBar.\n * The LoadingBar has two modes of operation: Indeterminate and Determinate.\n * If no percentage is provided to the component, the LoadingBar behaves in indeterminate\n * mode, with the bar moving from side to side, to indicate loading in progress.\n * If a percentage prop is provided, the determinate mode of operation is used and the\n * loading bar fills until the specified percentage to indicate current progress to\n * the user.\n */\n\nexport var LoadingBar = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _cx2, _cx3;\n\n  var active = _ref.active,\n      ariaLabel = _ref.ariaLabel,\n      className = _ref.className,\n      id = _ref.id,\n      percentage = _ref.percentage,\n      percentageIndicatorText = _ref.percentageIndicatorText,\n      showPercentageIndicator = _ref.showPercentageIndicator,\n      small = _ref.small,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  function usePrevious(value) {\n    var ref = useRef();\n    useEffect(function () {\n      // Store current value in ref\n      ref.current = value;\n    }, [value]); // Only re-run if value changes\n    // Return previous value (happens before update in useEffect above)\n\n    return ref.current;\n  }\n\n  var prevActive = usePrevious(active);\n  var isDeterminate = percentage !== undefined;\n  var percProgress = isDeterminate ? percentage > 100 ? \"100%\" : percentage + '%' : 0;\n  var showPercIndicator = isDeterminate && showPercentageIndicator; // switch classes dependant on props\n\n  var loadingWrapper = cx(_defineProperty({}, \"\".concat(blockClass, \"__preload\"), !prevActive && !active));\n  var loadingClassName = cx((_cx2 = {}, _defineProperty(_cx2, \"\".concat(blockClass, \"__inner\"), true), _defineProperty(_cx2, \"\".concat(blockClass, \"__small\"), small), _defineProperty(_cx2, \"\".concat(blockClass, \"__linear-stop\"), !active && isDeterminate), _defineProperty(_cx2, \"\".concat(blockClass, \"__indefinite-stop\"), !active && !isDeterminate), _cx2));\n  var animationClassName = cx((_cx3 = {}, _defineProperty(_cx3, \"\".concat(blockClass, \"__linear-progress\"), isDeterminate), _defineProperty(_cx3, \"\".concat(blockClass, \"__stop-progress\"), !active && !isDeterminate), _defineProperty(_cx3, \"\".concat(blockClass, \"__indefinite-progress\"), active && !isDeterminate), _cx3));\n  var loadingId = id && \"loading-bar-id-\".concat(id);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, // Pass through any other property values as HTML attributes.\n  rest, {\n    className: cx(loadingWrapper, // Apply any supplied class names to the main HTML element.\n    className, blockClass),\n    ref: ref,\n    role: \"progressbar\",\n    \"aria-label\": ariaLabel,\n    \"aria-atomic\": \"true\",\n    \"aria-labelledby\": loadingId,\n    \"aria-live\": active ? 'assertive' : 'off',\n    id: loadingId\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: loadingClassName\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({}, isDeterminate && {\n    style: {\n      width: percProgress\n    }\n  }, {\n    className: \"\".concat(blockClass, \"__progress\")\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: animationClassName\n  }))), showPercIndicator && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__indicator-wrapper\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__indicator\")\n  }, active && percentageIndicatorText)));\n}); // Return a placeholder if not released and not enabled by feature flag\n\nLoadingBar = pkg.checkComponentEnabled(LoadingBar, componentName); // The display name of the component, used by React. Note that displayName\n// is used in preference to relying on function.name.\n\nLoadingBar.displayName = componentName; // The types and DocGen commentary for the component props,\n// in alphabetical order (for consistency).\n// See https://www.npmjs.com/package/prop-types#usage.\n\nLoadingBar.propTypes = {\n  /**\n   * Specify whether you want the loading bar indicator to be active or not\n   */\n  active: PropTypes.bool.isRequired,\n\n  /**\n   * Specify a ariaLabel that would be used to best describe the active loading state\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Provide an optional className to be applied to the containing node\n   */\n  className: PropTypes.string,\n\n  /**\n   * ID for loading bar\n   */\n  id: PropTypes.string,\n\n  /**\n   * Leave undefined for indetermined duration or specify percentage complete that the determinate bar should indicate (0-100).\n   */\n  percentage: PropTypes.number,\n\n  /**\n   * In determinate mode, provide text to be shown on percentage indicator\n   */\n  percentageIndicatorText: PropTypes.string,\n\n  /**\n   * In determinate mode, specify whether to show the percentage indicator.\n   */\n  showPercentageIndicator: PropTypes.bool,\n\n  /**\n   * Specify whether you would like the small variant of this component\n   */\n  small: PropTypes.bool\n}; // Default values for component props. Default values are not required for\n// props that are required, nor for props where the component can apply\n// 'undefined' values reasonably. Default values should be provided when the\n// component needs to make a choice or assumption when a prop is not supplied.\n\nLoadingBar.defaultProps = {\n  /* add defaults for relevant props. */\n  active: true,\n  small: false,\n  percentage: undefined,\n  showPercentageIndicator: false,\n  percentageIndicatorText: undefined,\n  ariaLabel: 'Active loading indicator'\n};","map":null,"metadata":{},"sourceType":"module"}