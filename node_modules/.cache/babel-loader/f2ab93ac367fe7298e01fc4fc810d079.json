{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\n * Copyright IBM Corp. 2015, 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport { FeatureFlags as GlobalFeatureFlags, createScope } from '@carbon/feature-flags';\nimport PropTypes from 'prop-types';\nimport React, { createContext, useContext, useEffect, useRef, useState } from 'react';\n/**\n * Our FeatureFlagContext is used alongside the FeatureFlags component to enable\n * or disable feature flags in a given React tree\n */\n\nvar FeatureFlagContext = /*#__PURE__*/createContext(GlobalFeatureFlags);\n/**\n * Supports an object of feature flag values with the `flags` prop, merging them\n * along with the current `FeatureFlagContext` to provide consumers to check if\n * a feature flag is enabled or disabled in a given React tree\n */\n\nfunction FeatureFlags(_ref) {\n  var children = _ref.children,\n      _ref$flags = _ref.flags,\n      flags = _ref$flags === void 0 ? {} : _ref$flags;\n  var parentScope = useContext(FeatureFlagContext);\n\n  var _useState = useState(parentScope),\n      _useState2 = _slicedToArray(_useState, 2),\n      prevParentScope = _useState2[0],\n      setPrevParentScope = _useState2[1];\n\n  var _useState3 = useState(function () {\n    var scope = createScope(flags);\n    scope.mergeWithScope(parentScope);\n    return scope;\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scope = _useState4[0],\n      updateScope = _useState4[1];\n\n  if (parentScope !== prevParentScope) {\n    var _scope = createScope(flags);\n\n    _scope.mergeWithScope(parentScope);\n\n    updateScope(_scope);\n    setPrevParentScope(parentScope);\n  } // We use a custom hook to detect if any of the keys or their values change\n  // for flags that are passed in. If they have changed, then we re-create the\n  // FeatureFlagScope using the new flags\n\n\n  useChangedValue(flags, isEqual, function (changedFlags) {\n    var scope = createScope(changedFlags);\n    scope.mergeWithScope(parentScope);\n    updateScope(scope);\n  });\n  return /*#__PURE__*/React.createElement(FeatureFlagContext.Provider, {\n    value: scope\n  }, children);\n}\n\nFeatureFlags.propTypes = {\n  children: PropTypes.node,\n\n  /**\n   * Provide the feature flags to enabled or disabled in the current React tree\n   */\n  flags: PropTypes.objectOf(PropTypes.bool)\n};\n/**\n * This hook will store previous versions of the given `value` and compare the\n * current value to the previous one using the `compare` function. If the\n * compare function returns true, then the given `callback` is invoked in an\n * effect.\n *\n * @param {any} value\n * @param {Function} compare\n * @param {Function} callback\n */\n\nfunction useChangedValue(value, compare, callback) {\n  var initialRender = useRef(false);\n  var savedCallback = useRef(callback);\n\n  var _useState5 = useState(value),\n      _useState6 = _slicedToArray(_useState5, 2),\n      prevValue = _useState6[0],\n      setPrevValue = _useState6[1];\n\n  if (!compare(prevValue, value)) {\n    setPrevValue(value);\n  }\n\n  useEffect(function () {\n    savedCallback.current = callback;\n  });\n  useEffect(function () {\n    // We only want the callback triggered after the first render\n    if (initialRender.current) {\n      savedCallback.current(prevValue);\n    }\n  }, [prevValue]);\n  useEffect(function () {\n    initialRender.current = true;\n  }, []);\n}\n/**\n * Access whether a given flag is enabled or disabled in a given\n * FeatureFlagContext\n *\n * @returns {boolean}\n */\n\n\nfunction useFeatureFlag(flag) {\n  var scope = useContext(FeatureFlagContext);\n  return scope.enabled(flag);\n}\n/**\n * Access all feature flag information for the given FeatureFlagContext\n *\n * @returns {FeatureFlagScope}\n */\n\n\nfunction useFeatureFlags() {\n  return useContext(FeatureFlagContext);\n}\n/**\n * Compare two objects and determine if they are equal. This is a shallow\n * comparison since the objects we are comparing are objects with boolean flags\n * from the flags prop in the `FeatureFlags` component\n *\n * @param {object} a\n * @param {object} b\n * @returns {boolean}\n */\n\n\nfunction isEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  for (var _i2 = 0, _Object$keys = Object.keys(a); _i2 < _Object$keys.length; _i2++) {\n    var key = _Object$keys[_i2];\n\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  for (var _i3 = 0, _Object$keys2 = Object.keys(b); _i3 < _Object$keys2.length; _i3++) {\n    var _key = _Object$keys2[_i3];\n\n    if (b[_key] !== a[_key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport { FeatureFlags, FeatureFlagContext, useFeatureFlags, useFeatureFlag };","map":null,"metadata":{},"sourceType":"module"}