{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"actionBarItems\", \"availableSpace\", \"background\", \"breadcrumbItems\", \"className\", \"collapseHeader\", \"collapseHeaderLabel\", \"expandHeaderLabel\", \"collapseHeaderToggleWanted\", \"preventBreadcrumbScroll\", \"navigation\", \"pageActions\", \"pageHeaderOffset\", \"preCollapseTitleRow\", \"subtitle\", \"tags\", \"title\", \"titleIcon\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} //\n// Copyright IBM Corp. 2020, 2020\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { extractShapesArray } from '../../global/js/utils/props-helper';\nimport { layout05, baseFontSize } from '@carbon/layout';\nimport cx from 'classnames';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { useWindowResize, useWindowScroll } from '../../global/js/use';\nimport { BreadcrumbItem, Grid, Column, Row, Button, SkeletonText, Tag } from 'carbon-components-react';\nimport { ActionBar } from '../ActionBar/';\nimport { BreadcrumbWithOverflow } from '../BreadcrumbWithOverflow';\nimport { TagSet } from '../TagSet';\nimport { ButtonSetWithOverflow } from '../ButtonSetWithOverflow';\nimport { pkg } from '../../settings';\nimport { ChevronUp16 } from '@carbon/icons-react';\nimport { deprecateProp, deprecatePropUsage, prepareProps } from '../../global/js/utils/props-helper';\nvar componentName = 'PageHeader';\nimport { blockClass, utilCheckUpdateVerticalSpace, utilGetTitleShape, utilSetCustomCSSProps } from './PageHeaderUtils';\nexport var PageHeader = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _extractShapesArray, _ref5, _cx, _ref7, _cx4, _cx9;\n\n  var actionBarItems = _ref.actionBarItems,\n      availableSpace = _ref.availableSpace,\n      background = _ref.background,\n      breadcrumbItems = _ref.breadcrumbItems,\n      className = _ref.className,\n      collapseHeader = _ref.collapseHeader,\n      collapseHeaderLabel = _ref.collapseHeaderLabel,\n      expandHeaderLabel = _ref.expandHeaderLabel,\n      collapseHeaderToggleWanted = _ref.collapseHeaderToggleWanted,\n      preventBreadcrumbScroll = _ref.preventBreadcrumbScroll,\n      navigation = _ref.navigation,\n      pageActions = _ref.pageActions,\n      pageHeaderOffset = _ref.pageHeaderOffset,\n      preCollapseTitleRow = _ref.preCollapseTitleRow,\n      subtitle = _ref.subtitle,\n      tags = _ref.tags,\n      title = _ref.title,\n      titleIcon = _ref.titleIcon,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      metrics = _useState2[0],\n      setMetrics = _useState2[1]; // refs\n\n\n  var localHeaderRef = useRef(null);\n  var headerRef = ref || localHeaderRef; // utility functions\n  // Title shape is used to allow title to be string or shape\n\n  var getTitleShape = function getTitleShape() {\n    return utilGetTitleShape(title, titleIcon, PageHeader.defaultProps.title);\n  };\n\n  var checkUpdateVerticalSpace = function checkUpdateVerticalSpace() {\n    return utilCheckUpdateVerticalSpace(headerRef, navigation, preventBreadcrumbScroll, setMetrics);\n  }; // state based on props only\n\n\n  var actionBarItemArray = extractShapesArray(actionBarItems);\n  var hasActionBar = actionBarItemArray.length;\n  var hasBreadcrumbRow = !(breadcrumbItems === undefined && actionBarItems === undefined);\n  var pageActionsItemArray = (_extractShapesArray = extractShapesArray(pageActions)) === null || _extractShapesArray === void 0 ? void 0 : _extractShapesArray.map(function (shape) {\n    return _objectSpread({\n      label: shape.children\n    }, shape);\n  });\n  /* Title shape is used to allow title to be string or shape */\n\n  var titleShape = getTitleShape(); // NOTE: The buffer is used to add space between the bottom of the header and the last content\n  // Not pre-collapsed and (subtitle or available space)\n\n  var lastRowBufferActive = (title || pageActions) && !preCollapseTitleRow || subtitle || availableSpace; // state based on scroll/resize based effects\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pageActionsInBreadcrumbRow = _useState4[0],\n      setPageActionsInBreadcrumbRow = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      scrollYValue = _useState6[0],\n      setScrollYValue = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      backgroundOpacity = _useState8[0],\n      setBackgroundOpacity = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      hasCollapseButton = _useState10[0],\n      setHasCollapseButton = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      spaceForCollapseButton = _useState12[0],\n      setSpaceForCollapseButton = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      actionBarMaxWidth = _useState14[0],\n      setActionBarMaxWidth = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      actionBarMinWidth = _useState16[0],\n      setActionBarMinWidth = _useState16[1];\n\n  var _useState17 = useState(0),\n      _useState18 = _slicedToArray(_useState17, 2),\n      pageActionInBreadcrumbMaxWidth = _useState18[0],\n      setPageActionInBreadcrumbMaxWidth = _useState18[1];\n\n  var _useState19 = useState(0),\n      _useState20 = _slicedToArray(_useState19, 2),\n      pageActionInBreadcrumbMinWidth = _useState20[0],\n      setPageActionInBreadcrumbMinWidth = _useState20[1];\n\n  var _useState21 = useState(0),\n      _useState22 = _slicedToArray(_useState21, 2),\n      actionBarColumnWidth = _useState22[0],\n      setActionBarColumnWidth = _useState22[1];\n\n  var _useState23 = useState(false),\n      _useState24 = _slicedToArray(_useState23, 2),\n      fullyCollapsed = _useState24[0],\n      setFullyCollapsed = _useState24[1]; // handlers\n\n\n  var handleActionBarWidthChange = function handleActionBarWidthChange(_ref2) {\n    var minWidth = _ref2.minWidth,\n        maxWidth = _ref2.maxWidth;\n    /* don't know how to test resize */\n\n    /* istanbul ignore next */\n\n    setActionBarMaxWidth(maxWidth);\n    /* don't know how to test resize */\n\n    /* istanbul ignore next */\n\n    setActionBarMinWidth(minWidth);\n  };\n\n  var handleButtonSetWidthChange = function handleButtonSetWidthChange(_ref3) {\n    var minWidth = _ref3.minWidth,\n        maxWidth = _ref3.maxWidth;\n    /* don't know how to test resize */\n\n    /* istanbul ignore next */\n\n    setPageActionInBreadcrumbMaxWidth(maxWidth);\n    /* don't know how to test resize */\n\n    /* istanbul ignore next */\n\n    setPageActionInBreadcrumbMinWidth(minWidth);\n  };\n\n  var handleResizeActionBarColumn = function handleResizeActionBarColumn(width) {\n    /* don't know how to test resize */\n\n    /* istanbul ignore next */\n    setActionBarColumnWidth(width);\n  };\n\n  var handleResize = function handleResize() {\n    // receives width and height parameters if needed\n\n    /* don't know how to test resize */\n\n    /* istanbul ignore next */\n    checkUpdateVerticalSpace();\n  };\n\n  var toggleCollapse = function toggleCollapse(forceCollapse) {\n    var collapse = typeof forceCollapse !== 'undefined' ? forceCollapse : !fullyCollapsed;\n    /* don't know how to test resize */\n\n    /* istanbul ignore next if */\n\n    if (collapse) {\n      window.scrollTo({\n        top: pageHeaderOffset - ((metrics === null || metrics === void 0 ? void 0 : metrics.headerTopValue) || 0),\n        behavior: 'smooth'\n      });\n    } else {\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  var handleCollapseToggle = function handleCollapseToggle() {\n    toggleCollapse();\n  }; // use effects\n\n\n  useEffect(function () {\n    // Determine the location of the pageAction buttons\n    setPageActionsInBreadcrumbRow(preCollapseTitleRow || scrollYValue > metrics.titleRowSpaceAbove && hasActionBar);\n  }, [hasActionBar, metrics.breadcrumbRowSpaceBelow, metrics.titleRowSpaceAbove, preCollapseTitleRow, scrollYValue]);\n  useEffect(function () {\n    var _utilSetCustomCSSProp;\n\n    var newActionBarWidth = 'initial';\n    var newPageActionInBreadcrumbWidth = 'initial';\n    /* don't know how to test resize */\n\n    /* istanbul ignore next if */\n\n    if (actionBarColumnWidth > 0) {\n      if (pageActionInBreadcrumbMaxWidth > 0 && actionBarColumnWidth > actionBarMaxWidth + pageActionInBreadcrumbMaxWidth) {\n        newPageActionInBreadcrumbWidth = \"\".concat(pageActionInBreadcrumbMaxWidth, \"px\");\n      } else if (pageActionInBreadcrumbMinWidth > 0) {\n        newPageActionInBreadcrumbWidth = \"\".concat(pageActionInBreadcrumbMinWidth, \"px\");\n      }\n\n      if (actionBarMaxWidth > 0 && actionBarColumnWidth > pageActionInBreadcrumbMinWidth + actionBarMaxWidth) {\n        newActionBarWidth = \"\".concat(actionBarMaxWidth, \"px\");\n      } else {\n        if (actionBarMinWidth > 0) {\n          newActionBarWidth = \"\".concat(actionBarColumnWidth - pageActionInBreadcrumbMinWidth, \"px\");\n        }\n      }\n    }\n\n    utilSetCustomCSSProps(headerRef, (_utilSetCustomCSSProp = {}, _defineProperty(_utilSetCustomCSSProp, \"--\".concat(blockClass, \"--max-action-bar-width-px\"), newActionBarWidth), _defineProperty(_utilSetCustomCSSProp, \"--\".concat(blockClass, \"--button-set-in-breadcrumb-width-px\"), \"\".concat(newPageActionInBreadcrumbWidth)), _utilSetCustomCSSProp));\n  }, [actionBarColumnWidth, actionBarMaxWidth, actionBarMinWidth, pageActionInBreadcrumbMaxWidth, pageActionInBreadcrumbMinWidth, headerRef]);\n  useEffect(function () {\n    var _utilSetCustomCSSProp2; // Updates custom CSS props used to manage scroll behaviour\n\n\n    utilSetCustomCSSProps(headerRef, (_utilSetCustomCSSProp2 = {}, _defineProperty(_utilSetCustomCSSProp2, \"--\".concat(blockClass, \"--height-px\"), \"\".concat(metrics.headerHeight, \"px\")), _defineProperty(_utilSetCustomCSSProp2, \"--\".concat(blockClass, \"--width-px\"), \"\".concat(metrics.headerWidth, \"px\")), _defineProperty(_utilSetCustomCSSProp2, \"--\".concat(blockClass, \"--header-top\"), \"\".concat(metrics.headerTopValue + pageHeaderOffset, \"px\")), _defineProperty(_utilSetCustomCSSProp2, \"--\".concat(blockClass, \"--breadcrumb-title-visibility\"), scrollYValue > 0 ? 'visible' : 'hidden'), _defineProperty(_utilSetCustomCSSProp2, \"--\".concat(blockClass, \"--scroll\"), \"\".concat(scrollYValue)), _defineProperty(_utilSetCustomCSSProp2, \"--\".concat(blockClass, \"--breadcrumb-title-top\"), \"\".concat(Math.max(0, metrics.breadcrumbTitleHeight + metrics.titleRowSpaceAbove - scrollYValue), \"px\")), _defineProperty(_utilSetCustomCSSProp2, \"--\".concat(blockClass, \"--breadcrumb-title-opacity\"), \"\".concat(Math.min(1, Math.max(0, (scrollYValue - (metrics.titleRowSpaceAbove || 0)) / (metrics.breadcrumbTitleHeight || 1) // don't want to divide by zero\n    )))), _defineProperty(_utilSetCustomCSSProp2, \"--\".concat(blockClass, \"--breadcrumb-row-width-px\"), \"\".concat(metrics.breadcrumbRowWidth, \"px\")), _utilSetCustomCSSProp2));\n  }, [headerRef, preventBreadcrumbScroll, metrics, metrics.breadcrumbRowHeight, metrics.breadcrumbRowSpaceBelow, metrics.breadcrumbTitleHeight, metrics.breadcrumbRowWidth, metrics.headerHeight, metrics.headerWidth, metrics.headerTopValue, metrics.navigationRowHeight, navigation, pageHeaderOffset, scrollYValue, tags]);\n  useWindowScroll( // on scroll or various layout changes check updates if needed\n  function (_ref4) {\n    var current = _ref4.current;\n    utilSetCustomCSSProps(headerRef, _defineProperty({}, \"--\".concat(blockClass, \"--breadcrumb-top\"), \"\".concat(pageHeaderOffset, \"px\")));\n    var fullyCollapsed = current.scrollY + metrics.headerTopValue + pageHeaderOffset >= 0;\n    setFullyCollapsed(fullyCollapsed); // set offset for tagset tooltip\n\n    var tagsetTooltipOffset = fullyCollapsed ? metrics.headerHeight + metrics.headerTopValue + pageHeaderOffset : metrics.headerHeight + pageHeaderOffset;\n    document.documentElement.style.setProperty(\"--\".concat(blockClass, \"--tagset-tooltip-position\"), fullyCollapsed ? 'fixed' : 'absolute');\n    document.documentElement.style.setProperty(\"--\".concat(blockClass, \"--tagset-tooltip-offset\"), \"\".concat(tagsetTooltipOffset, \"px\"));\n    setScrollYValue(current.scrollY);\n  }, [metrics.headerHeight, metrics.headerTopValue, pageHeaderOffset]);\n  useWindowResize(function () {\n    // on window resieze and other updates some values may have changed\n    checkUpdateVerticalSpace();\n  }, [actionBarItems, availableSpace, breadcrumbItems, preventBreadcrumbScroll, navigation, pageActions, subtitle, tags, title]);\n  useEffect(function () {\n    // Determines if the background should be one based on the header height or scroll\n    var result = background && 1;\n\n    if (!result && metrics.headerHeight > 0 && (breadcrumbItems || actionBarItems || tags || navigation)) {\n      var startAddingAt = parseFloat(layout05, 10) * parseInt(baseFontSize);\n      var scrollRemaining = metrics.headerHeight - scrollYValue;\n      /* don't know how to test resize */\n\n      /* istanbul ignore next if */\n\n      if (scrollRemaining < startAddingAt) {\n        var distanceAddingOver = startAddingAt - metrics.breadcrumbRowHeight;\n        result = Math.min(1, (startAddingAt - scrollRemaining) / distanceAddingOver);\n      }\n    }\n\n    utilSetCustomCSSProps(headerRef, _defineProperty({}, \"--\".concat(blockClass, \"--background-opacity\"), result));\n    setBackgroundOpacity(result);\n    setHasCollapseButton(collapseHeaderToggleWanted && result > 0);\n  }, [actionBarItems, background, breadcrumbItems, headerRef, metrics.breadcrumbRowHeight, metrics.headerHeight, navigation, scrollYValue, collapseHeaderToggleWanted, tags]);\n  useEffect(function () {\n    // Determine if space is needed in the breadcrumb for a collapse button\n    setSpaceForCollapseButton(hasCollapseButton && !(navigation || tags) && metrics.headerHeight);\n  }, [hasCollapseButton, navigation, tags, metrics.headerHeight]);\n\n  var nextToTabsCheck = function nextToTabsCheck() {\n    return preventBreadcrumbScroll && actionBarItems === undefined && scrollYValue + metrics.headerTopValue >= 0;\n  };\n\n  useEffect(function () {\n    toggleCollapse(collapseHeader); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [collapseHeader]);\n  var titleText = titleShape.text,\n      TitleIcon = titleShape.icon,\n      titleLoading = titleShape.loading;\n  var tempTagSetOverflowProps = {\n    // temp fix pending changes to PageHeader implementation\n    allTagsModalTitle: 'All tags',\n    allTagsModalSearchLabel: 'Search all tags',\n    allTagsModalSearchPlaceholderText: 'Search all tags',\n    showAllTagsLabel: 'View all tags'\n  };\n  return /*#__PURE__*/React.createElement(ReactResizeDetector, {\n    handleHeight: true,\n    onResize: handleResize\n  }, /*#__PURE__*/React.createElement(\"section\", _extends({}, rest, {\n    className: cx([blockClass, \"\".concat(blockClass, \"--no-margins-below-row\"), className, (_ref5 = {}, _defineProperty(_ref5, \"\".concat(blockClass, \"--show-background\"), backgroundOpacity > 0), _defineProperty(_ref5, \"\".concat(blockClass, \"--has-navigation\"), navigation || tags), _defineProperty(_ref5, \"\".concat(blockClass, \"--has-navigation-tags-only\"), !navigation && tags), _ref5)]),\n    ref: headerRef\n  }), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__non-navigation-row-contnet\")\n  }, hasBreadcrumbRow ? /*#__PURE__*/React.createElement(Row, {\n    className: cx(\"\".concat(blockClass, \"__breadcrumb-row\"), (_cx = {}, _defineProperty(_cx, \"\".concat(blockClass, \"__breadcrumb-row--next-to-tabs\"), nextToTabsCheck()), _defineProperty(_cx, \"\".concat(blockClass, \"__breadcrumb-row--has-breadcrumbs\"), breadcrumbItems), _defineProperty(_cx, \"\".concat(blockClass, \"__breadcrumb-row--has-action-bar\"), hasActionBar), _cx))\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__breadcrumb-row--container\")\n  }, /*#__PURE__*/React.createElement(Column, {\n    className: cx(\"\".concat(blockClass, \"__breadcrumb-column\"), _defineProperty({}, \"\".concat(blockClass, \"__breadcrumb-column--background\"), breadcrumbItems !== undefined || hasActionBar))\n  }, breadcrumbItems !== undefined ? /*#__PURE__*/React.createElement(BreadcrumbWithOverflow, {\n    className: \"\".concat(blockClass, \"__breadcrumb\"),\n    noTrailingSlash: title !== undefined\n  }, breadcrumbItems, title ? /*#__PURE__*/React.createElement(BreadcrumbItem, {\n    href: \"#\",\n    isCurrentPage: true,\n    className: cx([\"\".concat(blockClass, \"__breadcrumb-title\"), _defineProperty({}, \"\".concat(blockClass, \"__breadcrumb-title--pre-collapsed\"), preCollapseTitleRow)])\n  }, titleLoading ? /*#__PURE__*/React.createElement(SkeletonText, null) : titleText) : '') : ''), /*#__PURE__*/React.createElement(Column, {\n    className: cx([\"\".concat(blockClass, \"__action-bar-column \").concat(blockClass, \"__action-bar-column--background\"), (_ref7 = {}, _defineProperty(_ref7, \"\".concat(blockClass, \"__action-bar-column--has-page-actions\"), pageActions), _defineProperty(_ref7, \"\".concat(blockClass, \"__action-bar-column--influenced-by-collapse-button\"), spaceForCollapseButton), _ref7)])\n  }, /*#__PURE__*/React.createElement(ReactResizeDetector, {\n    handleWidth: true,\n    onResize: handleResizeActionBarColumn\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__action-bar-column-content\")\n  }, hasActionBar ?\n  /*#__PURE__*/\n  // Investigate the responsive  behaviour or this and the title also fix the ActionBar Item and PageAction story css\n  React.createElement(React.Fragment, null, pageActions && /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(\"\".concat(blockClass, \"__page-actions\"), _defineProperty({}, \"\".concat(blockClass, \"__page-actions--in-breadcrumb\"), pageActionsInBreadcrumbRow))\n  }, /*#__PURE__*/React.createElement(ButtonSetWithOverflow, {\n    className: \"\".concat(blockClass, \"__button-set--in-breadcrumb\"),\n    onWidthChange: handleButtonSetWidthChange,\n    buttons: pageActionsItemArray\n  })), /*#__PURE__*/React.createElement(ActionBar, {\n    actions: actionBarItemArray,\n    className: \"\".concat(blockClass, \"__action-bar\"),\n    onWidthChange: handleActionBarWidthChange,\n    rightAlign: true\n  })) : null))))) : null, !preCollapseTitleRow && !(title === undefined && pageActions === undefined) ? /*#__PURE__*/React.createElement(Row, {\n    className: cx(\"\".concat(blockClass, \"__title-row\"), (_cx4 = {}, _defineProperty(_cx4, \"\".concat(blockClass, \"__title-row--no-breadcrumb-row\"), !hasBreadcrumbRow), _defineProperty(_cx4, \"\".concat(blockClass, \"__title-row--under-action-bar\"), hasActionBar), _defineProperty(_cx4, \"\".concat(blockClass, \"__title-row--has-page-actions\"), pageActions !== undefined), _defineProperty(_cx4, \"\".concat(blockClass, \"__title-row--sticky\"), pageActions !== undefined && actionBarItems === undefined && hasBreadcrumbRow), _cx4))\n  }, /*#__PURE__*/React.createElement(Column, {\n    className: \"\".concat(blockClass, \"__title-column\")\n  }, title !== undefined ? /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(\"\".concat(blockClass, \"__title\"), _defineProperty({}, \"\".concat(blockClass, \"__title--fades\"), hasBreadcrumbRow))\n  }, TitleIcon && !titleLoading ? /*#__PURE__*/React.createElement(TitleIcon, {\n    className: \"\".concat(blockClass, \"__title-icon\")\n  }) : null, /*#__PURE__*/React.createElement(\"span\", {\n    title: !titleLoading ? titleText : null\n  }, titleLoading ? /*#__PURE__*/React.createElement(SkeletonText, {\n    className: \"\".concat(blockClass, \"__title-skeleton\")\n  }) : titleText)) : null), pageActions !== undefined ? /*#__PURE__*/React.createElement(Column, {\n    className: cx(\"\".concat(blockClass, \"__page-actions\"), _defineProperty({}, \"\".concat(blockClass, \"__page-actions--in-breadcrumb\"), pageActionsInBreadcrumbRow))\n  }, /*#__PURE__*/React.createElement(ButtonSetWithOverflow, {\n    className: \"\".concat(blockClass, \"__page-actions-container\"),\n    onWidthChange: handleButtonSetWidthChange,\n    buttons: pageActionsItemArray\n  })) : null) : null, subtitle !== undefined ? /*#__PURE__*/React.createElement(Row, {\n    className: \"\".concat(blockClass, \"__subtitle-row\")\n  }, /*#__PURE__*/React.createElement(Column, {\n    className: \"\".concat(blockClass, \"__subtitle\")\n  }, subtitle)) : null, availableSpace !== undefined ? /*#__PURE__*/React.createElement(Row, {\n    className: \"\".concat(blockClass, \"__available-row\")\n  }, /*#__PURE__*/React.createElement(Column, {\n    className: \"\".concat(blockClass, \"__available-column\")\n  }, availableSpace)) : null, (breadcrumbItems || actionBarItems || title || pageActions || availableSpace || subtitle) && /*#__PURE__*/React.createElement(\"div\", {\n    className: cx([\"\".concat(blockClass, \"__last-row-buffer\"), _defineProperty({}, \"\".concat(blockClass, \"__last-row-buffer--active\"), lastRowBufferActive)])\n  }), // this navigation row scrolls under the breadcrumb if there is one\n  tags && !navigation ? /*#__PURE__*/React.createElement(Row, {\n    className: cx(\"\".concat(blockClass, \"__navigation-row\"), _defineProperty({}, \"\".concat(blockClass, \"__navigation-row--has-tags\"), tags))\n  }, /*#__PURE__*/React.createElement(Column, {\n    className: cx(\"\".concat(blockClass, \"__navigation-tags\"), _defineProperty({}, \"\".concat(blockClass, \"__navigation-tags--tags-only\"), navigation === undefined))\n  }, /*#__PURE__*/React.createElement(TagSet, _extends({\n    overflowAlign: \"end\"\n  }, tempTagSetOverflowProps, {\n    tags: tags\n  })))) : null), // this navigation pushes the breadcrumb off or settles underneath it depending on preventBreadcrumbScroll\n  navigation ? /*#__PURE__*/React.createElement(Row, {\n    className: cx(\"\".concat(blockClass, \"__navigation-row\"), (_cx9 = {}, _defineProperty(_cx9, \"\".concat(blockClass, \"__navigation-row--spacing-above-06\"), navigation !== undefined), _defineProperty(_cx9, \"\".concat(blockClass, \"__navigation-row--has-tags\"), tags), _cx9))\n  }, /*#__PURE__*/React.createElement(Column, {\n    className: \"\".concat(blockClass, \"__navigation-tabs\")\n  }, navigation), tags !== undefined ? /*#__PURE__*/React.createElement(Column, {\n    className: cx(\"\".concat(blockClass, \"__navigation-tags\"), _defineProperty({}, \"\".concat(blockClass, \"__navigation-tags--tags-only\"), navigation === undefined))\n  }, /*#__PURE__*/React.createElement(TagSet, _extends({\n    overflowAlign: \"end\"\n  }, tempTagSetOverflowProps, {\n    tags: tags\n  }))) : null) : null), hasCollapseButton ? /*#__PURE__*/React.createElement(Button, {\n    className: cx(\"\".concat(blockClass, \"__collapse-expand-toggle\"), _defineProperty({}, \"\".concat(blockClass, \"__collapse-expand-toggle--collapsed\"), fullyCollapsed)),\n    \"data-collapse\": fullyCollapsed ? 'collapsed' : 'not collapsed',\n    hasIconOnly: true,\n    iconDescription: fullyCollapsed ? expandHeaderLabel : collapseHeaderLabel,\n    kind: \"ghost\",\n    onClick: handleCollapseToggle,\n    renderIcon: ChevronUp16,\n    size: \"field\",\n    tooltipPosition: \"bottom\",\n    tooltipAlignment: \"end\",\n    type: \"button\"\n  }) : null));\n}); // Return a placeholder if not released and not enabled by feature flag\n\nPageHeader = pkg.checkComponentEnabled(PageHeader, componentName); // copied from carbon-components-react/src/components/Tag/Tag.js for DocGen\n\nvar TYPES = {\n  red: 'Red',\n  magenta: 'Magenta',\n  purple: 'Purple',\n  blue: 'Blue',\n  cyan: 'Cyan',\n  teal: 'Teal',\n  green: 'Green',\n  gray: 'Gray',\n  'cool-gray': 'Cool-Gray',\n  'warm-gray': 'Warm-Gray',\n  'high-contrast': 'High-Contrast'\n};\nvar tagTypes = Object.keys(TYPES);\nPageHeader.propTypes = {\n  /**\n   * Specifies the action bar items. Each item is specified as an object\n   * with the properties of a Carbon Button in icon only form. Button kind, size, tooltipPosition,\n   * tooltipAlignment and type are ignored.\n   */\n  actionBarItems: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape(_objectSpread(_objectSpread({}, prepareProps(Button.propTypes, ['kind', 'size', 'tooltipPosition', 'tooltipAlignment'])), {}, {\n    iconDescription: PropTypes.string.isRequired,\n    onClick: Button.propTypes.onClick,\n    renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired\n  }))), deprecatePropUsage(PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element]), 'Expects an array of objects with the following properties: iconDescription, renderIcon and onClick.')]),\n  // expects action bar item as array or in fragment\n\n  /**\n   * A zone for placing high-level, client content above the page tabs.\n   * Accepts arbitrary renderable content as a React node. Optional.\n   */\n  availableSpace: PropTypes.node,\n\n  /**\n   * Specifies if the PageHeader should have a background color or not.\n   * Optional.\n   */\n  background: PropTypes.bool,\n\n  /**\n   * One or more Carbon BreadcrumbItem components, passed in as React element(s).\n   * If provided, these are rendered at the top left of the header as\n   * a breadcrumb. Optional.\n   */\n  breadcrumbItems: PropTypes.element,\n  // expects BreadcrumbItems,\n\n  /**\n   * Specifies class(es) to be applied to the top-level PageHeader node.\n   * Optional.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The header can as a whole be collapsed, expanded or somewhere in between.\n   * This setting controls the initial value, but also takes effect on change\n   *\n   * NOTE: The header is collapsed by setting the scroll position to hide part of the header. Collapsing has no effect if there is insufficient content to scroll.\n   */\n  collapseHeader: PropTypes.bool,\n\n  /**\n   * Label/assistive text for the collapse/expand button\n   * Default 'Collapse'\n   */\n  collapseHeaderLabel: PropTypes.string,\n\n  /**\n   * Enable the collapse header toggle.\n   *\n   * NOTE: The header is collapsed by setting the scroll position to hide part of the header. Collapsing has no effect if there is insufficient content to scroll.\n   */\n  collapseHeaderToggleWanted: PropTypes.bool,\n\n  /**\n   * Label/assistive text for the collapse/expand button\n   * Default 'Expand'\n   */\n  expandHeaderLabel: PropTypes.string,\n\n  /**\n   * Content for the navigation area in the PageHeader. Should\n   * be a React element that is normally a Carbon Tabs component. Optional.\n   */\n  navigation: PropTypes.element,\n  // Supports Tabs\n\n  /**\n   * Specifies the primary page actions. Each action is specified as an object\n   * with the properties of a Carbon Button plus:\n   * - label: node\n   *\n   * Carbon Button API https://react.carbondesignsystem.com/?path=/docs/components-button--default#component-api\n   */\n  pageActions: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape(_objectSpread(_objectSpread({}, Button.propTypes), {}, {\n    kind: Button.propTypes.kind,\n    label: PropTypes.node.isRequired,\n    onClick: Button.propTypes.onClick\n  }))), deprecatePropUsage(PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element]), 'Expects an array of objects with the following properties: label and onClick.')]),\n\n  /**\n   * Number of pixels the page header sits from the top of the screen.\n   * The nature of the pageHeader makes this hard to measure\n   */\n  pageHeaderOffset: PropTypes.number,\n\n  /**\n   * The title row typically starts below the breadcrumb row. This option\n   * preCollapses it into the breadcrumb row.\n   */\n  preCollapseTitleRow: PropTypes.bool,\n\n  /**\n   * Standard behavior scrolls the breadcrumb off to leave just tabs. This\n   * option preserves vertical space for both.\n   */\n  preventBreadcrumbScroll: PropTypes.bool,\n\n  /**\n   * A subtitle or description that provides additional context to\n   * identify the current page. Optional.\n   */\n  subtitle: PropTypes.string,\n\n  /**\n   * The tags to be shown in the PageHeader. Each tag is specified as an object\n   * with properties: **label**\\* (required) to supply the tag content, and\n   * other properties will be passed to the Carbon Tag component, such as\n   * **type**, **disabled**, **ref**, **className** , and any other Tag props.\n   * NOTE: **filter** is not supported. Any other fields in the object will be passed through to the HTML element\n   * as HTML attributes.\n   *\n   * See https://react.carbondesignsystem.com/?path=/docs/components-tag--default\n   */\n  tags: PropTypes.arrayOf(PropTypes.shape(_objectSpread(_objectSpread({}, prepareProps(Tag.propTypes, 'filter')), {}, {\n    label: PropTypes.string.isRequired,\n    // we duplicate this prop to improve the DocGen\n    type: PropTypes.oneOf(tagTypes)\n  }))),\n\n  /**\n   * The title of the page.\n   * Optional string or object with the following attributes: text, icon, loading\n   */\n  title: PropTypes.oneOfType([PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    icon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    loading: PropTypes.bool\n  }), PropTypes.string]),\n\n  /**\n   * An icon to be included to the left of the title text.\n   * Optional.\n   */\n  titleIcon: deprecateProp(PropTypes.oneOfType([PropTypes.func, PropTypes.object]), 'Use `title` prop shape instead.')\n};\nPageHeader.defaultProps = {\n  background: true,\n  className: '',\n  collapseHeaderLabel: 'Collapse',\n  expandHeaderLabel: 'Expand',\n  preventBreadcrumbScroll: false,\n  pageHeaderOffset: 0,\n  preCollapseTitleRow: false\n};\nPageHeader.displayName = componentName;","map":null,"metadata":{},"sourceType":"module"}