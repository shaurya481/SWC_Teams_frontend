{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"className\", \"maxVisible\", \"rightAlign\", \"overflowAlign\", \"overflowClassName\", \"overflowDirection\", \"allTagsModalTitle\", \"allTagsModalSearchLabel\", \"allTagsModalSearchPlaceholderText\", \"showAllTagsLabel\", \"tags\"],\n    _excluded2 = [\"label\"],\n    _excluded3 = [\"label\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} //\n// Copyright IBM Corp. 2020, 2021\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { TagSetOverflow } from './TagSetOverflow';\nimport { TagSetModal } from './TagSetModal';\nimport { Tag } from 'carbon-components-react';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { pkg } from '../../settings';\nimport { prepareProps, isRequiredIf } from '../../global/js/utils/props-helper';\nvar componentName = 'TagSet';\nvar blockClass = \"\".concat(pkg.prefix, \"--tag-set\");\nvar allTagsModalSearchThreshold = 10;\nexport var TagSet = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var className = _ref.className,\n      maxVisible = _ref.maxVisible,\n      rightAlign = _ref.rightAlign,\n      overflowAlign = _ref.overflowAlign,\n      overflowClassName = _ref.overflowClassName,\n      overflowDirection = _ref.overflowDirection,\n      allTagsModalTitle = _ref.allTagsModalTitle,\n      allTagsModalSearchLabel = _ref.allTagsModalSearchLabel,\n      allTagsModalSearchPlaceholderText = _ref.allTagsModalSearchPlaceholderText,\n      showAllTagsLabel = _ref.showAllTagsLabel,\n      tags = _ref.tags,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(3),\n      _useState2 = _slicedToArray(_useState, 2),\n      displayCount = _useState2[0],\n      setDisplayCount = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      displayedTags = _useState4[0],\n      setDisplayedTags = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      hiddenSizingTags = _useState6[0],\n      setHiddenSizingTags = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showAllModalOpen = _useState8[0],\n      setShowAllModalOpen = _useState8[1];\n\n  var localTagSetRef = useRef(null);\n  var tagSetRef = ref || localTagSetRef;\n  var displayedArea = useRef(null);\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      sizingTags = _useState10[0],\n      setSizingTags = _useState10[1];\n\n  var overflowTag = useRef(null);\n\n  var handleShowAllClick = function handleShowAllClick() {\n    setShowAllModalOpen(true);\n  };\n\n  useEffect(function () {\n    var newSizingTags = []; // create sizing tags\n\n    setHiddenSizingTags(tags && tags.length > 0 ? tags.map(function (_ref2, index) {\n      var label = _ref2.label,\n          other = _objectWithoutProperties(_ref2, _excluded2);\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: \"\".concat(blockClass, \"__sizing-tag\"),\n        ref: function ref(el) {\n          return newSizingTags[index] = el;\n        }\n      }, /*#__PURE__*/React.createElement(Tag, _extends({}, other, {\n        filter: false\n      }), label));\n    }) : []);\n    setSizingTags(newSizingTags);\n  }, [tags]);\n  useEffect(function () {\n    // create visible and overflow tags\n    var newDisplayedTags = tags && tags.length > 0 ? tags.map(function (_ref3, index) {\n      var label = _ref3.label,\n          other = _objectWithoutProperties(_ref3, _excluded3);\n\n      return /*#__PURE__*/React.createElement(Tag, _extends({}, other, {\n        filter: false,\n        key: \"displayed-tag-\".concat(index)\n      }), label);\n    }) : []; // separate out tags for the overflow\n\n    var newOverflowTags = newDisplayedTags.splice(displayCount, newDisplayedTags.length - displayCount); // add wrapper around displayed tags\n\n    newDisplayedTags = newDisplayedTags.map(function (tag, index) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: \"\".concat(blockClass, \"__displayed-tag\")\n      }, tag);\n    });\n    newDisplayedTags.push( /*#__PURE__*/React.createElement(TagSetOverflow, {\n      allTagsModalSearchThreshold: allTagsModalSearchThreshold,\n      className: overflowClassName,\n      onShowAllClick: handleShowAllClick,\n      overflowTags: newOverflowTags,\n      overflowAlign: overflowAlign,\n      overflowDirection: overflowDirection,\n      showAllTagsLabel: showAllTagsLabel,\n      key: \"displayed-tag-overflow\",\n      ref: overflowTag\n    }));\n    setDisplayedTags(newDisplayedTags);\n  }, [displayCount, overflowAlign, overflowClassName, overflowDirection, showAllTagsLabel, tags]);\n  var checkFullyVisibleTags = useCallback(function () {\n    // how many will fit?\n    var willFit = 0;\n\n    if (sizingTags.length > 0) {\n      var spaceAvailable = tagSetRef.current.offsetWidth;\n\n      for (var i in sizingTags) {\n        var tagWidth = sizingTags[i].offsetWidth;\n\n        if (spaceAvailable >= tagWidth) {\n          spaceAvailable -= tagWidth;\n          willFit += 1;\n        } else {\n          break;\n        }\n      }\n\n      if (willFit < sizingTags.length) {\n        while (willFit > 0 && spaceAvailable < overflowTag.current.offsetWidth) {\n          // Highly unlikely any useful tag is smaller\n          willFit -= 1; // remove one tag\n\n          spaceAvailable += sizingTags[willFit].offsetWidth;\n        }\n      }\n    }\n\n    if (willFit < 1) {\n      setDisplayCount(0);\n    } else {\n      setDisplayCount(maxVisible ? Math.min(willFit, maxVisible) : willFit);\n    }\n  }, [maxVisible, sizingTags, tagSetRef]);\n  useEffect(function () {\n    checkFullyVisibleTags();\n  }, [checkFullyVisibleTags, maxVisible, sizingTags]);\n  /* don't know how to test resize */\n\n  /* istanbul ignore next */\n\n  var handleResize = function handleResize() {\n    /* istanbul ignore next */\n    // not sure how to test resize\n    checkFullyVisibleTags();\n  };\n  /* don't know how to test resize */\n\n  /* istanbul ignore next */\n\n\n  var handleSizerTagsResize = function handleSizerTagsResize() {\n    /* istanbul ignore next */\n    // not sure how to test resize\n    checkFullyVisibleTags();\n  };\n\n  var handleModalClose = function handleModalClose() {\n    setShowAllModalOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(ReactResizeDetector, {\n    onResize: handleResize\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    className: cx([blockClass, className]),\n    ref: tagSetRef\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: cx([\"\".concat(blockClass, \"__space\"), _defineProperty({}, \"\".concat(blockClass, \"__space--right\"), rightAlign)])\n  }, /*#__PURE__*/React.createElement(ReactResizeDetector, {\n    onResize: handleSizerTagsResize\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__tag-container \").concat(blockClass, \"__tag-container--hidden\"),\n    \"aria-hidden\": true\n  }, hiddenSizingTags)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__tag-container\"),\n    ref: displayedArea\n  }, displayedTags)), tags && displayCount < tags.length ? /*#__PURE__*/React.createElement(TagSetModal, {\n    allTags: tags,\n    open: showAllModalOpen,\n    title: allTagsModalTitle,\n    onClose: handleModalClose,\n    searchLabel: allTagsModalSearchLabel,\n    searchPlaceholder: allTagsModalSearchPlaceholderText\n  }) : null));\n}); // Return a placeholder if not released and not enabled by feature flag\n\nTagSet = pkg.checkComponentEnabled(TagSet, componentName);\n/**\n * The strings shown in the showAllModal are only shown if we have more than allTagsModalSearchLThreshold\n * @returns null if no problems\n */\n\nvar string_required_if_more_than_10_tags = isRequiredIf(PropTypes.string, function (_ref5) {\n  var tags = _ref5.tags;\n  return tags && tags.length > allTagsModalSearchThreshold;\n}); // copied from carbon-components-react/src/components/Tag/Tag.js for DocGen\n\nvar TYPES = {\n  red: 'Red',\n  magenta: 'Magenta',\n  purple: 'Purple',\n  blue: 'Blue',\n  cyan: 'Cyan',\n  teal: 'Teal',\n  green: 'Green',\n  gray: 'Gray',\n  'cool-gray': 'Cool-Gray',\n  'warm-gray': 'Warm-Gray',\n  'high-contrast': 'High-Contrast'\n};\nvar tagTypes = Object.keys(TYPES);\nTagSet.types = tagTypes;\nTagSet.propTypes = {\n  /**\n   * label text for the show all search. **Note: Required if more than 10 tags**\n   */\n  allTagsModalSearchLabel: string_required_if_more_than_10_tags,\n\n  /**\n   * placeholder text for the show all search. **Note: Required if more than 10 tags**\n   */\n  allTagsModalSearchPlaceholderText: string_required_if_more_than_10_tags,\n\n  /**\n   * title for the show all modal. **Note: Required if more than 10 tags**\n   */\n  allTagsModalTitle: string_required_if_more_than_10_tags,\n\n  /**\n   * className\n   */\n  className: PropTypes.string,\n\n  /**\n   * maximum visible tags\n   */\n  maxVisible: PropTypes.number,\n\n  /**\n   * overflowAlign from the standard tooltip\n   */\n  overflowAlign: PropTypes.oneOf(['start', 'center', 'end']),\n\n  /**\n   * overflowClassName for the tooltip popup\n   */\n  overflowClassName: PropTypes.string,\n\n  /**\n   * overflowDirection from the standard tooltip\n   */\n  overflowDirection: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n\n  /**\n   * align tags to right of available space\n   */\n  rightAlign: PropTypes.bool,\n\n  /**\n   * label for the overflow show all tags link.\n   *\n   * **Note:** Required if more than 10 tags\n   */\n  showAllTagsLabel: string_required_if_more_than_10_tags,\n\n  /**\n   * The tags to be shown in the TagSet. Each tag is specified as an object\n   * with properties: **label**\\* (required) to supply the tag content, and\n   * other properties will be passed to the Carbon Tag component, such as\n   * **type**, **disabled**, **ref**, **className** , and any other Tag props.\n   * NOTE: **filter** is not supported. Any other fields in the object will be passed through to the HTML element\n   * as HTML attributes.\n   *\n   * See https://react.carbondesignsystem.com/?path=/docs/components-tag--default\n   */\n  tags: PropTypes.arrayOf(PropTypes.shape(_objectSpread(_objectSpread({}, prepareProps(Tag.propTypes, 'filter')), {}, {\n    label: PropTypes.string.isRequired,\n    // we duplicate this prop to improve the DocGen\n    type: PropTypes.oneOf(tagTypes)\n  })))\n};\nTagSet.defaultProps = {\n  overflowAlign: 'center',\n  overflowDirection: 'bottom'\n};\nTagSet.displayName = componentName;\nexport default TagSet;","map":null,"metadata":{},"sourceType":"module"}