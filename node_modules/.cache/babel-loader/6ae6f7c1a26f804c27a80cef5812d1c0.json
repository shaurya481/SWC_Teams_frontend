{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport { Close16, WarningFilled16, CheckmarkFilled16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Loading from '../Loading';\nvar prefix = settings.prefix;\n\nfunction Filename(_ref) {\n  var iconDescription = _ref.iconDescription,\n      status = _ref.status,\n      invalid = _ref.invalid,\n      rest = _objectWithoutProperties(_ref, [\"iconDescription\", \"status\", \"invalid\"]);\n\n  switch (status) {\n    case 'uploading':\n      return /*#__PURE__*/React.createElement(Loading, {\n        description: iconDescription,\n        small: true,\n        withOverlay: false\n      });\n\n    case 'edit':\n      return /*#__PURE__*/React.createElement(React.Fragment, null, invalid && /*#__PURE__*/React.createElement(WarningFilled16, {\n        className: \"\".concat(prefix, \"--file-invalid\")\n      }), /*#__PURE__*/React.createElement(\"button\", _extends({\n        \"aria-label\": iconDescription,\n        className: \"\".concat(prefix, \"--file-close\"),\n        type: \"button\"\n      }, rest), /*#__PURE__*/React.createElement(Close16, null)));\n\n    case 'complete':\n      return /*#__PURE__*/React.createElement(CheckmarkFilled16, _extends({\n        \"aria-label\": iconDescription,\n        className: \"\".concat(prefix, \"--file-complete\")\n      }, rest), iconDescription && /*#__PURE__*/React.createElement(\"title\", null, iconDescription));\n\n    default:\n      return null;\n  }\n}\n\nFilename.propTypes = {\n  /**\n   * Provide a description of the SVG icon to denote file upload status\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify if the file is invalid\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Status of the file upload\n   */\n  status: PropTypes.oneOf(['edit', 'complete', 'uploading']),\n\n  /**\n   * Provide a custom tabIndex value for the <Filename>\n   */\n  tabIndex: PropTypes.string\n};\nFilename.defaultProps = {\n  iconDescription: 'Uploading file',\n  status: 'uploading',\n  tabIndex: '0'\n};\nexport default Filename;","map":null,"metadata":{},"sourceType":"module"}