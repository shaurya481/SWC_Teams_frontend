{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"label\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} //\n// Copyright IBM Corp. 2021, 2020\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ComposedModal, ModalHeader, ModalBody, Search, Tag } from 'carbon-components-react';\nimport { pkg } from '../../settings';\nimport { prepareProps } from '../../global/js/utils/props-helper';\nvar componentName = 'TagSetModal';\nvar blockClass = \"\".concat(pkg.prefix, \"--tag-set-modal\");\nexport var TagSetModal = function TagSetModal(_ref) {\n  var allTags = _ref.allTags,\n      title = _ref.title,\n      onClose = _ref.onClose,\n      open = _ref.open,\n      searchLabel = _ref.searchLabel,\n      searchPlaceholder = _ref.searchPlaceholder;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      filteredModalTags = _useState2[0],\n      setFilteredModalTags = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      search = _useState4[0],\n      setSearch = _useState4[1];\n\n  useEffect(function () {\n    var newFilteredModalTags = [];\n\n    if (open) {\n      if (search === '') {\n        newFilteredModalTags = allTags.slice(0);\n      } else {\n        var lCaseSearch = search.toLocaleLowerCase();\n        allTags.forEach(function (tag) {\n          var _tag$dataSearch, _tag$dataSearch$toLoc, _tag$label, _tag$label$toLocaleLo;\n\n          var dataSearch = (_tag$dataSearch = tag['data-search']) === null || _tag$dataSearch === void 0 ? void 0 : (_tag$dataSearch$toLoc = _tag$dataSearch.toLocaleLowerCase()) === null || _tag$dataSearch$toLoc === void 0 ? void 0 : _tag$dataSearch$toLoc.indexOf(lCaseSearch);\n          var labelSearch = (_tag$label = tag.label) === null || _tag$label === void 0 ? void 0 : (_tag$label$toLocaleLo = _tag$label.toLocaleLowerCase()) === null || _tag$label$toLocaleLo === void 0 ? void 0 : _tag$label$toLocaleLo.indexOf(lCaseSearch);\n\n          if (dataSearch > -1 || labelSearch > -1) {\n            newFilteredModalTags.push(tag);\n          }\n        });\n      }\n    }\n\n    setFilteredModalTags(newFilteredModalTags);\n  }, [allTags, open, search]);\n\n  var handleSearch = function handleSearch(ev) {\n    setSearch(ev.target.value || '');\n  };\n\n  return /*#__PURE__*/React.createElement(ComposedModal, {\n    containerClassName: \"\".concat(blockClass, \"__container\"),\n    className: \"\".concat(blockClass),\n    size: \"sm\",\n    open: open,\n    onClose: onClose\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    title: title,\n    className: \"\".concat(blockClass, \"__header\")\n  }, /*#__PURE__*/React.createElement(Search, {\n    \"data-modal-primary-focus\": true,\n    className: \"\".concat(blockClass, \"__search\"),\n    labelText: searchLabel,\n    placeholder: searchPlaceholder,\n    onChange: handleSearch,\n    size: \"lg\"\n  })), /*#__PURE__*/React.createElement(ModalBody, {\n    className: \"\".concat(blockClass, \"__body\"),\n    hasForm: true\n  }, filteredModalTags.map(function (_ref2, index) {\n    var label = _ref2.label,\n        other = _objectWithoutProperties(_ref2, _excluded);\n\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, other, {\n      filter: false,\n      key: \"all-tags-\".concat(index)\n    }), label);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__fade\")\n  }));\n};\nTagSetModal.propTypes = {\n  allTags: PropTypes.arrayOf(PropTypes.shape(_objectSpread(_objectSpread({}, prepareProps(Tag.propTypes, 'filter')), {}, {\n    label: PropTypes.string.isRequired\n  }))),\n  onClose: PropTypes.func,\n  open: PropTypes.bool,\n  searchLabel: PropTypes.string,\n  searchPlaceholder: PropTypes.string,\n  title: PropTypes.string\n};\nTagSetModal.defaultProps = {\n  // marked as required by TagSet if needed, default used to satisfy <Search /> component\n  searchLabel: ''\n};\nTagSetModal.displayName = componentName;","map":null,"metadata":{},"sourceType":"module"}