{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport trackBlur from '../../globals/js/mixins/track-blur';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nvar toArray = function toArray(arrayLike) {\n  return Array.prototype.slice.call(arrayLike);\n};\n\nvar Dropdown = /*#__PURE__*/function (_mixin) {\n  _inherits(Dropdown, _mixin);\n\n  var _super = _createSuper(Dropdown);\n  /**\n   * A selector with drop downs.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends TrackBlur\n   * @param {HTMLElement} element The element working as a selector.\n   * @param {object} [options] The component options.\n   * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n   * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n   * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n   * @param {string} [options.classOpen] The CSS class for the open state.\n   * @param {string} [options.classDisabled] The CSS class for the disabled state.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a drop down item is selected.\n   *   Cancellation of this event stops selection of drop down item.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n   */\n\n  /**\n   * A selector with drop downs.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends TrackBlur\n   * @param {HTMLElement} element The element working as a selector.\n   * @param {object} [options] The component options.\n   * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n   * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n   * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n   * @param {string} [options.classOpen] The CSS class for the open state.\n   * @param {string} [options.classDisabled] The CSS class for the disabled state.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a drop down item is selected.\n   *   Cancellation of this event stops selection of drop down item.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n   */\n\n\n  function Dropdown(element, options) {\n    var _this;\n\n    _classCallCheck(this, Dropdown);\n\n    _this = _super.call(this, element, options);\n\n    _this.manage(on(_this.element.ownerDocument, 'click', function (event) {\n      _this._toggle(event);\n    }));\n\n    _this.manage(on(_this.element, 'keydown', function (event) {\n      _this._handleKeyDown(event);\n    }));\n\n    _this.manage(on(_this.element, 'click', function (event) {\n      var item = eventMatches(event, _this.options.selectorItem);\n\n      if (item) {\n        _this.select(item);\n      }\n    })); // When using the active descendant approach we use a class to give focus styles during keyboard (up/down arrows)\n    // navigation instead of relying on the :focus selector. This leaves the potential to have multiple items when\n    // switching interactions between keyboard and mouse users. To more closely align with Carbon React implementation,\n    // we want the focus class to move as the user hovers over items. This also updates the location of focus based on\n    // the last hovered item if the user switches back to using the keyboard.\n    // When using the active descendant approach we use a class to give focus styles during keyboard (up/down arrows)\n    // navigation instead of relying on the :focus selector. This leaves the potential to have multiple items when\n    // switching interactions between keyboard and mouse users. To more closely align with Carbon React implementation,\n    // we want the focus class to move as the user hovers over items. This also updates the location of focus based on\n    // the last hovered item if the user switches back to using the keyboard.\n\n\n    if ( // NOTE: `selectorTrigger` does NOT match the trigger button in older markup\n    _this.element.querySelector(_this.options.selectorTrigger) && _this.element.querySelector(_this.options.selectorMenu)) {\n      // Using the latest HTML structure that supports the aria-activedescendant attribute\n      _this.manage(on(_this.element, 'mouseover', function (event) {\n        var item = eventMatches(event, _this.options.selectorItem);\n\n        if (item) {\n          _this._updateFocus(item);\n        }\n      }));\n    }\n\n    return _this;\n  }\n  /**\n   * Handles keydown event.\n   * @param {Event} event The event triggering this method.\n   */\n\n  /**\n   * Handles keydown event.\n   * @param {Event} event The event triggering this method.\n   */\n\n\n  _createClass(Dropdown, [{\n    key: \"_handleKeyDown\",\n    value: function _handleKeyDown(event) {\n      var isOpen = this.element.classList.contains(this.options.classOpen);\n      var direction = {\n        38: this.constructor.NAVIGATE.BACKWARD,\n        40: this.constructor.NAVIGATE.FORWARD\n      }[event.which];\n\n      if (isOpen && direction !== undefined) {\n        this.navigate(direction);\n        event.preventDefault(); // Prevents up/down keys from scrolling container\n      } else {\n        // get selected item\n        // in v10.0, the anchor elements fire click events on Enter keypress when a dropdown item is selected\n        // in v10.5 (#3586), focus is no longer placed on the dropdown items and is instead kept fixed on the ul menu\n        // so we need to manually call getCurrentNavigation and select the item\n        var item = this.getCurrentNavigation();\n\n        if (item && isOpen && (event.which === 13 || event.which === 32) && !this.element.ownerDocument.activeElement.matches(this.options.selectorItem)) {\n          event.preventDefault();\n          this.select(item);\n        }\n\n        this._toggle(event);\n      }\n    }\n    /**\n     * When using aria-activedescendant we want to make sure attributes and classes\n     * are properly cleaned up when the dropdown is closed\n     * @private\n     */\n\n  }, {\n    key: \"_focusCleanup\",\n    value: function _focusCleanup() {\n      // NOTE: `selectorTrigger` does NOT match the trigger button in older markup\n      var triggerNode = this.element.querySelector(this.options.selectorTrigger); // only want to grab the listNode IF it's using the latest a11y HTML structure\n      // only want to grab the listNode IF it's using the latest a11y HTML structure\n\n      var listNode = triggerNode ? this.element.querySelector(this.options.selectorMenu) : null;\n\n      if (listNode) {\n        listNode.removeAttribute('aria-activedescendant');\n        var focusedItem = this.element.querySelector(this.options.selectorItemFocused);\n\n        if (focusedItem) {\n          focusedItem.classList.remove(this.options.classFocused);\n        }\n      }\n    }\n    /**\n     * Update focus using aria-activedescendant HTML structure\n     * @param {HTMLElement} itemToFocus The element to be focused.\n     */\n\n  }, {\n    key: \"_updateFocus\",\n    value: function _updateFocus(itemToFocus) {\n      // NOTE: `selectorTrigger` does NOT match the trigger button in older markup\n      var triggerNode = this.element.querySelector(this.options.selectorTrigger); // only want to grab the listNode IF it's using the latest a11y HTML structure\n      // only want to grab the listNode IF it's using the latest a11y HTML structure\n\n      var listNode = triggerNode ? this.element.querySelector(this.options.selectorMenu) : null;\n      var previouslyFocused = listNode.querySelector(this.options.selectorItemFocused);\n      itemToFocus.classList.add(this.options.classFocused);\n      listNode.setAttribute('aria-activedescendant', itemToFocus.id);\n\n      if (previouslyFocused) {\n        previouslyFocused.classList.remove(this.options.classFocused);\n      }\n    }\n    /**\n     * Opens and closes the dropdown menu.\n     * @param {Event} [event] The event triggering this method.\n     *\n     * @todo https://github.com/carbon-design-system/carbon/issues/3641\n     */\n\n  }, {\n    key: \"_toggle\",\n    value: function _toggle(event) {\n      var _this2 = this;\n\n      var isDisabled = this.element.classList.contains(this.options.classDisabled);\n\n      if (isDisabled) {\n        return;\n      } // NOTE: `selectorTrigger` does NOT match the trigger button in older markup\n      // NOTE: `selectorTrigger` does NOT match the trigger button in older markup\n\n\n      var triggerNode = this.element.querySelector(this.options.selectorTrigger);\n\n      if ( // User presses down arrow\n      event.which === 40 && !event.target.matches(this.options.selectorItem) || // User presses space or enter and the trigger is not a button OR event is not fired by trigger\n      (!triggerNode || !triggerNode.contains(event.target)) && [13, 32].indexOf(event.which) >= 0 && !event.target.matches(this.options.selectorItem) || // User presses esc\n      event.which === 27 || // User clicks\n      event.type === 'click') {\n        var isOpen = this.element.classList.contains(this.options.classOpen);\n        var isOfSelf = this.element.contains(event.target); // Determine if the open className should be added, removed, or toggled\n        // Determine if the open className should be added, removed, or toggled\n\n        var actions = {\n          add: isOfSelf && event.which === 40 && !isOpen,\n          remove: (!isOfSelf || event.which === 27) && isOpen,\n          toggle: isOfSelf && event.which !== 27 && event.which !== 40\n        };\n        var changedState = false;\n        Object.keys(actions).forEach(function (action) {\n          if (actions[action]) {\n            changedState = true;\n\n            _this2.element.classList[action](_this2.options.classOpen);\n          }\n        });\n        var listItems = toArray(this.element.querySelectorAll(this.options.selectorItem)); // only want to grab the listNode IF it's using the latest a11y HTML structure\n        // only want to grab the listNode IF it's using the latest a11y HTML structure\n\n        var listNode = triggerNode ? this.element.querySelector(this.options.selectorMenu) : null; // @todo remove conditionals for elements existing once legacy structure is depreciated\n        // @todo remove conditionals for elements existing once legacy structure is depreciated\n\n        if (changedState && this.element.classList.contains(this.options.classOpen)) {\n          // toggled open\n          if (triggerNode) {\n            triggerNode.setAttribute('aria-expanded', 'true');\n          }\n\n          (listNode || this.element).focus();\n\n          if (listNode) {\n            var selectedNode = listNode.querySelector(this.options.selectorLinkSelected);\n            listNode.setAttribute('aria-activedescendant', (selectedNode || listItems[0]).id);\n            (selectedNode || listItems[0]).classList.add(this.options.classFocused);\n          }\n        } else if (changedState && (isOfSelf || actions.remove)) {\n          // toggled close\n          // timer is used to call focus AFTER the click event on\n          // trigger button (which is caused by keypress e.g. during keyboard navigation)\n          setTimeout(function () {\n            return (triggerNode || _this2.element).focus();\n          }, 0);\n\n          if (triggerNode) {\n            triggerNode.setAttribute('aria-expanded', 'false');\n          }\n\n          this._focusCleanup();\n        } // @todo remove once legacy structure is depreciated\n        // @todo remove once legacy structure is depreciated\n\n\n        if (!triggerNode) {\n          listItems.forEach(function (item) {\n            if (_this2.element.classList.contains(_this2.options.classOpen)) {\n              item.tabIndex = 0;\n            } else {\n              item.tabIndex = -1;\n            }\n          });\n        }\n\n        var menuListNode = this.element.querySelector(this.options.selectorMenu);\n\n        if (menuListNode) {\n          menuListNode.tabIndex = this.element.classList.contains(this.options.classOpen) ? '0' : '-1';\n        }\n      }\n    }\n    /**\n     * @returns {Element} Currently highlighted element.\n     */\n\n  }, {\n    key: \"getCurrentNavigation\",\n    value: function getCurrentNavigation() {\n      var focusedNode; // Using the latest semantic markup structure where trigger is a button\n      // @todo remove conditional once legacy structure is depreciated\n      // NOTE: `selectorTrigger` does NOT match the trigger button in older markup\n      // Using the latest semantic markup structure where trigger is a button\n      // @todo remove conditional once legacy structure is depreciated\n      // NOTE: `selectorTrigger` does NOT match the trigger button in older markup\n\n      if (this.element.querySelector(this.options.selectorTrigger)) {\n        var listNode = this.element.querySelector(this.options.selectorMenu);\n        var focusedId = listNode.getAttribute('aria-activedescendant');\n        focusedNode = focusedId ? listNode.querySelector(\"#\".concat(focusedId)) : null;\n      } else {\n        var focused = this.element.ownerDocument.activeElement;\n        focusedNode = focused.nodeType === Node.ELEMENT_NODE && focused.matches(this.options.selectorItem) ? focused : null;\n      }\n\n      return focusedNode;\n    }\n    /**\n     * Moves up/down the focus.\n     * @param {number} direction The direction of navigating.\n     */\n    // @todo create issue it's a better UX to move the focus when the user hovers so they stay in sync\n\n  }, {\n    key: \"navigate\",\n    value: function navigate(direction) {\n      var items = toArray(this.element.querySelectorAll(this.options.selectorItem));\n      var start = this.getCurrentNavigation() || this.element.querySelector(this.options.selectorLinkSelected);\n\n      var getNextItem = function getNextItem(old) {\n        var handleUnderflow = function handleUnderflow(i, l) {\n          return i + (i >= 0 ? 0 : l);\n        };\n\n        var handleOverflow = function handleOverflow(i, l) {\n          return i - (i < l ? 0 : l);\n        }; // `items.indexOf(old)` may be -1 (Scenario of no previous focus)\n        // `items.indexOf(old)` may be -1 (Scenario of no previous focus)\n\n\n        var index = Math.max(items.indexOf(old) + direction, -1);\n        return items[handleUnderflow(handleOverflow(index, items.length), items.length)];\n      };\n\n      var isShowSelected = this.element.classList.contains(this.options.classShowSelected);\n\n      for (var current = getNextItem(start); current && current !== start; current = getNextItem(current)) {\n        if (!current.matches(this.options.selectorItemHidden) && !current.parentNode.matches(this.options.selectorItemHidden) && (isShowSelected || !isShowSelected && !current.parentElement.matches(this.options.selectorItemSelected))) {\n          // Using the latest semantic markup structure where trigger is a button\n          // @todo remove conditional once legacy structure is depreciated\n          // NOTE: `selectorTrigger` does NOT match the trigger button in older markup\n          if (this.element.querySelector(this.options.selectorTrigger)) {\n            this._updateFocus(current);\n          } else {\n            current.focus();\n          }\n\n          break;\n        }\n      }\n    }\n    /**\n     * Handles clicking on the dropdown options, doing the following:\n     * * Change Dropdown text to selected option.\n     * * Remove selected option from options when selected.\n     * * Emit custom events.\n     * @param {HTMLElement} itemToSelect The element to be activated.\n     */\n\n  }, {\n    key: \"select\",\n    value: function select(itemToSelect) {\n      var _this3 = this;\n\n      var eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n        bubbles: true,\n        cancelable: true,\n        detail: {\n          item: itemToSelect\n        }\n      });\n\n      if (this.element.dispatchEvent(eventStart)) {\n        if (this.element.dataset.dropdownType !== 'navigation') {\n          // NOTE: `selectorTrigger` does NOT match the trigger button in older markup\n          var selectorText = !this.element.querySelector(this.options.selectorTrigger) && this.element.dataset.dropdownType !== 'inline' ? this.options.selectorText : this.options.selectorTextInner;\n          var text = this.element.querySelector(selectorText);\n\n          if (text) {\n            text.innerHTML = itemToSelect.innerHTML;\n          }\n\n          itemToSelect.parentElement.classList.add(this.options.classSelected);\n        }\n\n        this.element.dataset.value = itemToSelect.parentElement.dataset.value;\n        toArray(this.element.querySelectorAll(this.options.selectorLinkSelected)).forEach(function (item) {\n          if (itemToSelect !== item) {\n            item.parentElement.classList.remove(_this3.options.classSelected);\n          }\n        });\n        this.element.dispatchEvent(new CustomEvent(this.options.eventAfterSelected, {\n          bubbles: true,\n          cancelable: true,\n          detail: {\n            item: itemToSelect\n          }\n        }));\n      }\n    }\n    /**\n     * Closes the dropdown menu if this component loses focus.\n     */\n\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur() {\n      this.element.classList.remove(this.options.classOpen);\n\n      this._focusCleanup();\n    }\n    /**\n     * The map associating DOM element and selector instance.\n     * @member Dropdown.components\n     * @type {WeakMap}\n     */\n\n  }], [{\n    key: \"options\",\n    get:\n    /**\n     * The component options.\n     * If `options` is specified in the constructor, {@linkcode Dropdown.create .create()}, or {@linkcode Dropdown.init .init()},\n     * properties in this object are overridden for the instance being create and how {@linkcode Dropdown.init .init()} works.\n     * @member Dropdown.options\n     * @type {object}\n     * @property {string} selectorInit The CSS selector to find selectors.\n     * @property {string} [selectorTrigger]\n     *   The CSS selector to find the trigger button when using a11y compliant markup.\n     *   NOTE: Does NOT match the trigger button in older markup.\n     * @property {string} [selectorMenu] The CSS selector to find menu list when using a11y compliant markup.\n     * @property {string} [selectorText] The CSS selector to find the element showing the selected item.\n     * @property {string} [selectorTextInner] The CSS selector to find the element showing the selected item, used for inline mode.\n     * @property {string} [selectorItem] The CSS selector to find clickable areas in dropdown items.\n     * @property {string} [selectorItemHidden]\n     *   The CSS selector to find hidden dropdown items.\n     *   Used to skip dropdown items for keyboard navigation.\n     * @property {string} [selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n     * @property {string} [selectorItemFocused] The CSS selector to find the clickable area in the focused dropdown item.\n     * @property {string} [selectorLinkSelected] The CSS selector to target the link node of the selected dropdown item.\n     * @property {string} [classShowSelected] The CSS class for the show selected modifier of the dropdown.\n     * @property {string} [classSelected] The CSS class for the selected dropdown item.\n     * @property {string} [classFocused] The CSS class for the focused dropdown item.\n     * @property {string} [classOpen] The CSS class for the open state.\n     * @property {string} [classDisabled] The CSS class for the disabled state.\n     * @property {string} [eventBeforeSelected]\n     *   The name of the custom event fired before a drop down item is selected.\n     *   Cancellation of this event stops selection of drop down item.\n     * @property {string} [eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n     */\n    function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-dropdown]',\n        selectorTrigger: \"button.\".concat(prefix, \"--dropdown-text\"),\n        // NOTE: Does NOT match the trigger button in older markup.\n        selectorMenu: \".\".concat(prefix, \"--dropdown-list\"),\n        selectorText: \".\".concat(prefix, \"--dropdown-text\"),\n        selectorTextInner: \".\".concat(prefix, \"--dropdown-text__inner\"),\n        selectorItem: \".\".concat(prefix, \"--dropdown-link\"),\n        selectorItemSelected: \".\".concat(prefix, \"--dropdown--selected\"),\n        selectorItemFocused: \".\".concat(prefix, \"--dropdown--focused\"),\n        selectorItemHidden: \"[hidden],[aria-hidden=\\\"true\\\"]\",\n        selectorLinkSelected: \".\".concat(prefix, \"--dropdown--selected .\").concat(prefix, \"--dropdown-link\"),\n        classShowSelected: \"\".concat(prefix, \"--dropdown--show-selected\"),\n        classSelected: \"\".concat(prefix, \"--dropdown--selected\"),\n        classFocused: \"\".concat(prefix, \"--dropdown--focused\"),\n        classOpen: \"\".concat(prefix, \"--dropdown--open\"),\n        classDisabled: \"\".concat(prefix, \"--dropdown--disabled\"),\n        eventBeforeSelected: 'dropdown-beingselected',\n        eventAfterSelected: 'dropdown-selected'\n      };\n    }\n    /**\n     * Enum for navigating backward/forward.\n     * @readonly\n     * @member Dropdown.NAVIGATE\n     * @type {object}\n     * @property {number} BACKWARD Navigating backward.\n     * @property {number} FORWARD Navigating forward.\n     */\n\n  }]);\n\n  Dropdown.components = new WeakMap();\n  Dropdown.NAVIGATE = {\n    BACKWARD: -1,\n    FORWARD: 1\n  };\n  return Dropdown;\n}(mixin(createComponent, initComponentBySearch, trackBlur));\n\nexport default Dropdown;","map":null,"metadata":{},"sourceType":"module"}