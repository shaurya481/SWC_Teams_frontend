{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nimport { useId } from '../../internal/useId';\nvar prefix = settings.prefix;\n\nfunction ProgressBar(_ref) {\n  var className = _ref.className,\n      hideLabel = _ref.hideLabel,\n      label = _ref.label,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 100 : _ref$max,\n      value = _ref.value,\n      helperText = _ref.helperText;\n  var id = useId('progress-bar');\n  var helperId = useId('progress-bar-helper');\n  var indeterminate = value === null || value === undefined;\n  var cappedValue = value;\n\n  if (cappedValue > max) {\n    cappedValue = max;\n  }\n\n  if (cappedValue < 0) {\n    cappedValue = 0;\n  }\n\n  var percentage = cappedValue / max;\n  var wrapperClasses = classNames(\"\".concat(prefix, \"--progress-bar\"), _defineProperty({}, \"\".concat(prefix, \"--progress-bar--indeterminate\"), indeterminate), className);\n  var labelClasses = classNames(\"\".concat(prefix, \"--progress-bar__label\"), _defineProperty({}, \"\".concat(prefix, \"--visually-hidden\"), hideLabel));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClasses\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: labelClasses,\n    htmlFor: id\n  }, label), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--progress-bar__track\"),\n    id: id,\n    role: \"progressbar\",\n    \"aria-valuemin\": !indeterminate ? 0 : null,\n    \"aria-valuemax\": !indeterminate ? max : null,\n    \"aria-valuenow\": !indeterminate ? cappedValue : null,\n    \"aria-describedby\": helperText ? helperId : null\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--progress-bar__bar\"),\n    style: {\n      transform: \"scaleX(\".concat(percentage, \")\")\n    }\n  })), helperText && /*#__PURE__*/React.createElement(\"div\", {\n    id: helperId,\n    className: \"\".concat(prefix, \"--progress-bar__helper-text\")\n  }, helperText));\n}\n\nProgressBar.propTypes = {\n  /**\n   * Additional CSS class names.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The current progress as a textual representation.\n   */\n  helperText: PropTypes.string,\n\n  /**\n   * Whether the label should be visually hidden.\n   */\n  hideLabel: PropTypes.bool,\n\n  /**\n   * A label describing the progress bar.\n   */\n  label: PropTypes.string.isRequired,\n\n  /**\n   * The maximum value.\n   */\n  max: PropTypes.number,\n\n  /**\n   * The current value.\n   */\n  value: PropTypes.number\n};\nexport default ProgressBar;","map":null,"metadata":{},"sourceType":"module"}