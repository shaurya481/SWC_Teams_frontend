{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.SideNavMenu = void 0;\n\nvar _iconsReact = require(\"@carbon/icons-react\");\n\nvar _carbonComponents = require(\"carbon-components\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _SideNavIcon = _interopRequireDefault(require(\"./SideNavIcon\"));\n\nvar _keyboard = require(\"../../internal/keyboard\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar prefix = _carbonComponents.settings.prefix;\n\nvar SideNavMenu = /*#__PURE__*/function (_React$Component) {\n  _inherits(SideNavMenu, _React$Component);\n\n  var _super = _createSuper(SideNavMenu);\n\n  function SideNavMenu(props) {\n    var _this;\n\n    _classCallCheck(this, SideNavMenu);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleToggleExpand\", function () {\n      _this.setState(function (state) {\n        return {\n          isExpanded: !state.isExpanded\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (event) {\n      if ((0, _keyboard.match)(event, _keyboard.keys.Escape)) {\n        _this.setState(function () {\n          return {\n            isExpanded: false\n          };\n        });\n      }\n    });\n\n    _this.state = {\n      isExpanded: props.defaultExpanded || false,\n      wasPreviouslyExpanded: props.defaultExpanded || false\n    };\n    return _this;\n  }\n\n  _createClass(SideNavMenu, [{\n    key: \"render\",\n    value: function render() {\n      var _cx;\n\n      var _this$props = this.props,\n          buttonRef = _this$props.buttonRef,\n          customClassName = _this$props.className,\n          children = _this$props.children,\n          IconElement = _this$props.renderIcon,\n          isActive = _this$props.isActive,\n          title = _this$props.title,\n          large = _this$props.large;\n      var isExpanded = this.state.isExpanded;\n      var hasActiveChild;\n\n      if (children) {\n        // if we have children, either a single or multiple, find if it is active\n        hasActiveChild = Array.isArray(children) ? children.some(function (child) {\n          if (child.props && (child.props.isActive === true || child.props['aria-current'])) {\n            return true;\n          }\n\n          return false;\n        }) : children.props && (children.props.isActive === true || children.props['aria-current']);\n      }\n\n      var className = (0, _classnames.default)((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--side-nav__item\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--side-nav__item--active\"), isActive || hasActiveChild && !isExpanded), _defineProperty(_cx, \"\".concat(prefix, \"--side-nav__item--icon\"), IconElement), _defineProperty(_cx, \"\".concat(prefix, \"--side-nav__item--large\"), large), _defineProperty(_cx, customClassName, !!customClassName), _cx));\n      return (\n        /*#__PURE__*/\n        // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\n        _react.default.createElement(\"li\", {\n          className: className,\n          onKeyDown: this.handleKeyDown\n        }, /*#__PURE__*/_react.default.createElement(\"button\", {\n          \"aria-expanded\": isExpanded,\n          className: \"\".concat(prefix, \"--side-nav__submenu\"),\n          onClick: this.handleToggleExpand,\n          ref: buttonRef,\n          type: \"button\"\n        }, IconElement && /*#__PURE__*/_react.default.createElement(_SideNavIcon.default, null, /*#__PURE__*/_react.default.createElement(IconElement, null)), /*#__PURE__*/_react.default.createElement(\"span\", {\n          className: \"\".concat(prefix, \"--side-nav__submenu-title\")\n        }, title), /*#__PURE__*/_react.default.createElement(_SideNavIcon.default, {\n          className: \"\".concat(prefix, \"--side-nav__submenu-chevron\"),\n          small: true\n        }, /*#__PURE__*/_react.default.createElement(_iconsReact.ChevronDown20, null))), /*#__PURE__*/_react.default.createElement(\"ul\", {\n          className: \"\".concat(prefix, \"--side-nav__menu\")\n        }, children))\n      );\n    }\n  }]);\n\n  return SideNavMenu;\n}(_react.default.Component);\n\nexports.SideNavMenu = SideNavMenu;\n\n_defineProperty(SideNavMenu, \"propTypes\", {\n  buttonRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({\n    current: _propTypes.default.any\n  })]),\n\n  /**\n   * Provide <SideNavMenuItem>'s inside of the `SideNavMenu`\n   */\n  children: _propTypes.default.node,\n\n  /**\n   * Provide an optional class to be applied to the containing node\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * Specify whether the menu should default to expanded. By default, it will\n   * be closed.\n   */\n  defaultExpanded: _propTypes.default.bool,\n\n  /**\n   * Specify whether the `SideNavMenu` is \"active\". `SideNavMenu` should be\n   * considered active if one of its menu items are a link for the current\n   * page.\n   */\n  isActive: _propTypes.default.bool,\n\n  /**\n   * Property to indicate if the side nav container is open (or not). Use to\n   * keep local state and styling in step with the SideNav expansion state.\n   */\n  isSideNavExpanded: _propTypes.default.bool,\n\n  /**\n   * Specify if this is a large variation of the SideNavMenu\n   */\n  large: _propTypes.default.bool,\n\n  /**\n   * Pass in a custom icon to render next to the `SideNavMenu` title\n   */\n  renderIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n\n  /**\n   * Provide the text for the overall menu name\n   */\n  title: _propTypes.default.string.isRequired\n});\n\n_defineProperty(SideNavMenu, \"defaultProps\", {\n  defaultExpanded: false,\n  isActive: false,\n  large: false\n});\n\n_defineProperty(SideNavMenu, \"getDerivedStateFromProps\", function (props, state) {\n  var derivedState = null;\n\n  if (props.isSideNavExpanded === false && state.isExpanded === true) {\n    derivedState = {\n      isExpanded: props.isSideNavExpanded,\n      wasPreviouslyExpanded: true\n    };\n  } else if (props.isSideNavExpanded === true && state.wasPreviouslyExpanded === true) {\n    derivedState = {\n      isExpanded: props.isSideNavExpanded,\n      wasPreviouslyExpanded: false\n    };\n  }\n\n  return derivedState;\n});\n\nvar SideNavMenuForwardRef = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {\n  return /*#__PURE__*/_react.default.createElement(SideNavMenu, _extends({}, props, {\n    buttonRef: ref\n  }));\n});\n\nSideNavMenuForwardRef.displayName = 'SideNavMenu';\nvar _default = SideNavMenuForwardRef;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}