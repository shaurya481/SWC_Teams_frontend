{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { useRef, useLayoutEffect } from 'react';\nvar windowExists = typeof window !== \"undefined\";\n\nvar getWindowSize = function getWindowSize() {\n  if (!windowExists) {\n    return {\n      innerHeight: 0,\n      innerWidth: 0,\n      outerHeight: 0,\n      outerWidth: 0\n    };\n  }\n\n  var _window = _objectSpread({}, window),\n      innerHeight = _window.innerHeight,\n      innerWidth = _window.innerWidth,\n      outerHeight = _window.outerHeight,\n      outerWidth = _window.outerWidth;\n\n  return {\n    innerHeight: innerHeight,\n    innerWidth: innerWidth,\n    outerHeight: outerHeight,\n    outerWidth: outerWidth\n  };\n};\n\nexport function useWindowResize(effect, deps) {\n  var throttleInterval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var windowSize = useRef({});\n  var throttleTimeout = useRef(null);\n\n  var doGetWindowSize = function doGetWindowSize() {\n    var newVal = {\n      previous: windowSize.current,\n      current: getWindowSize()\n    }; // call effect\n\n    effect(newVal);\n    windowSize.current = newVal.current;\n    throttleTimeout.current = null;\n  };\n\n  useLayoutEffect(function () {\n    var handleResize = function handleResize() {\n      if (throttleInterval) {\n        if (throttleTimeout.current === null) {\n          throttleTimeout.current = setTimeout(doGetWindowSize, throttleInterval);\n        }\n      } else {\n        doGetWindowSize();\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    doGetWindowSize();\n    return function () {\n      return window.removeEventListener('resize', handleResize);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}","map":null,"metadata":{},"sourceType":"module"}