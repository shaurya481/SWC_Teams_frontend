{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport { WarningFilled16, WarningAltFilled16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport Downshift from 'downshift';\nimport isEqual from 'lodash.isequal';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { defaultFilterItems } from '../ComboBox/tools/filter';\nimport { sortingPropTypes } from './MultiSelectPropTypes';\nimport ListBox, { PropTypes as ListBoxPropTypes } from '../ListBox';\nimport { ListBoxTrigger, ListBoxSelection } from '../ListBox/next';\nimport { match, keys } from '../../internal/keyboard';\nimport Selection from '../../internal/Selection';\nimport { mapDownshiftProps } from '../../tools/createPropAdapter';\nimport { defaultItemToString } from './tools/itemToString';\nimport mergeRefs from '../../tools/mergeRefs';\nimport setupGetInstanceId from '../../tools/setupGetInstanceId';\nimport { defaultSortItems, defaultCompareItems } from './tools/sorting';\nvar prefix = settings.prefix;\nvar getInstanceId = setupGetInstanceId();\n\nvar FilterableMultiSelect = /*#__PURE__*/function (_React$Component) {\n  _inherits(FilterableMultiSelect, _React$Component);\n\n  var _super = _createSuper(FilterableMultiSelect);\n\n  function FilterableMultiSelect(props) {\n    var _this;\n\n    _classCallCheck(this, FilterableMultiSelect);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnChange\", function (changes) {\n      if (_this.props.onChange) {\n        _this.props.onChange(changes);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnMenuChange\", function (isOpen) {\n      _this.setState(function (state) {\n        return {\n          isOpen: isOpen !== null && isOpen !== void 0 ? isOpen : !state.isOpen\n        };\n      });\n\n      if (_this.props.onMenuChange) {\n        _this.props.onMenuChange(isOpen);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnOuterClick\", function () {\n      _this.handleOnMenuChange(false);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnStateChange\", function (changes, downshift) {\n      if (changes.isOpen && !_this.state.isOpen) {\n        _this.setState({\n          topItems: downshift.selectedItem\n        });\n      }\n\n      var type = changes.type;\n      var stateChangeTypes = Downshift.stateChangeTypes;\n\n      switch (type) {\n        case stateChangeTypes.keyDownArrowDown:\n        case stateChangeTypes.keyDownArrowUp:\n        case stateChangeTypes.keyDownHome:\n        case stateChangeTypes.keyDownEnd:\n          _this.setState({\n            highlightedIndex: changes.highlightedIndex !== undefined ? changes.highlightedIndex : null\n          });\n\n          if (stateChangeTypes.keyDownArrowDown === type && !_this.state.isOpen) {\n            _this.handleOnMenuChange(true);\n          }\n\n          break;\n\n        case stateChangeTypes.keyDownEscape:\n          _this.handleOnMenuChange(false);\n\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnInputKeyDown\", function (event) {\n      event.stopPropagation();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnInputValueChange\", function (inputValue, _ref) {\n      var type = _ref.type;\n\n      if (type !== Downshift.stateChangeTypes.changeInput) {\n        return;\n      }\n\n      _this.setState(function () {\n        if (Array.isArray(inputValue)) {\n          return {\n            inputValue: ''\n          };\n        }\n\n        return {\n          inputValue: inputValue || ''\n        };\n      });\n\n      if (inputValue && !_this.state.isOpen) {\n        _this.handleOnMenuChange(true);\n      } else if (!inputValue && _this.state.isOpen) {\n        _this.handleOnMenuChange(false);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearInputValue\", function () {\n      _this.setState({\n        inputValue: ''\n      }, function () {\n        if (_this.textInput.current) {\n          _this.textInput.current.focus();\n        }\n      });\n    });\n\n    _this.filterableMultiSelectInstanceId = getInstanceId();\n    _this.state = {\n      isOpen: props.open,\n      inputValue: '',\n      topItems: [],\n      inputFocused: false,\n      highlightedIndex: null\n    };\n    _this.textInput = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  _createClass(FilterableMultiSelect, [{\n    key: \"render\",\n    value: function render() {\n      var _cx,\n          _cx2,\n          _cx3,\n          _cx4,\n          _this2 = this;\n\n      var _this$state = this.state,\n          highlightedIndex = _this$state.highlightedIndex,\n          isOpen = _this$state.isOpen,\n          inputValue = _this$state.inputValue;\n      var _this$props = this.props,\n          ariaLabel = _this$props.ariaLabel,\n          containerClassName = _this$props.className,\n          disabled = _this$props.disabled,\n          filterItems = _this$props.filterItems,\n          items = _this$props.items,\n          itemToString = _this$props.itemToString,\n          titleText = _this$props.titleText,\n          helperText = _this$props.helperText,\n          type = _this$props.type,\n          initialSelectedItems = _this$props.initialSelectedItems,\n          id = _this$props.id,\n          locale = _this$props.locale,\n          size = _this$props.size,\n          placeholder = _this$props.placeholder,\n          sortItems = _this$props.sortItems,\n          compareItems = _this$props.compareItems,\n          light = _this$props.light,\n          invalid = _this$props.invalid,\n          invalidText = _this$props.invalidText,\n          warn = _this$props.warn,\n          warnText = _this$props.warnText,\n          useTitleInItem = _this$props.useTitleInItem,\n          translateWithId = _this$props.translateWithId,\n          downshiftProps = _this$props.downshiftProps;\n      var inline = type === 'inline';\n      var showWarning = !invalid && warn;\n      var wrapperClasses = cx(\"\".concat(prefix, \"--multi-select__wrapper\"), \"\".concat(prefix, \"--list-box__wrapper\"), (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--multi-select__wrapper--inline\"), inline), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__wrapper--inline\"), inline), _defineProperty(_cx, \"\".concat(prefix, \"--multi-select__wrapper--inline--invalid\"), inline && invalid), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__wrapper--inline--invalid\"), inline && invalid), _cx));\n      var helperId = !helperText ? undefined : \"filterablemultiselect-helper-text-\".concat(this.filterableMultiSelectInstanceId);\n      var labelId = \"\".concat(id, \"-label\");\n      var titleClasses = cx((_cx2 = {}, _defineProperty(_cx2, \"\".concat(prefix, \"--label\"), true), _defineProperty(_cx2, \"\".concat(prefix, \"--label--disabled\"), disabled), _cx2));\n      var helperClasses = cx((_cx3 = {}, _defineProperty(_cx3, \"\".concat(prefix, \"--form__helper-text\"), true), _defineProperty(_cx3, \"\".concat(prefix, \"--form__helper-text--disabled\"), disabled), _cx3));\n      var inputClasses = cx((_cx4 = {}, _defineProperty(_cx4, \"\".concat(prefix, \"--text-input\"), true), _defineProperty(_cx4, \"\".concat(prefix, \"--text-input--empty\"), !this.state.inputValue), _defineProperty(_cx4, \"\".concat(prefix, \"--text-input--light\"), light), _cx4));\n      var helper = helperText ? /*#__PURE__*/React.createElement(\"div\", {\n        id: helperId,\n        className: helperClasses\n      }, helperText) : null;\n      var menuId = \"\".concat(id, \"__menu\");\n      var inputId = \"\".concat(id, \"-input\");\n      return /*#__PURE__*/React.createElement(Selection, {\n        disabled: disabled,\n        onChange: this.handleOnChange,\n        initialSelectedItems: initialSelectedItems,\n        render: function render(_ref2) {\n          var selectedItems = _ref2.selectedItems,\n              onItemChange = _ref2.onItemChange,\n              _clearSelection = _ref2.clearSelection;\n          return /*#__PURE__*/React.createElement(Downshift, _extends({}, mapDownshiftProps(downshiftProps), {\n            highlightedIndex: highlightedIndex,\n            id: id,\n            isOpen: isOpen,\n            inputValue: inputValue,\n            onInputValueChange: _this2.handleOnInputValueChange,\n            onChange: function onChange(selectedItem) {\n              if (selectedItem !== null) {\n                onItemChange(selectedItem);\n              }\n            },\n            itemToString: itemToString,\n            onStateChange: _this2.handleOnStateChange,\n            onOuterClick: _this2.handleOnOuterClick,\n            selectedItem: selectedItems,\n            labelId: labelId,\n            menuId: menuId,\n            inputId: inputId\n          }), function (_ref3) {\n            var _cx5;\n\n            var getInputProps = _ref3.getInputProps,\n                getItemProps = _ref3.getItemProps,\n                getLabelProps = _ref3.getLabelProps,\n                getMenuProps = _ref3.getMenuProps,\n                getRootProps = _ref3.getRootProps,\n                getToggleButtonProps = _ref3.getToggleButtonProps,\n                isOpen = _ref3.isOpen,\n                inputValue = _ref3.inputValue,\n                selectedItem = _ref3.selectedItem;\n            var className = cx(\"\".concat(prefix, \"--multi-select\"), \"\".concat(prefix, \"--combo-box\"), \"\".concat(prefix, \"--multi-select--filterable\"), containerClassName, (_cx5 = {}, _defineProperty(_cx5, \"\".concat(prefix, \"--multi-select--invalid\"), invalid), _defineProperty(_cx5, \"\".concat(prefix, \"--multi-select--open\"), isOpen), _defineProperty(_cx5, \"\".concat(prefix, \"--multi-select--inline\"), inline), _defineProperty(_cx5, \"\".concat(prefix, \"--multi-select--selected\"), selectedItem.length > 0), _defineProperty(_cx5, \"\".concat(prefix, \"--multi-select--filterable--input-focused\"), _this2.state.inputFocused), _cx5));\n            var rootProps = getRootProps({}, {\n              suppressRefError: true\n            });\n            var labelProps = getLabelProps();\n            var buttonProps = getToggleButtonProps({\n              disabled: disabled,\n              onClick: function onClick() {\n                _this2.handleOnMenuChange(!_this2.state.isOpen);\n\n                if (_this2.textInput.current) {\n                  _this2.textInput.current.focus();\n                }\n              },\n              // When we moved the \"root node\" of Downshift to the <input> for\n              // ARIA 1.2 compliance, we unfortunately hit this branch for the\n              // \"mouseup\" event that downshift listens to:\n              // https://github.com/downshift-js/downshift/blob/v5.2.1/src/downshift.js#L1051-L1065\n              //\n              // As a result, it will reset the state of the component and so we\n              // stop the event from propagating to prevent this. This allows the\n              // toggleMenu behavior for the toggleButton to correctly open and\n              // close the menu.\n              onMouseUp: function onMouseUp(event) {\n                event.stopPropagation();\n              }\n            });\n            var inputProps = getInputProps({\n              'aria-controls': isOpen ? menuId : null,\n              'aria-describedby': helperText ? helperId : null,\n              // Remove excess aria `aria-labelledby`. HTML <label for>\n              // provides this aria information.\n              'aria-labelledby': null,\n              disabled: disabled,\n              placeholder: placeholder,\n              onClick: function onClick() {\n                _this2.handleOnMenuChange(true);\n              },\n              onKeyDown: function onKeyDown(event) {\n                if (match(event, keys.Space)) {\n                  event.stopPropagation();\n                }\n              },\n              onFocus: function onFocus() {\n                _this2.setState({\n                  inputFocused: true\n                });\n              },\n              onBlur: function onBlur() {\n                _this2.setState({\n                  inputFocused: false\n                });\n              }\n            });\n            var menuProps = getMenuProps({\n              'aria-label': ariaLabel\n            }, {\n              suppressRefError: true\n            });\n            return /*#__PURE__*/React.createElement(\"div\", {\n              className: wrapperClasses\n            }, titleText ? /*#__PURE__*/React.createElement(\"label\", _extends({\n              className: titleClasses\n            }, labelProps), titleText) : null, /*#__PURE__*/React.createElement(ListBox, {\n              className: className,\n              disabled: disabled,\n              light: light,\n              invalid: invalid,\n              invalidText: invalidText,\n              warn: warn,\n              warnText: warnText,\n              isOpen: isOpen,\n              size: size\n            }, /*#__PURE__*/React.createElement(\"div\", {\n              className: \"\".concat(prefix, \"--list-box__field\")\n            }, selectedItem.length > 0 && /*#__PURE__*/React.createElement(ListBoxSelection, {\n              clearSelection: function clearSelection() {\n                _clearSelection();\n\n                if (_this2.textInput.current) {\n                  _this2.textInput.current.focus();\n                }\n              },\n              selectionCount: selectedItem.length,\n              translateWithId: translateWithId,\n              disabled: disabled\n            }), /*#__PURE__*/React.createElement(\"input\", _extends({\n              className: inputClasses\n            }, rootProps, inputProps, {\n              ref: mergeRefs(_this2.textInput, rootProps.ref)\n            })), invalid && /*#__PURE__*/React.createElement(WarningFilled16, {\n              className: \"\".concat(prefix, \"--list-box__invalid-icon\")\n            }), showWarning && /*#__PURE__*/React.createElement(WarningAltFilled16, {\n              className: \"\".concat(prefix, \"--list-box__invalid-icon \").concat(prefix, \"--list-box__invalid-icon--warning\")\n            }), inputValue && /*#__PURE__*/React.createElement(ListBoxSelection, {\n              clearSelection: _this2.clearInputValue,\n              disabled: disabled,\n              translateWithId: translateWithId,\n              onMouseUp: function onMouseUp(event) {\n                // If we do not stop this event from propagating,\n                // it seems like Downshift takes our event and\n                // prevents us from getting `onClick` /\n                // `clearSelection` from the underlying <button> in\n                // ListBoxSelection\n                event.stopPropagation();\n              }\n            }), /*#__PURE__*/React.createElement(ListBoxTrigger, _extends({}, buttonProps, {\n              isOpen: isOpen,\n              translateWithId: translateWithId\n            }))), isOpen ? /*#__PURE__*/React.createElement(ListBox.Menu, menuProps, sortItems(filterItems(items, {\n              itemToString: itemToString,\n              inputValue: inputValue\n            }), {\n              selectedItems: {\n                top: selectedItems,\n                fixed: [],\n                'top-after-reopen': _this2.state.topItems\n              }[_this2.props.selectionFeedback],\n              itemToString: itemToString,\n              compareItems: compareItems,\n              locale: locale\n            }).map(function (item, index) {\n              var itemProps = getItemProps({\n                item: item\n              });\n              var itemText = itemToString(item);\n              var isChecked = selectedItem.filter(function (selected) {\n                return isEqual(selected, item);\n              }).length > 0;\n              return /*#__PURE__*/React.createElement(ListBox.MenuItem, _extends({\n                key: itemProps.id,\n                \"aria-label\": itemText,\n                isActive: isChecked,\n                isHighlighted: highlightedIndex === index,\n                title: itemText\n              }, itemProps), /*#__PURE__*/React.createElement(\"div\", {\n                className: \"\".concat(prefix, \"--checkbox-wrapper\")\n              }, /*#__PURE__*/React.createElement(\"span\", {\n                title: useTitleInItem ? itemText : null,\n                className: \"\".concat(prefix, \"--checkbox-label\"),\n                \"data-contained-checkbox-state\": isChecked,\n                id: \"\".concat(itemProps.id, \"-item\")\n              }, itemText)));\n            })) : null), !inline && !invalid && !warn ? helper : null);\n          });\n        }\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_ref4, state) {\n      var open = _ref4.open;\n      /**\n       * programmatically control this `open` prop\n       */\n\n      var prevOpen = state.prevOpen;\n      return prevOpen === open ? null : {\n        isOpen: open,\n        prevOpen: open\n      };\n    }\n  }]);\n\n  return FilterableMultiSelect;\n}(React.Component);\n\n_defineProperty(FilterableMultiSelect, \"propTypes\", _objectSpread(_objectSpread({\n  /**\n   * 'aria-label' of the ListBox component.\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Disable the control\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Additional props passed to Downshift\n   */\n  downshiftProps: PropTypes.shape(Downshift.propTypes),\n\n  /**\n   * Specify a custom `id`\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Allow users to pass in arbitrary items from their collection that are\n   * pre-selected\n   */\n  initialSelectedItems: PropTypes.array,\n\n  /**\n   * Is the current selection invalid?\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * If invalid, what is the error?\n   */\n  invalidText: PropTypes.node,\n\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * `true` to use the light version.\n   */\n  light: PropTypes.bool,\n\n  /**\n   * Specify the locale of the control. Used for the default `compareItems`\n   * used for sorting the list of items in the control.\n   */\n  locale: PropTypes.string,\n\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occuring.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * `onMenuChange` is a utility for this controlled component to communicate to a\n   * consuming component that the menu was opened(`true`)/closed(`false`).\n   */\n  onMenuChange: PropTypes.func,\n\n  /**\n   * Initialize the component with an open(`true`)/closed(`false`) menu.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Generic `placeholder` that will be used as the textual representation of\n   * what this field is for\n   */\n  placeholder: PropTypes.string.isRequired,\n\n  /**\n   * Specify feedback (mode) of the selection.\n   * `top`: selected item jumps to top\n   * `fixed`: selected item stays at it's position\n   * `top-after-reopen`: selected item jump to top after reopen dropdown\n   */\n  selectionFeedback: PropTypes.oneOf(['top', 'fixed', 'top-after-reopen']),\n\n  /**\n   * Specify the size of the ListBox. Currently supports either `sm`, `md` or `lg` as an option.\n   */\n  size: ListBoxPropTypes.ListBoxSize\n}, sortingPropTypes), {}, {\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: PropTypes.func,\n\n  /**\n   * Specify title to show title on hover\n   */\n  useTitleInItem: PropTypes.bool,\n\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n}));\n\n_defineProperty(FilterableMultiSelect, \"defaultProps\", {\n  ariaLabel: 'Choose an item',\n  compareItems: defaultCompareItems,\n  disabled: false,\n  filterItems: defaultFilterItems,\n  initialSelectedItems: [],\n  itemToString: defaultItemToString,\n  locale: 'en',\n  sortItems: defaultSortItems,\n  light: false,\n  open: false,\n  selectionFeedback: 'top-after-reopen'\n});\n\nexport { FilterableMultiSelect as default };","map":null,"metadata":{},"sourceType":"module"}