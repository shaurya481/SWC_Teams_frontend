{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\n * Copyright IBM Corp. 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport classnames from 'classnames';\nimport { settings } from 'carbon-components';\nimport Search from '../Search';\nvar prefix = settings.prefix;\n\nfunction ExpandableSearch(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      expanded = _useState2[0],\n      setExpanded = _useState2[1];\n\n  var searchRef = useRef(null);\n\n  function handleFocus() {\n    if (!expanded) {\n      setExpanded(true);\n    }\n  }\n\n  function handleBlur(evt) {\n    var relatedTargetIsAllowed = evt.relatedTarget && evt.relatedTarget.classList.contains(\"\".concat(prefix, \"--search-close\"));\n\n    if (expanded && !relatedTargetIsAllowed && !searchRef.current.state.hasContent) {\n      setExpanded(false);\n    }\n  }\n\n  useEffect(function () {\n    var _searchRef$current2;\n\n    function focusInput() {\n      var _searchRef$current;\n\n      if (!expanded && (_searchRef$current = searchRef.current) !== null && _searchRef$current !== void 0 && _searchRef$current.input) {\n        searchRef.current.input.focus();\n      }\n    }\n\n    if ((_searchRef$current2 = searchRef.current) !== null && _searchRef$current2 !== void 0 && _searchRef$current2.magnifier) {\n      var magnifier = searchRef.current.magnifier;\n      magnifier.addEventListener('click', focusInput);\n      return function () {\n        magnifier.removeEventListener('click', focusInput);\n      };\n    }\n  }, [expanded, searchRef]);\n  var classes = classnames(\"\".concat(prefix, \"--search--expandable\"), _defineProperty({}, \"\".concat(prefix, \"--search--expanded\"), expanded), props.className);\n  return /*#__PURE__*/React.createElement(Search, _extends({}, props, {\n    ref: searchRef,\n    className: classes,\n    onFocus: handleFocus,\n    onBlur: handleBlur\n  }));\n}\n\nExpandableSearch.propTypes = Search.propTypes;\nexport default ExpandableSearch;","map":null,"metadata":{},"sourceType":"module"}