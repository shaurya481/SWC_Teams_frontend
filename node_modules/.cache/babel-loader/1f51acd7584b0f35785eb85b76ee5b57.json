{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nimport { useId } from '../../../internal/useId';\nimport deprecate from '../../../prop-types/deprecate';\nvar prefix = settings.prefix;\nvar GridSelectedRowStateContext = /*#__PURE__*/React.createContext(null);\nvar GridSelectedRowDispatchContext = /*#__PURE__*/React.createContext(null);\nexport function StructuredListWrapper(props) {\n  var children = props.children,\n      selection = props.selection,\n      className = props.className,\n      ariaLabel = props.ariaLabel,\n      _border = props.border,\n      other = _objectWithoutProperties(props, [\"children\", \"selection\", \"className\", \"ariaLabel\", \"border\"]);\n\n  var classes = classNames(\"\".concat(prefix, \"--structured-list\"), className, _defineProperty({}, \"\".concat(prefix, \"--structured-list--selection\"), selection));\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedRow = _React$useState2[0],\n      setSelectedRow = _React$useState2[1];\n\n  return /*#__PURE__*/React.createElement(GridSelectedRowStateContext.Provider, {\n    value: selectedRow\n  }, /*#__PURE__*/React.createElement(GridSelectedRowDispatchContext.Provider, {\n    value: setSelectedRow\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"grid\",\n    className: classes\n  }, other, {\n    \"aria-label\": ariaLabel\n  }), children)));\n}\nStructuredListWrapper.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the container node\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Specify whether a border should be added to your StructuredListWrapper\n   */\n  border: deprecate(PropTypes.bool, \"\\nThe prop `border` will be removed in the next major version of Carbon.\"),\n\n  /**\n   * Provide the contents of your StructuredListWrapper\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether your StructuredListWrapper should have selections\n   */\n  selection: PropTypes.bool\n};\nStructuredListWrapper.defaultProps = {\n  selection: false,\n  ariaLabel: 'Structured list section'\n};\nexport function StructuredListHead(props) {\n  var children = props.children,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"children\", \"className\"]);\n\n  var classes = classNames(\"\".concat(prefix, \"--structured-list-thead\"), className);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"rowgroup\",\n    className: classes\n  }, other), children);\n}\nStructuredListHead.propTypes = {\n  /**\n   * Provide the contents of your StructuredListHead\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the node\n   */\n  className: PropTypes.string\n};\nexport function StructuredListBody(props) {\n  var children = props.children,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"children\", \"className\"]);\n\n  var classes = classNames(\"\".concat(prefix, \"--structured-list-tbody\"), className);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: classes,\n    role: \"rowgroup\"\n  }, other), children);\n}\nStructuredListBody.propTypes = {\n  /**\n   * Provide the contents of your StructuredListBody\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n  head: PropTypes.bool,\n\n  /**\n   * Provide a handler that is invoked on the key down event for the control\n   */\n  onKeyDown: PropTypes.func\n};\nStructuredListBody.defaultProps = {\n  onKeyDown: function onKeyDown() {}\n};\nvar GridRowContext = /*#__PURE__*/React.createContext(null);\nexport function StructuredListRow(props) {\n  var _classNames2;\n\n  var onKeyDown = props.onKeyDown,\n      children = props.children,\n      className = props.className,\n      head = props.head,\n      other = _objectWithoutProperties(props, [\"onKeyDown\", \"children\", \"className\", \"head\"]);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasFocusWithin = _useState2[0],\n      setHasFocusWithin = _useState2[1];\n\n  var id = useId('grid-input');\n  var setSelectedRow = React.useContext(GridSelectedRowDispatchContext);\n  var value = {\n    id: id\n  };\n  var classes = classNames(\"\".concat(prefix, \"--structured-list-row\"), className, (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefix, \"--structured-list-row--header-row\"), head), _defineProperty(_classNames2, \"\".concat(prefix, \"--structured-list-row--focused-within\"), hasFocusWithin), _classNames2));\n  return head ? /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"row\"\n  }, other, {\n    className: classes\n  }), children) :\n  /*#__PURE__*/\n  // eslint-disable-next-line jsx-a11y/interactive-supports-focus\n  React.createElement(\"div\", _extends({}, other, {\n    role: \"row\",\n    className: classes,\n    onClick: function onClick() {\n      return setSelectedRow(id);\n    },\n    onFocus: function onFocus() {\n      setHasFocusWithin(true);\n    },\n    onBlur: function onBlur() {\n      setHasFocusWithin(false);\n    },\n    onKeyDown: onKeyDown\n  }), /*#__PURE__*/React.createElement(GridRowContext.Provider, {\n    value: value\n  }, children));\n}\nStructuredListRow.propTypes = {\n  /**\n   * Provide the contents of your StructuredListRow\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether your StructuredListRow should be used as a header row\n   */\n  head: PropTypes.bool,\n\n  /**\n   * Specify whether a `<label>` should be used\n   */\n  label: deprecate(PropTypes.bool, \"\\nThe `label` prop is no longer needed and will be removed in the next major version of Carbon.\"),\n\n  /**\n   * Provide a handler that is invoked on the key down event for the control,\n   */\n  onKeyDown: PropTypes.func\n};\nStructuredListRow.defaultProps = {\n  head: false,\n  onKeyDown: function onKeyDown() {}\n};\nexport function StructuredListInput(props) {\n  var defaultId = useId('structureListInput');\n\n  var className = props.className,\n      _props$name = props.name,\n      name = _props$name === void 0 ? \"structured-list-input-\".concat(defaultId) : _props$name,\n      title = props.title,\n      id = props.id,\n      other = _objectWithoutProperties(props, [\"className\", \"name\", \"title\", \"id\"]);\n\n  var classes = classNames(\"\".concat(prefix, \"--structured-list-input\"), \"\".concat(prefix, \"--visually-hidden\"), className);\n  var row = React.useContext(GridRowContext);\n  var selectedRow = React.useContext(GridSelectedRowStateContext);\n  var setSelectedRow = React.useContext(GridSelectedRowDispatchContext);\n  return /*#__PURE__*/React.createElement(\"input\", _extends({}, other, {\n    type: \"radio\",\n    tabIndex: 0,\n    checked: row && row.id === selectedRow,\n    value: row ? row.id : '',\n    onChange: function onChange(event) {\n      setSelectedRow(event.target.value);\n    },\n    id: !id && defaultId,\n    className: classes,\n    name: name,\n    title: title\n  }));\n}\nStructuredListInput.propTypes = {\n  /**\n   * Specify an optional className to be applied to the input\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the underlying input should be checked by default\n   */\n  defaultChecked: deprecate(PropTypes.bool, \"\\nThe prop `defaultChecked` is no longer needed and will be removed in the next major version of Carbon.\"),\n\n  /**\n   * Specify a custom `id` for the input\n   */\n  id: PropTypes.string,\n\n  /**\n   * Provide a `name` for the input\n   */\n  name: PropTypes.string,\n\n  /**\n   * Provide an optional hook that is called each time the input is updated\n   */\n  onChange: deprecate(PropTypes.func, \"\\nThe prop `onChange` will be removed in the next major version of Carbon.\"),\n\n  /**\n   * Provide a `title` for the input\n   */\n  title: PropTypes.string,\n\n  /**\n   * Specify the value of the input\n   */\n  value: deprecate(PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired, \"\\nThe prop `value` will be removed in the next major version of Carbon.\")\n};\nStructuredListInput.defaultProps = {\n  title: 'title'\n};\nexport function StructuredListCell(props) {\n  var _classNames3;\n\n  var children = props.children,\n      className = props.className,\n      head = props.head,\n      noWrap = props.noWrap,\n      other = _objectWithoutProperties(props, [\"children\", \"className\", \"head\", \"noWrap\"]);\n\n  var classes = classNames(className, (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefix, \"--structured-list-th\"), head), _defineProperty(_classNames3, \"\".concat(prefix, \"--structured-list-td\"), !head), _defineProperty(_classNames3, \"\".concat(prefix, \"--structured-list-content--nowrap\"), noWrap), _classNames3));\n\n  if (head) {\n    return /*#__PURE__*/React.createElement(\"span\", _extends({\n      className: classes,\n      role: \"columnheader\"\n    }, other), children);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: classes,\n    role: \"cell\"\n  }, other), children);\n}\nStructuredListCell.propTypes = {\n  /**\n   * Provide the contents of your StructuredListCell\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether your StructuredListCell should be used as a header cell\n   */\n  head: PropTypes.bool,\n\n  /**\n   * Specify whether your StructuredListCell should have text wrapping\n   */\n  noWrap: PropTypes.bool\n};\nStructuredListCell.defaultProps = {\n  head: false,\n  noWrap: false\n};\nexport default {\n  StructuredListWrapper: StructuredListWrapper,\n  StructuredListHead: StructuredListHead,\n  StructuredListBody: StructuredListBody,\n  StructuredListRow: StructuredListRow,\n  StructuredListInput: StructuredListInput,\n  StructuredListCell: StructuredListCell\n};","map":null,"metadata":{},"sourceType":"module"}