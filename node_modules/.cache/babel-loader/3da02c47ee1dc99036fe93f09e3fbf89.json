{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport { useEffect, useRef, useState } from 'react';\nimport { warning } from './warning';\nexport function useControllableState(controlledState, controlledSetState, defaultValue) {\n  var controlled = useRef(controlledState !== undefined);\n\n  var _useState = useState(function () {\n    if (controlled.current === true) {\n      return controlledState;\n    }\n\n    return defaultValue;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      internalSetState = _useState2[1]; // If the owner is controlling the component prop value, keep the controlled\n  // state value and the internal state value in sync.\n  //\n  // We guard on `undefined` to prevent downstream breakage of controlled\n  // components (like <input>). When the controlled state switches to\n  // `undefined`, we are moving from controlled to uncontrolled.\n\n\n  if (controlled.current === true && controlledState !== state && controlledState !== undefined) {\n    internalSetState(controlledState);\n  }\n\n  function setState(stateOrUpdater) {\n    if (controlled.current === true) {\n      controlledSetState(stateOrUpdater);\n    } else {\n      internalSetState(stateOrUpdater);\n    }\n  }\n\n  useEffect(function () {\n    // Uncontrolled -> Controlled\n    // If the component prop is uncontrolled, the prop value should be undefined\n    if (controlled.current === false && controlledState !== undefined) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'A component is changing an uncontrolled component to be controlled. ' + 'This is likely caused by the value changing to a defined value ' + 'from undefined. Decide between using a controlled or uncontrolled ' + 'value for the lifetime of the component. ' + 'More info: https://reactjs.org/link/controlled-components') : void 0;\n    } // Controlled -> Uncontrolled\n    // If the component prop is controlled, the prop value should be defined\n\n\n    if (controlled.current === true && controlledState === undefined) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'A component is changing a controlled component to be uncontrolled. ' + 'This is likely caused by the value changing to an undefined value ' + 'from a defined one. Decide between using a controlled or ' + 'uncontrolled value for the lifetime of the component. ' + 'More info: https://reactjs.org/link/controlled-components') : void 0;\n    }\n  }, [controlledState]);\n  return [state, setState];\n}","map":null,"metadata":{},"sourceType":"module"}