{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { settings } from 'carbon-components';\nimport { keys, match } from '../../internal/keyboard';\nimport ClickListener from '../../internal/ClickListener';\nimport { capWithinRange, clickedElementHasSubnodes, focusNode as focusNodeUtil, getNextNode, getParentMenu, getParentNode, getPosition, getValidNodes, resetFocus } from './_utils';\nimport MenuGroup from './MenuGroup';\nimport MenuRadioGroup from './MenuRadioGroup';\nimport MenuRadioGroupOptions from './MenuRadioGroupOptions';\nimport MenuSelectableItem from './MenuSelectableItem';\nvar prefix = settings.prefix;\nvar margin = 16; // distance to keep to body edges, in px\n\nvar Menu = function Menu(_ref) {\n  var _classnames;\n\n  var _ref$autoclose = _ref.autoclose,\n      autoclose = _ref$autoclose === void 0 ? true : _ref$autoclose,\n      children = _ref.children,\n      open = _ref.open,\n      _ref$level = _ref.level,\n      level = _ref$level === void 0 ? 1 : _ref$level,\n      _ref$x = _ref.x,\n      x = _ref$x === void 0 ? 0 : _ref$x,\n      _ref$y = _ref.y,\n      y = _ref$y === void 0 ? 0 : _ref$y,\n      _ref$onClose = _ref.onClose,\n      onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose,\n      rest = _objectWithoutProperties(_ref, [\"autoclose\", \"children\", \"open\", \"level\", \"x\", \"y\", \"onClose\"]);\n\n  var rootRef = useRef(null);\n\n  var _useState = useState(1),\n      _useState2 = _slicedToArray(_useState, 2),\n      direction = _useState2[0],\n      setDirection = _useState2[1]; // 1 = to right, -1 = to left\n\n\n  var _useState3 = useState([x, y]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      position = _useState4[0],\n      setPosition = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      canBeClosed = _useState6[0],\n      setCanBeClosed = _useState6[1];\n\n  var isRootMenu = level === 1;\n\n  function getContainerBoundaries() {\n    var _document$body = document.body,\n        bodyWidth = _document$body.clientWidth,\n        bodyHeight = _document$body.clientHeight;\n    return [margin, margin, bodyWidth - margin, bodyHeight - margin];\n  }\n\n  function getTargetBoundaries() {\n    var xIsRange = _typeof(x) === 'object' && x.length === 2;\n    var yIsRange = _typeof(y) === 'object' && y.length === 2;\n    var targetBoundaries = [xIsRange ? x[0] : x, yIsRange ? y[0] : y, xIsRange ? x[1] : x, yIsRange ? y[1] : y];\n\n    if (!isRootMenu) {\n      var _getParentMenu, _rootRef$current;\n\n      var _getParentMenu$getBou = (_getParentMenu = getParentMenu(rootRef === null || rootRef === void 0 ? void 0 : (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.element)) === null || _getParentMenu === void 0 ? void 0 : _getParentMenu.getBoundingClientRect(),\n          parentWidth = _getParentMenu$getBou.width;\n\n      targetBoundaries[2] -= parentWidth;\n    }\n\n    var containerBoundaries = getContainerBoundaries();\n    return [capWithinRange(targetBoundaries[0], containerBoundaries[0], containerBoundaries[2]), capWithinRange(targetBoundaries[1], containerBoundaries[1], containerBoundaries[3]), capWithinRange(targetBoundaries[2], containerBoundaries[0], containerBoundaries[2]), capWithinRange(targetBoundaries[3], containerBoundaries[1], containerBoundaries[3])];\n  }\n\n  function focusNode(node) {\n    if (node) {\n      var _rootRef$current2;\n\n      resetFocus(rootRef === null || rootRef === void 0 ? void 0 : (_rootRef$current2 = rootRef.current) === null || _rootRef$current2 === void 0 ? void 0 : _rootRef$current2.element);\n      focusNodeUtil(node);\n    }\n  }\n\n  function handleKeyDown(event) {\n    if (event.target.tagName === 'LI' && (match(event, keys.Enter) || match(event, keys.Space))) {\n      handleClick(event);\n    } else {\n      event.stopPropagation();\n    }\n\n    if (match(event, keys.Escape) || !isRootMenu && match(event, keys.ArrowLeft)) {\n      onClose();\n    }\n\n    var nodeToFocus;\n\n    if (event.target.tagName === 'LI') {\n      var currentNode = event.target;\n\n      if (match(event, keys.ArrowUp)) {\n        nodeToFocus = getNextNode(currentNode, -1);\n      } else if (match(event, keys.ArrowDown)) {\n        nodeToFocus = getNextNode(currentNode, 1);\n      } else if (match(event, keys.ArrowLeft)) {\n        nodeToFocus = getParentNode(currentNode);\n      }\n    } else if (event.target.tagName === 'UL') {\n      var validNodes = getValidNodes(event.target);\n\n      if (validNodes.length > 0 && match(event, keys.ArrowUp)) {\n        nodeToFocus = validNodes[validNodes.length - 1];\n      } else if (validNodes.length > 0 && match(event, keys.ArrowDown)) {\n        nodeToFocus = validNodes[0];\n      }\n    }\n\n    focusNode(nodeToFocus);\n\n    if (rest.onKeyDown) {\n      rest.onKeyDown(event);\n    }\n  }\n\n  function handleClick(e) {\n    if (!clickedElementHasSubnodes(e) && e.target.tagName !== 'UL') {\n      onClose();\n    } else {\n      e.stopPropagation();\n    }\n  }\n\n  function handleClickOutside(e) {\n    if (!clickedElementHasSubnodes(e) && open && canBeClosed && autoclose) {\n      onClose();\n    }\n  }\n\n  function getCorrectedPosition(preferredDirection) {\n    var _rootRef$current3, _rootRef$current3$ele;\n\n    var elementRect = rootRef === null || rootRef === void 0 ? void 0 : (_rootRef$current3 = rootRef.current) === null || _rootRef$current3 === void 0 ? void 0 : (_rootRef$current3$ele = _rootRef$current3.element) === null || _rootRef$current3$ele === void 0 ? void 0 : _rootRef$current3$ele.getBoundingClientRect();\n    var elementDimensions = [elementRect.width, elementRect.height];\n    var targetBoundaries = getTargetBoundaries();\n    var containerBoundaries = getContainerBoundaries();\n\n    var _getPosition = getPosition(elementDimensions, targetBoundaries, containerBoundaries, preferredDirection),\n        correctedPosition = _getPosition.position,\n        correctedDirection = _getPosition.direction;\n\n    setDirection(correctedDirection);\n    return correctedPosition;\n  }\n\n  useEffect(function () {\n    setCanBeClosed(false);\n\n    if (open) {\n      var localDirection = 1;\n\n      if (isRootMenu) {\n        var _rootRef$current4, _rootRef$current4$ele;\n\n        rootRef === null || rootRef === void 0 ? void 0 : (_rootRef$current4 = rootRef.current) === null || _rootRef$current4 === void 0 ? void 0 : (_rootRef$current4$ele = _rootRef$current4.element) === null || _rootRef$current4$ele === void 0 ? void 0 : _rootRef$current4$ele.focus();\n      } else {\n        var _rootRef$current5;\n\n        var parentMenu = getParentMenu(rootRef === null || rootRef === void 0 ? void 0 : (_rootRef$current5 = rootRef.current) === null || _rootRef$current5 === void 0 ? void 0 : _rootRef$current5.element);\n\n        if (parentMenu) {\n          localDirection = Number(parentMenu.dataset.direction);\n        }\n      }\n\n      var correctedPosition = getCorrectedPosition(localDirection);\n      setPosition(correctedPosition);\n      setCanBeClosed(true);\n    } else {\n      setPosition([0, 0]);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [open, x, y]);\n  var someNodesHaveIcons = React.Children.toArray(children).some(function (node) {\n    return node.type === MenuSelectableItem || node.type === MenuRadioGroup;\n  });\n  var options = React.Children.map(children, function (node) {\n    if ( /*#__PURE__*/React.isValidElement(node)) {\n      return /*#__PURE__*/React.cloneElement(node, {\n        indented: someNodesHaveIcons,\n        level: level\n      });\n    }\n  });\n  var classes = classnames(\"\".concat(prefix, \"--menu\"), (_classnames = {}, _defineProperty(_classnames, \"\".concat(prefix, \"--menu--open\"), open), _defineProperty(_classnames, \"\".concat(prefix, \"--menu--invisible\"), open && position[0] === 0 && position[1] === 0), _defineProperty(_classnames, \"\".concat(prefix, \"--menu--root\"), isRootMenu), _classnames));\n  var ulAttributes = {\n    className: classes,\n    onKeyDown: handleKeyDown,\n    onClick: handleClick,\n    role: 'menu',\n    tabIndex: -1,\n    'data-direction': direction,\n    'data-level': level,\n    style: {\n      left: \"\".concat(position[0], \"px\"),\n      top: \"\".concat(position[1], \"px\")\n    }\n  };\n  var childrenToRender = options; // if the only child is a radiogroup, don't render it as radiogroup component, but\n  // only the items to prevent duplicate markup\n\n  if (options && options.length === 1 && options[0].type === MenuRadioGroup) {\n    var radioGroupProps = options[0].props;\n    ulAttributes['aria-label'] = radioGroupProps.label;\n    childrenToRender = /*#__PURE__*/React.createElement(MenuRadioGroupOptions, {\n      items: radioGroupProps.items,\n      initialSelectedItem: radioGroupProps.initialSelectedItem,\n      onChange: radioGroupProps.onChange\n    });\n  } // if the only child is a generic group, don't render it as group component, but\n  // only the children to prevent duplicate markup\n\n\n  if (options && options.length === 1 && options[0].type === MenuGroup) {\n    var groupProps = options[0].props;\n    ulAttributes['aria-label'] = groupProps.label;\n    childrenToRender = React.Children.toArray(options[0].props.children);\n  }\n\n  return /*#__PURE__*/React.createElement(ClickListener, {\n    onClickOutside: handleClickOutside,\n    ref: rootRef\n  }, /*#__PURE__*/React.createElement(\"ul\", ulAttributes, childrenToRender));\n};\n\nMenu.propTypes = {\n  /**\n   * Whether or not the menu should automatically close when\n   * an outside click is registered\n   */\n  autoclose: PropTypes.bool,\n\n  /**\n   * Specify the children of the Menu\n   */\n  children: PropTypes.node,\n\n  /**\n   * Internal: keeps track of the nesting level of the menu\n   */\n  level: PropTypes.number,\n\n  /**\n   * Function called when the menu is closed\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Specify whether the Menu is currently open\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Specify the x position where this menu is rendered\n   */\n  x: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n\n  /**\n   * Specify the y position where this menu is rendered\n   */\n  y: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)])\n};\nexport default Menu;","map":null,"metadata":{},"sourceType":"module"}