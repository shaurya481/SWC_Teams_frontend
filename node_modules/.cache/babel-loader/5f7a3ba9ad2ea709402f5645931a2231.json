{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useResizeObserver from 'use-resize-observer/polyfilled';\nimport debounce from 'lodash.debounce';\nimport { ChevronDown16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nimport Copy from '../Copy';\nimport Button from '../Button';\nimport CopyButton from '../CopyButton';\nimport getUniqueId from '../../tools/uniqueId';\nimport copy from 'copy-to-clipboard';\nvar prefix = settings.prefix;\nvar rowHeightInPixels = 16;\nvar defaultMaxCollapsedNumberOfRows = 15;\nvar defaultMaxExpandedNumberOfRows = 0;\nvar defaultMinCollapsedNumberOfRows = 3;\nvar defaultMinExpandedNumberOfRows = 16;\n\nfunction CodeSnippet(_ref) {\n  var _classNames;\n\n  var className = _ref.className,\n      type = _ref.type,\n      children = _ref.children,\n      disabled = _ref.disabled,\n      feedback = _ref.feedback,\n      feedbackTimeout = _ref.feedbackTimeout,\n      onClick = _ref.onClick,\n      ariaLabel = _ref.ariaLabel,\n      copyLabel = _ref.copyLabel,\n      copyButtonDescription = _ref.copyButtonDescription,\n      light = _ref.light,\n      showMoreText = _ref.showMoreText,\n      showLessText = _ref.showLessText,\n      hideCopyButton = _ref.hideCopyButton,\n      wrapText = _ref.wrapText,\n      _ref$maxCollapsedNumb = _ref.maxCollapsedNumberOfRows,\n      maxCollapsedNumberOfRows = _ref$maxCollapsedNumb === void 0 ? defaultMaxCollapsedNumberOfRows : _ref$maxCollapsedNumb,\n      _ref$maxExpandedNumbe = _ref.maxExpandedNumberOfRows,\n      maxExpandedNumberOfRows = _ref$maxExpandedNumbe === void 0 ? defaultMaxExpandedNumberOfRows : _ref$maxExpandedNumbe,\n      _ref$minCollapsedNumb = _ref.minCollapsedNumberOfRows,\n      minCollapsedNumberOfRows = _ref$minCollapsedNumb === void 0 ? defaultMinCollapsedNumberOfRows : _ref$minCollapsedNumb,\n      _ref$minExpandedNumbe = _ref.minExpandedNumberOfRows,\n      minExpandedNumberOfRows = _ref$minExpandedNumbe === void 0 ? defaultMinExpandedNumberOfRows : _ref$minExpandedNumbe,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"type\", \"children\", \"disabled\", \"feedback\", \"feedbackTimeout\", \"onClick\", \"ariaLabel\", \"copyLabel\", \"copyButtonDescription\", \"light\", \"showMoreText\", \"showLessText\", \"hideCopyButton\", \"wrapText\", \"maxCollapsedNumberOfRows\", \"maxExpandedNumberOfRows\", \"minCollapsedNumberOfRows\", \"minExpandedNumberOfRows\"]);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      expandedCode = _useState2[0],\n      setExpandedCode = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      shouldShowMoreLessBtn = _useState4[0],\n      setShouldShowMoreLessBtn = _useState4[1];\n\n  var _useRef = useRef(getUniqueId()),\n      uid = _useRef.current;\n\n  var codeContentRef = useRef();\n  var codeContainerRef = useRef();\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      hasLeftOverflow = _useState6[0],\n      setHasLeftOverflow = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      hasRightOverflow = _useState8[0],\n      setHasRightOverflow = _useState8[1];\n\n  var getCodeRef = useCallback(function () {\n    if (type === 'single') {\n      return codeContainerRef;\n    }\n\n    if (type === 'multi') {\n      return codeContentRef;\n    }\n  }, [type]);\n  var getCodeRefDimensions = useCallback(function () {\n    var _getCodeRef$current = getCodeRef().current,\n        codeClientWidth = _getCodeRef$current.clientWidth,\n        codeScrollLeft = _getCodeRef$current.scrollLeft,\n        codeScrollWidth = _getCodeRef$current.scrollWidth;\n    return {\n      horizontalOverflow: codeScrollWidth > codeClientWidth,\n      codeClientWidth: codeClientWidth,\n      codeScrollWidth: codeScrollWidth,\n      codeScrollLeft: codeScrollLeft\n    };\n  }, [getCodeRef]);\n  var handleScroll = useCallback(function () {\n    if (type === 'inline' || type === 'single' && !(codeContainerRef !== null && codeContainerRef !== void 0 && codeContainerRef.current) || type === 'multi' && !(codeContentRef !== null && codeContentRef !== void 0 && codeContentRef.current)) {\n      return;\n    }\n\n    var _getCodeRefDimensions = getCodeRefDimensions(),\n        horizontalOverflow = _getCodeRefDimensions.horizontalOverflow,\n        codeClientWidth = _getCodeRefDimensions.codeClientWidth,\n        codeScrollWidth = _getCodeRefDimensions.codeScrollWidth,\n        codeScrollLeft = _getCodeRefDimensions.codeScrollLeft;\n\n    setHasLeftOverflow(horizontalOverflow && !!codeScrollLeft);\n    setHasRightOverflow(horizontalOverflow && codeScrollLeft + codeClientWidth !== codeScrollWidth);\n  }, [type, getCodeRefDimensions]);\n  useResizeObserver({\n    ref: getCodeRef(),\n    onResize: function onResize() {\n      if (codeContentRef !== null && codeContentRef !== void 0 && codeContentRef.current && type === 'multi') {\n        var _codeContentRef$curre = codeContentRef.current.getBoundingClientRect(),\n            height = _codeContentRef$curre.height;\n\n        if (maxCollapsedNumberOfRows > 0 && (maxExpandedNumberOfRows <= 0 || maxExpandedNumberOfRows > maxCollapsedNumberOfRows) && height > maxCollapsedNumberOfRows * rowHeightInPixels) {\n          setShouldShowMoreLessBtn(true);\n        } else {\n          setShouldShowMoreLessBtn(false);\n        }\n\n        if (expandedCode && minExpandedNumberOfRows > 0 && height <= minExpandedNumberOfRows * rowHeightInPixels) {\n          setExpandedCode(false);\n        }\n      }\n\n      if (codeContentRef !== null && codeContentRef !== void 0 && codeContentRef.current && type === 'multi' || codeContainerRef !== null && codeContainerRef !== void 0 && codeContainerRef.current && type === 'single') {\n        debounce(handleScroll, 200);\n      }\n    }\n  }, [type, maxCollapsedNumberOfRows, maxExpandedNumberOfRows, minExpandedNumberOfRows, rowHeightInPixels]);\n  useEffect(function () {\n    handleScroll();\n  }, [handleScroll]);\n\n  var handleCopyClick = function handleCopyClick(evt) {\n    copy(children);\n\n    if (onClick) {\n      onClick(evt);\n    }\n  };\n\n  var codeSnippetClasses = classNames(className, \"\".concat(prefix, \"--snippet\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--\").concat(type), type), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--disabled\"), type !== 'inline' && disabled), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--expand\"), expandedCode), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--light\"), light), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--no-copy\"), hideCopyButton), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--wraptext\"), wrapText), _classNames));\n  var expandCodeBtnText = expandedCode ? showLessText : showMoreText;\n\n  if (type === 'inline') {\n    if (hideCopyButton) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: codeSnippetClasses\n      }, /*#__PURE__*/React.createElement(\"code\", {\n        id: uid\n      }, children));\n    }\n\n    return /*#__PURE__*/React.createElement(Copy, _extends({}, rest, {\n      onClick: handleCopyClick,\n      \"aria-label\": copyLabel || ariaLabel,\n      \"aria-describedby\": uid,\n      className: codeSnippetClasses,\n      feedback: feedback,\n      feedbackTimeout: feedbackTimeout\n    }), /*#__PURE__*/React.createElement(\"code\", {\n      id: uid\n    }, children));\n  }\n\n  var containerStyle = {};\n\n  if (type === 'multi') {\n    var styles = {};\n\n    if (expandedCode) {\n      if (maxExpandedNumberOfRows > 0) {\n        styles.maxHeight = maxExpandedNumberOfRows * rowHeightInPixels;\n      }\n\n      if (minExpandedNumberOfRows > 0) {\n        styles.minHeight = minExpandedNumberOfRows * rowHeightInPixels;\n      }\n    } else {\n      if (maxCollapsedNumberOfRows > 0) {\n        styles.maxHeight = maxCollapsedNumberOfRows * rowHeightInPixels;\n      }\n\n      if (minCollapsedNumberOfRows > 0) {\n        styles.minHeight = minCollapsedNumberOfRows * rowHeightInPixels;\n      }\n    }\n\n    if (Object.keys(styles).length) {\n      containerStyle.style = styles;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    className: codeSnippetClasses\n  }), /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: codeContainerRef,\n    role: type === 'single' ? 'textbox' : null,\n    tabIndex: type === 'single' && !disabled ? 0 : null,\n    className: \"\".concat(prefix, \"--snippet-container\"),\n    \"aria-label\": ariaLabel || copyLabel || 'code-snippet',\n    onScroll: type === 'single' && handleScroll || null\n  }, containerStyle), /*#__PURE__*/React.createElement(\"pre\", {\n    ref: codeContentRef,\n    onScroll: type === 'multi' && handleScroll || null\n  }, /*#__PURE__*/React.createElement(\"code\", null, children))), hasLeftOverflow && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--snippet__overflow-indicator--left\")\n  }), hasRightOverflow && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--snippet__overflow-indicator--right\")\n  }), !hideCopyButton && /*#__PURE__*/React.createElement(CopyButton, {\n    disabled: disabled,\n    onClick: handleCopyClick,\n    feedback: feedback,\n    feedbackTimeout: feedbackTimeout,\n    iconDescription: copyButtonDescription\n  }), shouldShowMoreLessBtn && /*#__PURE__*/React.createElement(Button, {\n    kind: \"ghost\",\n    size: \"field\",\n    className: \"\".concat(prefix, \"--snippet-btn--expand\"),\n    disabled: disabled,\n    onClick: function onClick() {\n      return setExpandedCode(!expandedCode);\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--snippet-btn--text\")\n  }, expandCodeBtnText), /*#__PURE__*/React.createElement(ChevronDown16, {\n    \"aria-label\": expandCodeBtnText,\n    className: \"\".concat(prefix, \"--icon-chevron--down \").concat(prefix, \"--snippet__icon\"),\n    name: \"chevron--down\",\n    role: \"img\"\n  })));\n}\n\nCodeSnippet.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the containing <textbox>\n   * node\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Provide the content of your CodeSnippet as a string\n   */\n  children: PropTypes.string,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the description for the Copy Button\n   */\n  copyButtonDescription: PropTypes.string,\n\n  /**\n   * Specify a label to be read by screen readers on the containing <textbox>\n   * node\n   */\n  copyLabel: PropTypes.string,\n\n  /**\n   * Specify whether or not the CodeSnippet should be disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify the string displayed when the snippet is copied\n   */\n  feedback: PropTypes.string,\n\n  /**\n   * Specify the time it takes for the feedback message to timeout\n   */\n  feedbackTimeout: PropTypes.number,\n\n  /**\n   * Specify whether or not a copy button should be used/rendered.\n   */\n  hideCopyButton: PropTypes.bool,\n\n  /**\n   * Specify whether you are using the light variant of the Code Snippet,\n   * typically used for inline snippet to display an alternate color\n   */\n  light: PropTypes.bool,\n\n  /**\n   * Specify the maximum number of rows to be shown when in collapsed view\n   */\n  maxCollapsedNumberOfRows: PropTypes.number,\n\n  /**\n   * Specify the maximum number of rows to be shown when in expanded view\n   */\n  maxExpandedNumberOfRows: PropTypes.number,\n\n  /**\n   * Specify the minimum number of rows to be shown when in collapsed view\n   */\n  minCollapsedNumberOfRows: PropTypes.number,\n\n  /**\n   * Specify the minimum number of rows to be shown when in expanded view\n   */\n  minExpandedNumberOfRows: PropTypes.number,\n\n  /**\n   * An optional handler to listen to the `onClick` even fired by the Copy\n   * Button\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Specify a string that is displayed when the Code Snippet has been\n   * interacted with to show more lines\n   */\n  showLessText: PropTypes.string,\n\n  /**\n   * Specify a string that is displayed when the Code Snippet text is more\n   * than 15 lines\n   */\n  showMoreText: PropTypes.string,\n\n  /**\n   * Provide the type of Code Snippet\n   */\n  type: PropTypes.oneOf(['single', 'inline', 'multi']),\n\n  /**\n   * Specify whether or not to wrap the text.\n   */\n  wrapText: PropTypes.bool\n};\nCodeSnippet.defaultProps = {\n  type: 'single',\n  showMoreText: 'Show more',\n  showLessText: 'Show less',\n  wrapText: false\n};\nexport default CodeSnippet;","map":null,"metadata":{},"sourceType":"module"}