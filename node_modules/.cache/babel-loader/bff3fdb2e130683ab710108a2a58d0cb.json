{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useContext } from 'react';\nimport { useFeatureFlag } from '../FeatureFlags';\nvar prefix = settings.prefix;\nvar SubgridContext = /*#__PURE__*/React.createContext(false);\n\nfunction Grid(_ref) {\n  var _cssGridClassNames, _flexGridClassNames;\n\n  var _ref$as = _ref.as,\n      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,\n      _ref$condensed = _ref.condensed,\n      condensed = _ref$condensed === void 0 ? false : _ref$condensed,\n      _ref$narrow = _ref.narrow,\n      narrow = _ref$narrow === void 0 ? false : _ref$narrow,\n      _ref$fullWidth = _ref.fullWidth,\n      fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,\n      _ref$columns = _ref.columns,\n      columns = _ref$columns === void 0 ? 16 : _ref$columns,\n      containerClassName = _ref.className,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"as\", \"condensed\", \"narrow\", \"fullWidth\", \"columns\", \"className\", \"children\"]);\n\n  var hasCSSGrid = useFeatureFlag('enable-css-grid');\n  var isSubgrid = useContext(SubgridContext);\n  var cssGridClassNames = (_cssGridClassNames = {}, _defineProperty(_cssGridClassNames, \"\".concat(prefix, \"--css-grid\"), !isSubgrid), _defineProperty(_cssGridClassNames, \"\".concat(prefix, \"--css-grid--\").concat(columns), !isSubgrid && columns !== 16), _defineProperty(_cssGridClassNames, \"\".concat(prefix, \"--css-grid--condensed\"), condensed), _defineProperty(_cssGridClassNames, \"\".concat(prefix, \"--css-grid--narrow\"), narrow), _defineProperty(_cssGridClassNames, \"\".concat(prefix, \"--css-grid--full-width\"), fullWidth), _defineProperty(_cssGridClassNames, \"\".concat(prefix, \"--subgrid\"), isSubgrid), _defineProperty(_cssGridClassNames, \"\".concat(prefix, \"--col-span-\").concat(columns), isSubgrid && columns !== 16 || columns !== 16), _cssGridClassNames);\n  var flexGridClassNames = (_flexGridClassNames = {}, _defineProperty(_flexGridClassNames, \"\".concat(prefix, \"--grid\"), true), _defineProperty(_flexGridClassNames, \"\".concat(prefix, \"--grid--condensed\"), condensed), _defineProperty(_flexGridClassNames, \"\".concat(prefix, \"--grid--narrow\"), narrow), _defineProperty(_flexGridClassNames, \"\".concat(prefix, \"--grid--full-width\"), fullWidth), _flexGridClassNames);\n  var className = cx(containerClassName, hasCSSGrid ? cssGridClassNames : flexGridClassNames);\n  return /*#__PURE__*/React.createElement(SubgridContext.Provider, {\n    value: true\n  }, /*#__PURE__*/React.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children));\n}\n\nGrid.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n\n  /**\n   * Pass in content that will be rendered within the `Grid`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify a custom className to be applied to the `Grid`\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify how many columns wide the Grid should span\n   */\n  columns: PropTypes.number,\n\n  /**\n   * Collapse the gutter to 1px. Useful for fluid layouts.\n   * Rows have 1px of margin between them to match gutter.\n   */\n  condensed: PropTypes.bool,\n\n  /**\n   * Remove the default max width that the grid has set\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * Container hangs 16px into the gutter. Useful for\n   * typographic alignment with and without containers.\n   */\n  narrow: PropTypes.bool\n};\nexport default Grid;","map":null,"metadata":{},"sourceType":"module"}