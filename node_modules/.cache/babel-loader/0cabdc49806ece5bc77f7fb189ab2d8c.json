{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @typedef Key\n * @property key {Array<string>|string}\n * @property which {number}\n * @property keyCode {number}\n */\n\n/**\n * Check to see if at least one key code matches the key code of the\n * given event.\n *\n * @example\n * import * as keys from '../keys';\n * import { matches } from '../match';\n *\n * function handleOnKeyDown(event) {\n *   if (matches(event, [keys.Enter, keys.Space]) {\n *     // ...\n *   }\n * }\n *\n * @param {Event} event\n * @param {Array<Key>} keysToMatch\n * @returns {boolean}\n */\nexport function matches(event, keysToMatch) {\n  for (var i = 0; i < keysToMatch.length; i++) {\n    if (match(event, keysToMatch[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Check to see if the given key matches the corresponding keyboard event. Also\n * supports passing in the value directly if you can't used the given event.\n *\n * @example\n * import * as keys from '../keys';\n * import { matches } from '../match';\n *\n * function handleOnKeyDown(event) {\n *   if (match(event, keys.Enter) {\n *     // ...\n *   }\n * }\n *\n * @param {Event|number|string} eventOrCode\n * @param {Key} key\n * @returns {boolean}\n */\n\nexport function match(eventOrCode) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      key = _ref.key,\n      which = _ref.which,\n      keyCode = _ref.keyCode;\n\n  if (typeof eventOrCode === 'string') {\n    return eventOrCode === key;\n  }\n\n  if (typeof eventOrCode === 'number') {\n    return eventOrCode === which || eventOrCode === keyCode;\n  }\n\n  if (eventOrCode.key && Array.isArray(key)) {\n    return key.indexOf(eventOrCode.key) !== -1;\n  }\n\n  return eventOrCode.key === key || eventOrCode.which === which || eventOrCode.keyCode === keyCode;\n}\n/**\n * Get a string character for a given event or event code (useful for synthetic\n * events)\n *\n * @param {Event|number} eventOrCode\n * @returns {string}\n */\n\nexport function getCharacterFor(eventOrCode) {\n  if (typeof eventOrCode === 'number') {\n    return String.fromCharCode(eventOrCode);\n  }\n\n  return eventOrCode.key || String.fromCharCode(eventOrCode.which || eventOrCode.keyCode);\n}","map":null,"metadata":{},"sourceType":"module"}