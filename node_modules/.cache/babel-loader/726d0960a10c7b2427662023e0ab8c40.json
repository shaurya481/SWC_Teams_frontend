{"ast":null,"code":"import * as React from 'react';\nimport { cloneElement, isValidElement, createRef, PureComponent, forwardRef, Component, useRef, useState, useEffect, useLayoutEffect } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport debounce from 'lodash.debounce';\nimport throttle from 'lodash.throttle';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar patchResizeHandler = function patchResizeHandler(resizeCallback, refreshMode, refreshRate, refreshOptions) {\n  switch (refreshMode) {\n    case 'debounce':\n      return debounce(resizeCallback, refreshRate, refreshOptions);\n\n    case 'throttle':\n      return throttle(resizeCallback, refreshRate, refreshOptions);\n\n    default:\n      return resizeCallback;\n  }\n};\n\nvar isFunction = function isFunction(fn) {\n  return typeof fn === 'function';\n};\n\nvar isSSR = function isSSR() {\n  return typeof window === 'undefined';\n};\n\nvar isDOMElement = function isDOMElement(element) {\n  return element instanceof Element || element instanceof HTMLDocument;\n};\n\nvar createNotifier = function createNotifier(onResize, setSize, handleWidth, handleHeight) {\n  return function (_a) {\n    var width = _a.width,\n        height = _a.height;\n    setSize(function (prev) {\n      if (prev.width === width && prev.height === height) {\n        // skip if dimensions haven't changed\n        return prev;\n      }\n\n      if (prev.width === width && !handleHeight || prev.height === height && !handleWidth) {\n        // process `handleHeight/handleWidth` props\n        return prev;\n      }\n\n      if (onResize && isFunction(onResize)) {\n        onResize(width, height);\n      }\n\n      return {\n        width: width,\n        height: height\n      };\n    });\n  };\n};\n\nvar ResizeDetector =\n/** @class */\nfunction (_super) {\n  __extends(ResizeDetector, _super);\n\n  function ResizeDetector(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.cancelHandler = function () {\n      if (_this.resizeHandler && _this.resizeHandler.cancel) {\n        // cancel debounced handler\n        _this.resizeHandler.cancel();\n\n        _this.resizeHandler = null;\n      }\n    };\n\n    _this.attachObserver = function () {\n      var _a = _this.props,\n          targetRef = _a.targetRef,\n          observerOptions = _a.observerOptions;\n\n      if (isSSR()) {\n        return;\n      }\n\n      if (targetRef && targetRef.current) {\n        _this.targetRef.current = targetRef.current;\n      }\n\n      var element = _this.getElement();\n\n      if (!element) {\n        // can't find element to observe\n        return;\n      }\n\n      if (_this.observableElement && _this.observableElement === element) {\n        // element is already observed\n        return;\n      }\n\n      _this.observableElement = element;\n\n      _this.resizeObserver.observe(element, observerOptions);\n    };\n\n    _this.getElement = function () {\n      var _a = _this.props,\n          querySelector = _a.querySelector,\n          targetDomEl = _a.targetDomEl;\n      if (isSSR()) return null; // in case we pass a querySelector\n\n      if (querySelector) return document.querySelector(querySelector); // in case we pass a DOM element\n\n      if (targetDomEl && isDOMElement(targetDomEl)) return targetDomEl; // in case we pass a React ref using React.createRef()\n\n      if (_this.targetRef && isDOMElement(_this.targetRef.current)) return _this.targetRef.current; // the worse case when we don't receive any information from the parent and the library doesn't add any wrappers\n      // we have to use a deprecated `findDOMNode` method in order to find a DOM element to attach to\n\n      var currentElement = findDOMNode(_this);\n      if (!currentElement) return null;\n\n      var renderType = _this.getRenderType();\n\n      switch (renderType) {\n        case 'renderProp':\n          return currentElement;\n\n        case 'childFunction':\n          return currentElement;\n\n        case 'child':\n          return currentElement;\n\n        case 'childArray':\n          return currentElement;\n\n        default:\n          return currentElement.parentElement;\n      }\n    };\n\n    _this.createResizeHandler = function (entries) {\n      var _a = _this.props,\n          _b = _a.handleWidth,\n          handleWidth = _b === void 0 ? true : _b,\n          _c = _a.handleHeight,\n          handleHeight = _c === void 0 ? true : _c,\n          onResize = _a.onResize;\n      if (!handleWidth && !handleHeight) return;\n      var notifyResize = createNotifier(onResize, _this.setState.bind(_this), handleWidth, handleHeight);\n      entries.forEach(function (entry) {\n        var _a = entry && entry.contentRect || {},\n            width = _a.width,\n            height = _a.height;\n\n        var shouldSetSize = !_this.skipOnMount && !isSSR();\n\n        if (shouldSetSize) {\n          notifyResize({\n            width: width,\n            height: height\n          });\n        }\n\n        _this.skipOnMount = false;\n      });\n    };\n\n    _this.getRenderType = function () {\n      var _a = _this.props,\n          render = _a.render,\n          children = _a.children;\n\n      if (isFunction(render)) {\n        // DEPRECATED. Use `Child Function Pattern` instead\n        return 'renderProp';\n      }\n\n      if (isFunction(children)) {\n        return 'childFunction';\n      }\n\n      if (isValidElement(children)) {\n        return 'child';\n      }\n\n      if (Array.isArray(children)) {\n        // DEPRECATED. Wrap children with a single parent\n        return 'childArray';\n      } // DEPRECATED. Use `Child Function Pattern` instead\n\n\n      return 'parent';\n    };\n\n    var skipOnMount = props.skipOnMount,\n        refreshMode = props.refreshMode,\n        _a = props.refreshRate,\n        refreshRate = _a === void 0 ? 1000 : _a,\n        refreshOptions = props.refreshOptions;\n    _this.state = {\n      width: undefined,\n      height: undefined\n    };\n    _this.skipOnMount = skipOnMount;\n    _this.targetRef = createRef();\n    _this.observableElement = null;\n\n    if (isSSR()) {\n      return _this;\n    }\n\n    _this.resizeHandler = patchResizeHandler(_this.createResizeHandler, refreshMode, refreshRate, refreshOptions);\n    _this.resizeObserver = new window.ResizeObserver(_this.resizeHandler);\n    return _this;\n  }\n\n  ResizeDetector.prototype.componentDidMount = function () {\n    this.attachObserver();\n  };\n\n  ResizeDetector.prototype.componentDidUpdate = function () {\n    this.attachObserver();\n  };\n\n  ResizeDetector.prototype.componentWillUnmount = function () {\n    if (isSSR()) {\n      return;\n    }\n\n    this.resizeObserver.disconnect();\n    this.cancelHandler();\n  };\n\n  ResizeDetector.prototype.render = function () {\n    var _a = this.props,\n        render = _a.render,\n        children = _a.children,\n        _b = _a.nodeType,\n        WrapperTag = _b === void 0 ? 'div' : _b;\n    var _c = this.state,\n        width = _c.width,\n        height = _c.height;\n    var childProps = {\n      width: width,\n      height: height,\n      targetRef: this.targetRef\n    };\n    var renderType = this.getRenderType();\n    var typedChildren;\n\n    switch (renderType) {\n      case 'renderProp':\n        return render && render(childProps);\n\n      case 'childFunction':\n        typedChildren = children;\n        return typedChildren(childProps);\n\n      case 'child':\n        // @TODO bug prone logic\n        typedChildren = children;\n\n        if (typedChildren.type && typeof typedChildren.type === 'string') {\n          // child is a native DOM elements such as div, span etc\n          childProps.targetRef;\n\n          var nativeProps = __rest(childProps, [\"targetRef\"]);\n\n          return cloneElement(typedChildren, nativeProps);\n        } // class or functional component otherwise\n\n\n        return cloneElement(typedChildren, childProps);\n\n      case 'childArray':\n        typedChildren = children;\n        return typedChildren.map(function (el) {\n          return !!el && cloneElement(el, childProps);\n        });\n\n      default:\n        return React.createElement(WrapperTag, null);\n    }\n  };\n\n  return ResizeDetector;\n}(PureComponent);\n\nfunction withResizeDetector(ComponentInner, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var ResizeDetectorHOC =\n  /** @class */\n  function (_super) {\n    __extends(ResizeDetectorHOC, _super);\n\n    function ResizeDetectorHOC() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.ref = createRef();\n      return _this;\n    }\n\n    ResizeDetectorHOC.prototype.render = function () {\n      var _a = this.props,\n          forwardedRef = _a.forwardedRef,\n          rest = __rest(_a, [\"forwardedRef\"]);\n\n      var targetRef = forwardedRef !== null && forwardedRef !== void 0 ? forwardedRef : this.ref;\n      return React.createElement(ResizeDetector, _assign({}, options, {\n        targetRef: targetRef\n      }), React.createElement(ComponentInner, _assign({\n        targetRef: targetRef\n      }, rest)));\n    };\n\n    return ResizeDetectorHOC;\n  }(Component);\n\n  function forwardRefWrapper(props, ref) {\n    return React.createElement(ResizeDetectorHOC, _assign({}, props, {\n      forwardedRef: ref\n    }));\n  }\n\n  var name = ComponentInner.displayName || ComponentInner.name;\n  forwardRefWrapper.displayName = \"withResizeDetector(\" + name + \")\";\n  return forwardRef(forwardRefWrapper);\n}\n\nvar useEnhancedEffect = isSSR() ? useEffect : useLayoutEffect;\n\nfunction useResizeDetector(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _a = props.skipOnMount,\n      skipOnMount = _a === void 0 ? false : _a,\n      refreshMode = props.refreshMode,\n      _b = props.refreshRate,\n      refreshRate = _b === void 0 ? 1000 : _b,\n      refreshOptions = props.refreshOptions,\n      _c = props.handleWidth,\n      handleWidth = _c === void 0 ? true : _c,\n      _d = props.handleHeight,\n      handleHeight = _d === void 0 ? true : _d,\n      targetRef = props.targetRef,\n      observerOptions = props.observerOptions,\n      onResize = props.onResize;\n  var skipResize = useRef(skipOnMount);\n  var localRef = useRef(null);\n  var ref = targetRef !== null && targetRef !== void 0 ? targetRef : localRef;\n  var resizeHandler = useRef();\n\n  var _e = useState({\n    width: undefined,\n    height: undefined\n  }),\n      size = _e[0],\n      setSize = _e[1];\n\n  useEnhancedEffect(function () {\n    if (isSSR()) {\n      return;\n    }\n\n    var notifyResize = createNotifier(onResize, setSize, handleWidth, handleHeight);\n\n    var resizeCallback = function resizeCallback(entries) {\n      if (!handleWidth && !handleHeight) return;\n      entries.forEach(function (entry) {\n        var _a = entry && entry.contentRect || {},\n            width = _a.width,\n            height = _a.height;\n\n        var shouldSetSize = !skipResize.current && !isSSR();\n\n        if (shouldSetSize) {\n          notifyResize({\n            width: width,\n            height: height\n          });\n        }\n\n        skipResize.current = false;\n      });\n    };\n\n    resizeHandler.current = patchResizeHandler(resizeCallback, refreshMode, refreshRate, refreshOptions);\n    var resizeObserver = new window.ResizeObserver(resizeHandler.current);\n\n    if (ref.current) {\n      // Something wrong with typings here...\n      resizeObserver.observe(ref.current, observerOptions);\n    }\n\n    return function () {\n      resizeObserver.disconnect();\n      var patchedResizeHandler = resizeHandler.current;\n\n      if (patchedResizeHandler && patchedResizeHandler.cancel) {\n        patchedResizeHandler.cancel();\n      }\n    };\n  }, [refreshMode, refreshRate, refreshOptions, handleWidth, handleHeight, onResize, observerOptions, ref.current]);\n  return _assign({\n    ref: ref\n  }, size);\n}\n\nexport default ResizeDetector;\nexport { useResizeDetector, withResizeDetector };","map":null,"metadata":{},"sourceType":"module"}