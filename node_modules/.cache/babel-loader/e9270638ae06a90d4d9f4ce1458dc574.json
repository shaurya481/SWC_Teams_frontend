{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React, { useState, useEffect, useRef } from 'react';\nimport classnames from 'classnames';\nimport { CaretRight16, CaretLeft16, OverflowMenuHorizontal16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nimport Button from '../Button';\nvar prefix = settings.prefix;\nvar translationIds = {\n  'carbon.pagination-nav.next': 'Next',\n  'carbon.pagination-nav.previous': 'Previous',\n  'carbon.pagination-nav.item': 'Page',\n  'carbon.pagination-nav.active': 'Active',\n  'carbon.pagination-nav.of': 'of'\n};\n\nfunction translateWithId(messageId) {\n  return translationIds[messageId];\n} // https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n\n\nfunction usePrevious(value) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nfunction getCuts(page, totalItems, itemsThatFit) {\n  var splitPoint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  if (itemsThatFit >= totalItems) {\n    return {\n      front: 0,\n      back: 0\n    };\n  }\n\n  var split = splitPoint || Math.ceil(itemsThatFit / 2) - 1;\n  var frontHidden = page + 1 - split;\n  var backHidden = totalItems - page - (itemsThatFit - split) + 1;\n\n  if (frontHidden <= 1) {\n    backHidden -= frontHidden <= 0 ? Math.abs(frontHidden) + 1 : 0;\n    frontHidden = 0;\n  }\n\n  if (backHidden <= 1) {\n    frontHidden -= backHidden <= 0 ? Math.abs(backHidden) + 1 : 0;\n    backHidden = 0;\n  }\n\n  return {\n    front: frontHidden,\n    back: backHidden\n  };\n}\n\nfunction DirectionButton(_ref) {\n  var direction = _ref.direction,\n      label = _ref.label,\n      disabled = _ref.disabled,\n      onClick = _ref.onClick;\n  var icon = direction === 'forward' ? CaretRight16 : CaretLeft16;\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: \"\".concat(prefix, \"--pagination-nav__list-item\")\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: disabled,\n    renderIcon: icon,\n    kind: \"ghost\",\n    hasIconOnly: true,\n    iconDescription: label,\n    tooltipAlignment: \"center\",\n    tooltipPosition: \"bottom\",\n    onClick: onClick\n  }));\n}\n\nfunction PaginationItem(_ref2) {\n  var page = _ref2.page,\n      isActive = _ref2.isActive,\n      onClick = _ref2.onClick,\n      _ref2$translateWithId = _ref2.translateWithId,\n      t = _ref2$translateWithId === void 0 ? translateWithId : _ref2$translateWithId;\n  var itemLabel = t('carbon.pagination-nav.item');\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: \"\".concat(prefix, \"--pagination-nav__list-item\")\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: classnames(\"\".concat(prefix, \"--pagination-nav__page\"), _defineProperty({}, \"\".concat(prefix, \"--pagination-nav__page--active\"), isActive)),\n    onClick: onClick,\n    \"data-page\": page,\n    \"aria-current\": isActive ? 'page' : null\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--pagination-nav__accessibility-label\")\n  }, isActive ? \"\".concat(t('carbon.pagination-nav.active'), \", \").concat(itemLabel) : itemLabel), page));\n}\n\nfunction PaginationOverflow(_ref3) {\n  var fromIndex = _ref3.fromIndex,\n      count = _ref3.count,\n      onSelect = _ref3.onSelect,\n      _ref3$translateWithId = _ref3.translateWithId,\n      t = _ref3$translateWithId === void 0 ? translateWithId : _ref3$translateWithId;\n\n  if (count > 1) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      className: \"\".concat(prefix, \"--pagination-nav__list-item\")\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--pagination-nav__select\")\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      className: \"\".concat(prefix, \"--pagination-nav__page \").concat(prefix, \"--pagination-nav__page--select\"),\n      \"aria-label\": \"Select \".concat(t('carbon.pagination-nav.item'), \" number\"),\n      onChange: function onChange(e) {\n        var index = Number(e.target.value);\n        onSelect(index);\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      hidden: true\n    }), _toConsumableArray(Array(count)).map(function (e, i) {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: (fromIndex + i).toString(),\n        \"data-page\": fromIndex + i + 1,\n        key: \"overflow-\".concat(fromIndex + i)\n      }, fromIndex + i + 1);\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--pagination-nav__select-icon-wrapper\")\n    }, /*#__PURE__*/React.createElement(OverflowMenuHorizontal16, {\n      className: \"\".concat(prefix, \"--pagination-nav__select-icon\")\n    }))));\n  }\n\n  if (count === 1) {\n    return /*#__PURE__*/React.createElement(PaginationItem, {\n      page: fromIndex + 1,\n      translateWithId: t,\n      onClick: function onClick() {\n        onSelect(fromIndex);\n      }\n    });\n  }\n\n  return null;\n}\n\nvar PaginationNav = /*#__PURE__*/React.forwardRef(function PaginationNav(_ref4, ref) {\n  var className = _ref4.className,\n      _ref4$onChange = _ref4.onChange,\n      onChange = _ref4$onChange === void 0 ? function () {} : _ref4$onChange,\n      totalItems = _ref4.totalItems,\n      _ref4$itemsShown = _ref4.itemsShown,\n      itemsShown = _ref4$itemsShown === void 0 ? 10 : _ref4$itemsShown,\n      _ref4$page = _ref4.page,\n      page = _ref4$page === void 0 ? 0 : _ref4$page,\n      _ref4$loop = _ref4.loop,\n      loop = _ref4$loop === void 0 ? false : _ref4$loop,\n      _ref4$translateWithId = _ref4.translateWithId,\n      t = _ref4$translateWithId === void 0 ? translateWithId : _ref4$translateWithId,\n      rest = _objectWithoutProperties(_ref4, [\"className\", \"onChange\", \"totalItems\", \"itemsShown\", \"page\", \"loop\", \"translateWithId\"]);\n\n  var _useState = useState(page),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentPage = _useState2[0],\n      setCurrentPage = _useState2[1];\n\n  var _useState3 = useState(itemsShown >= 4 ? itemsShown : 4),\n      _useState4 = _slicedToArray(_useState3, 2),\n      itemsThatFit = _useState4[0],\n      setItemsThatFit = _useState4[1];\n\n  var _useState5 = useState(getCuts(currentPage, totalItems, itemsThatFit)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cuts = _useState6[0],\n      setCuts = _useState6[1];\n\n  var prevPage = usePrevious(currentPage);\n\n  function jumpToItem(index) {\n    if (index >= 0 && index < totalItems) {\n      setCurrentPage(index);\n      onChange(index);\n    }\n  }\n\n  function jumpToNext() {\n    var nextIndex = currentPage + 1;\n\n    if (nextIndex >= totalItems) {\n      if (loop) {\n        jumpToItem(0);\n      }\n    } else {\n      jumpToItem(nextIndex);\n    }\n  }\n\n  function jumpToPrevious() {\n    var previousIndex = currentPage - 1;\n\n    if (previousIndex < 0) {\n      if (loop) {\n        jumpToItem(totalItems - 1);\n      }\n    } else {\n      jumpToItem(previousIndex);\n    }\n  }\n\n  function pageWouldBeHidden(page) {\n    var startOffset = itemsThatFit <= 4 && page > 1 ? 0 : 1;\n    var wouldBeHiddenInFront = page >= startOffset && page <= cuts.front;\n    var wouldBeHiddenInBack = page >= totalItems - cuts.back - 1 && page <= totalItems - 2;\n    return wouldBeHiddenInFront || wouldBeHiddenInBack;\n  } // jump to new page if props.page is updated\n\n\n  useEffect(function () {\n    setCurrentPage(page);\n  }, [page]); // re-calculate cuts if props.totalItems or props.itemsShown change\n\n  useEffect(function () {\n    setItemsThatFit(itemsShown >= 4 ? itemsShown : 4);\n    setCuts(getCuts(currentPage, totalItems, itemsShown));\n  }, [totalItems, itemsShown]); // eslint-disable-line react-hooks/exhaustive-deps\n  // update cuts if necessary whenever currentPage changes\n\n  useEffect(function () {\n    if (pageWouldBeHidden(currentPage)) {\n      var delta = currentPage - prevPage || 0;\n\n      if (delta > 0) {\n        var splitPoint = itemsThatFit - 3;\n        setCuts(getCuts(currentPage, totalItems, itemsThatFit, splitPoint));\n      } else {\n        var _splitPoint = itemsThatFit > 4 ? 2 : 1;\n\n        setCuts(getCuts(currentPage, totalItems, itemsThatFit, _splitPoint));\n      }\n    }\n  }, [currentPage]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var classNames = classnames(\"\".concat(prefix, \"--pagination-nav\"), className);\n  var backwardButtonDisabled = !loop && currentPage === 0;\n  var forwardButtonDisabled = !loop && currentPage === totalItems - 1;\n  var startOffset = itemsThatFit <= 4 && currentPage > 1 ? 0 : 1;\n  return /*#__PURE__*/React.createElement(\"nav\", _extends({\n    className: classNames,\n    ref: ref\n  }, rest, {\n    \"aria-label\": \"pagination\"\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"\".concat(prefix, \"--pagination-nav__list\")\n  }, /*#__PURE__*/React.createElement(DirectionButton, {\n    direction: \"backward\",\n    label: t('carbon.pagination-nav.previous'),\n    disabled: backwardButtonDisabled,\n    onClick: jumpToPrevious\n  }), // render first item if at least 5 items can be displayed or\n  // 4 items can be displayed and the current page is either 0 or 1\n  (itemsThatFit >= 5 || itemsThatFit <= 4 && currentPage <= 1) && /*#__PURE__*/React.createElement(PaginationItem, {\n    page: 1,\n    translateWithId: t,\n    isActive: currentPage === 0,\n    onClick: function onClick() {\n      jumpToItem(0);\n    }\n  }), /*#__PURE__*/React.createElement(PaginationOverflow, {\n    fromIndex: startOffset,\n    count: cuts.front,\n    onSelect: jumpToItem\n  }), // render items between overflows\n  _toConsumableArray(Array(totalItems)).map(function (e, i) {\n    return i;\n  }).slice(startOffset + cuts.front, (1 + cuts.back) * -1).map(function (item) {\n    return /*#__PURE__*/React.createElement(PaginationItem, {\n      key: \"item-\".concat(item),\n      page: item + 1,\n      translateWithId: t,\n      isActive: currentPage === item,\n      onClick: function onClick() {\n        jumpToItem(item);\n      }\n    });\n  }), /*#__PURE__*/React.createElement(PaginationOverflow, {\n    fromIndex: totalItems - cuts.back - 1,\n    count: cuts.back,\n    onSelect: jumpToItem\n  }), // render last item unless there is only one in total\n  totalItems > 1 && /*#__PURE__*/React.createElement(PaginationItem, {\n    page: totalItems,\n    translateWithId: t,\n    isActive: currentPage === totalItems - 1,\n    onClick: function onClick() {\n      jumpToItem(totalItems - 1);\n    }\n  }), /*#__PURE__*/React.createElement(DirectionButton, {\n    direction: \"forward\",\n    label: t('carbon.pagination-nav.next'),\n    disabled: forwardButtonDisabled,\n    onClick: jumpToNext\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\",\n    className: \"\".concat(prefix, \"--pagination-nav__accessibility-label\")\n  }, \"\".concat(t('carbon.pagination-nav.item'), \" \").concat(currentPage + 1, \" \").concat(t('carbon.pagination-nav.of'), \" \").concat(totalItems)));\n});\nDirectionButton.propTypes = {\n  /**\n   * The direction this button represents (\"forward\" or \"backward\").\n   */\n  direction: PropTypes.oneOf(['forward', 'backward']),\n\n  /**\n   * Whether or not the button should be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The label shown in the button's tooltip.\n   */\n  label: PropTypes.string,\n\n  /**\n   * The callback function called when the button is clicked.\n   */\n  onClick: PropTypes.func\n};\nPaginationItem.propTypes = {\n  /**\n   * Whether or not this is the currently active page.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * The callback function called when the item is clicked.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * The page number this item represents.\n   */\n  page: PropTypes.number,\n\n  /**\n   * Specify a custom translation function that takes in a message identifier\n   * and returns the localized string for the message\n   */\n  translateWithId: PropTypes.func\n};\nPaginationOverflow.propTypes = {\n  /**\n   * How many items to display in this overflow.\n   */\n  count: PropTypes.number,\n\n  /**\n   * From which index on this overflow should start displaying pages.\n   */\n  fromIndex: PropTypes.number,\n\n  /**\n   * The callback function called when the user selects a page from the overflow.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Specify a custom translation function that takes in a message identifier\n   * and returns the localized string for the message\n   */\n  translateWithId: PropTypes.func\n};\nPaginationNav.propTypes = {\n  /**\n   * Additional CSS class names.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The number of items to be shown.\n   */\n  itemsShown: PropTypes.number,\n\n  /**\n   * Whether user should be able to loop through the items when reaching first / last.\n   */\n  loop: PropTypes.bool,\n\n  /**\n   * The callback function called when the current page changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The current page.\n   */\n  page: PropTypes.number,\n\n  /**\n   * The total number of items.\n   */\n  totalItems: PropTypes.number,\n\n  /**\n   * Specify a custom translation function that takes in a message identifier\n   * and returns the localized string for the message\n   */\n  translateWithId: PropTypes.func\n};\nexport default PaginationNav;","map":null,"metadata":{},"sourceType":"module"}