{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @param {Array} a An array.\n * @returns {Array} The flattened version of the given array.\n */\n\n\nfunction flatten(a) {\n  return a.reduce(function (result, item) {\n    if (Array.isArray(item)) {\n      result.push.apply(result, _toConsumableArray(flatten(item)));\n    } else {\n      result.push(item);\n    }\n\n    return result;\n  }, []);\n}\n/**\n * An interface for defining mix-in classes. Used with {@link mixin}.\n * @function mixinfn\n * @param {Class} ToMix The class to mix.\n * @returns {Class} The class mixed-in with the given ToMix class.\n */\n\n/**\n * @function mixin\n * @param {...mixinfn} mixinfns The functions generating mix-ins.\n * @returns {Class} The class generated with the given mix-ins.\n */\n\n\nexport default function mixin() {\n  for (var _len = arguments.length, mixinfns = new Array(_len), _key = 0; _key < _len; _key++) {\n    mixinfns[_key] = arguments[_key];\n  }\n\n  return flatten(mixinfns).reduce(function (Class, mixinfn) {\n    return mixinfn(Class);\n  }, /*#__PURE__*/function () {\n    function _class() {\n      _classCallCheck(this, _class);\n    }\n\n    return _class;\n  }());\n}","map":null,"metadata":{},"sourceType":"module"}