{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"body\", \"className\", \"iconDescription\", \"inputInvalidText\", \"inputLabelText\", \"inputPlaceholderText\", \"label\", \"onClose\", \"onRequestSubmit\", \"open\", \"preventCloseOnClickOutside\", \"primaryButtonText\", \"resourceName\", \"secondaryButtonText\", \"textConfirmation\", \"title\"]; //\n// Copyright IBM Corp. 2020, 2021\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\nimport React, { useState, useRef, forwardRef } from 'react';\nimport cx from 'classnames';\nimport { Button, ComposedModal, ModalHeader, ModalFooter, ModalBody, TextInput } from 'carbon-components-react';\nimport PropTypes from 'prop-types';\nimport uuidv4 from '../../global/js/utils/uuidv4';\nimport { pkg } from '../../settings';\nvar componentName = 'RemoveModal';\nexport var RemoveModal = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var body = _ref.body,\n      className = _ref.className,\n      iconDescription = _ref.iconDescription,\n      inputInvalidText = _ref.inputInvalidText,\n      inputLabelText = _ref.inputLabelText,\n      inputPlaceholderText = _ref.inputPlaceholderText,\n      label = _ref.label,\n      onClose = _ref.onClose,\n      onRequestSubmit = _ref.onRequestSubmit,\n      open = _ref.open,\n      preventCloseOnClickOutside = _ref.preventCloseOnClickOutside,\n      primaryButtonText = _ref.primaryButtonText,\n      resourceName = _ref.resourceName,\n      secondaryButtonText = _ref.secondaryButtonText,\n      textConfirmation = _ref.textConfirmation,\n      title = _ref.title,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      userInput = _useState2[0],\n      setUserInput = _useState2[1];\n\n  var idRef = useRef(uuidv4());\n\n  var onChangeHandler = function onChangeHandler(e) {\n    setUserInput(e.target.value);\n  };\n\n  var primaryButtonDisabled = textConfirmation && userInput !== resourceName;\n  var blockClass = \"\".concat(pkg.prefix, \"--remove-modal\");\n  return /*#__PURE__*/React.createElement(ComposedModal, _extends({}, rest, {\n    className: cx(blockClass, className),\n    size: \"sm\",\n    open: open,\n    ref: ref,\n    preventCloseOnClickOutside: preventCloseOnClickOutside,\n    onClose: onClose\n  }), /*#__PURE__*/React.createElement(ModalHeader, {\n    title: title,\n    label: label,\n    iconDescription: iconDescription\n  }), /*#__PURE__*/React.createElement(ModalBody, null, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(blockClass, \"__body\")\n  }, body), textConfirmation && /*#__PURE__*/React.createElement(TextInput, {\n    id: \"\".concat(idRef.current, \"-confirmation-input\"),\n    className: \"\".concat(blockClass, \"__input\"),\n    invalidText: inputInvalidText,\n    labelText: inputLabelText,\n    placeholder: inputPlaceholderText,\n    onChange: onChangeHandler\n  })), /*#__PURE__*/React.createElement(ModalFooter, null, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    kind: \"secondary\",\n    onClick: onClose\n  }, secondaryButtonText), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    kind: \"danger\",\n    onClick: onRequestSubmit,\n    disabled: primaryButtonDisabled\n  }, primaryButtonText)));\n}); // Return a placeholder if not released and not enabled by feature flag\n\nRemoveModal = pkg.checkComponentEnabled(RemoveModal, componentName);\nRemoveModal.propTypes = {\n  /**\n   * The content to be displayed in the body of the modal\n   */\n  body: PropTypes.string.isRequired,\n\n  /**\n   * Optional classname\n   */\n  className: PropTypes.string,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string.isRequired,\n\n  /**\n   * Message showed when user input fails validation\n   */\n  inputInvalidText: PropTypes.string,\n\n  /**\n   * Label for text box\n   */\n  inputLabelText: PropTypes.string,\n\n  /**\n   * Placeholder for text box\n   */\n  inputPlaceholderText: PropTypes.string,\n\n  /**\n   * Specify the modal label texts\n   */\n  label: PropTypes.string,\n\n  /**\n   * Callback function that runs when user closes the modal\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback function that runs when user submits the modal\n   */\n  onRequestSubmit: PropTypes.func,\n\n  /**\n   * Specify whether the Modal is currently open\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * Prevent closing on click outside of modal\n   */\n  preventCloseOnClickOutside: PropTypes.bool,\n\n  /**\n   * Specify the text for the primary button\n   */\n  primaryButtonText: PropTypes.string,\n\n  /**\n   * The name of the resource being acted upon\n   */\n  resourceName: PropTypes.string.isRequired,\n\n  /**\n   * Specify the text for the secondary button\n   */\n  secondaryButtonText: PropTypes.string,\n\n  /**\n   * Specify whether or not to show the text confirmation input\n   */\n  textConfirmation: PropTypes.bool,\n\n  /**\n   * The text displayed at the top of the modal\n   */\n  title: PropTypes.string.isRequired\n};\nRemoveModal.defaultProps = {\n  textConfirmation: false\n};\nRemoveModal.displayName = componentName;","map":null,"metadata":{},"sourceType":"module"}