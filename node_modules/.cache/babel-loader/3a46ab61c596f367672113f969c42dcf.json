{"ast":null,"code":"/**\n * Copyright IBM Corp. 2020, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport var timeAgo = function timeAgo(_ref) {\n  var previousTime = _ref.previousTime,\n      secondsAgoText = _ref.secondsAgoText,\n      minuteAgoText = _ref.minuteAgoText,\n      minutesAgoText = _ref.minutesAgoText,\n      hoursAgoText = _ref.hoursAgoText,\n      hourAgoText = _ref.hourAgoText,\n      daysAgoText = _ref.daysAgoText,\n      yesterdayAtText = _ref.yesterdayAtText,\n      monthsAgoText = _ref.monthsAgoText,\n      monthAgoText = _ref.monthAgoText,\n      yearsAgoText = _ref.yearsAgoText,\n      yearAgoText = _ref.yearAgoText,\n      nowText = _ref.nowText;\n  var msPerMinute = 60 * 1000;\n  var msPerHour = msPerMinute * 60;\n  var msPerDay = msPerHour * 24;\n  var msPerMonth = msPerDay * 30;\n  var msPerYear = msPerDay * 365;\n  var elapsed = new Date() - previousTime;\n\n  switch (true) {\n    case elapsed < msPerMinute:\n      return Math.round(elapsed / 1000) > 10 ? secondsAgoText(Math.round(elapsed / 1000)) : nowText;\n\n    case elapsed < msPerHour:\n      return Math.round(elapsed / msPerMinute) > 1 ? minutesAgoText(Math.round(elapsed / msPerMinute)) : minuteAgoText(Math.round(elapsed / msPerMinute));\n\n    case elapsed < msPerDay:\n      return Math.round(elapsed / msPerHour) > 1 ? hoursAgoText(Math.round(elapsed / msPerHour)) : hourAgoText(Math.round(elapsed / msPerHour));\n\n    case elapsed < msPerMonth:\n      return Math.round(elapsed / msPerDay) > 1 ? daysAgoText(Math.round(elapsed / msPerDay)) : yesterdayAtText(new Date(previousTime).toLocaleTimeString(getBrowserLocales[0]));\n\n    case elapsed < msPerYear:\n      return Math.round(elapsed / msPerMonth) > 1 ? monthsAgoText(Math.round(elapsed / msPerMonth)) : monthAgoText(Math.round(elapsed / msPerMonth));\n\n    default:\n      return Math.round(elapsed / msPerYear) > 1 ? yearsAgoText(Math.round(elapsed / msPerYear)) : yearAgoText(Math.round(elapsed / msPerYear));\n  }\n};\n\nvar getBrowserLocales = function getBrowserLocales() {\n  var browserLocales = navigator.languages === undefined ? [navigator.language, 'en'] // add fallback 'en' if we can't get locale value from browser\n  : navigator.languages;\n  return browserLocales.map(function (locale) {\n    var trimmedLocale = locale.trim();\n    return trimmedLocale;\n  });\n};","map":null,"metadata":{},"sourceType":"module"}