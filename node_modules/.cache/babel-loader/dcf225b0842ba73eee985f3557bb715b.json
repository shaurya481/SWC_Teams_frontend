{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { CheckmarkFilled16, ErrorFilled16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nimport deprecate from '../../prop-types/deprecate';\nimport Loading from '../Loading';\nvar prefix = settings.prefix;\nexport default function InlineLoading(_ref) {\n  var className = _ref.className,\n      success = _ref.success,\n      _ref$status = _ref.status,\n      status = _ref$status === void 0 ? success ? 'finished' : 'active' : _ref$status,\n      iconDescription = _ref.iconDescription,\n      description = _ref.description,\n      onSuccess = _ref.onSuccess,\n      successDelay = _ref.successDelay,\n      other = _objectWithoutProperties(_ref, [\"className\", \"success\", \"status\", \"iconDescription\", \"description\", \"onSuccess\", \"successDelay\"]);\n\n  var loadingClasses = classNames(\"\".concat(prefix, \"--inline-loading\"), className);\n\n  var getLoading = function getLoading() {\n    if (status === 'error') {\n      return /*#__PURE__*/React.createElement(ErrorFilled16, {\n        className: \"\".concat(prefix, \"--inline-loading--error\")\n      });\n    }\n\n    if (status === 'finished') {\n      setTimeout(function () {\n        if (onSuccess) {\n          onSuccess();\n        }\n      }, successDelay);\n      return /*#__PURE__*/React.createElement(CheckmarkFilled16, {\n        className: \"\".concat(prefix, \"--inline-loading__checkmark-container\")\n      });\n    }\n\n    if (status === 'inactive' || status === 'active') {\n      return /*#__PURE__*/React.createElement(Loading, {\n        small: true,\n        description: iconDescription,\n        withOverlay: false,\n        active: status === 'active'\n      });\n    }\n\n    return undefined;\n  };\n\n  var loadingText = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--inline-loading__text\")\n  }, description);\n  var loading = getLoading();\n  var loadingAnimation = loading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--inline-loading__animation\")\n  }, loading);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: loadingClasses\n  }, other, {\n    \"aria-live\": 'assertive' || other['aria-live']\n  }), loadingAnimation, description && loadingText);\n}\nInlineLoading.propTypes = {\n  /**\n   * Specify a custom className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the description for the inline loading text\n   */\n  description: PropTypes.node,\n\n  /**\n   * Specify the description for the inline loading text\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Provide an optional handler to be inovked when <InlineLoading> is\n   * successful\n   */\n  onSuccess: PropTypes.func,\n\n  /**\n   * Specify the loading status\n   */\n  status: PropTypes.oneOf(['inactive', 'active', 'finished', 'error']),\n\n  /**\n   * Specify whether the load was successful\n   */\n  success: deprecate(PropTypes.bool, \"\\nThe prop `success` for InlineLoading has been deprecated in favor of `status`. Please use `status=\\\"finished\\\"` instead.\"),\n\n  /**\n   * Provide a delay for the `setTimeout` for success\n   */\n  successDelay: PropTypes.number\n};\nInlineLoading.defaultProps = {\n  successDelay: 1500\n};","map":null,"metadata":{},"sourceType":"module"}