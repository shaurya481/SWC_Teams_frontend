{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"actionToolbarButtons\", \"actions\", \"animateTitle\", \"children\", \"className\", \"closeIconDescription\", \"condensedActions\", \"currentStep\", \"includeOverlay\", \"labelText\", \"navigationBackIconDescription\", \"onNavigationBack\", \"onRequestClose\", \"onUnmount\", \"open\", \"pageContentSelector\", \"placement\", \"selectorPageContent\", \"selectorPrimaryFocus\", \"size\", \"slideIn\", \"subtitle\", \"title\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2020, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\n\nimport React, { useState, useEffect, useRef } from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport ReactResizeDetector from 'react-resize-detector';\nimport wrapFocus from '../../global/js/utils/wrapFocus';\nimport { pkg } from '../../settings';\nimport { allPropTypes } from '../../global/js/utils/props-helper';\nimport { SIDE_PANEL_SIZES } from './constants';\nimport { deprecateProp } from '../../global/js/utils/props-helper'; // Carbon and package components we use.\n\nimport { Button } from 'carbon-components-react';\nimport { Close20, ArrowLeft20 } from '@carbon/icons-react';\nimport { ActionSet } from '../ActionSet';\nvar blockClass = \"\".concat(pkg.prefix, \"--side-panel\");\nvar componentName = 'SidePanel'; // NOTE: the component SCSS is not imported here: it is rolled up separately.\n\n/**\n * Side panels keep users in-context of a page while performing tasks like navigating, editing, viewing details, or configuring something new.\n */\n\nexport var SidePanel = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref4, _cx, _cx2;\n\n  var actionToolbarButtons = _ref.actionToolbarButtons,\n      actions = _ref.actions,\n      animateTitle = _ref.animateTitle,\n      children = _ref.children,\n      className = _ref.className,\n      closeIconDescription = _ref.closeIconDescription,\n      condensedActions = _ref.condensedActions,\n      currentStep = _ref.currentStep,\n      includeOverlay = _ref.includeOverlay,\n      labelText = _ref.labelText,\n      navigationBackIconDescription = _ref.navigationBackIconDescription,\n      onNavigationBack = _ref.onNavigationBack,\n      onRequestClose = _ref.onRequestClose,\n      onUnmount = _ref.onUnmount,\n      open = _ref.open,\n      pageContentSelector = _ref.pageContentSelector,\n      placement = _ref.placement,\n      selectorPageContent = _ref.selectorPageContent,\n      selectorPrimaryFocus = _ref.selectorPrimaryFocus,\n      size = _ref.size,\n      slideIn = _ref.slideIn,\n      subtitle = _ref.subtitle,\n      title = _ref.title,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(open),\n      _useState2 = _slicedToArray(_useState, 2),\n      shouldRender = _useState2[0],\n      setRender = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      animationComplete = _useState4[0],\n      setAnimationComplete = _useState4[1];\n\n  var sidePanelRef = useRef();\n  var sidePanelOverlayRef = useRef();\n  var startTrapRef = useRef();\n  var endTrapRef = useRef();\n  var sidePanelInnerRef = useRef();\n  var sidePanelCloseRef = useRef(); // scroll panel to top going between steps\n\n  useEffect(function () {\n    var panelRef = ref || sidePanelRef;\n\n    if (panelRef && panelRef.current) {\n      panelRef.current.scrollTop = 0;\n    }\n  }, [currentStep, ref]); // set initial focus when side panel opens\n\n  useEffect(function () {\n    var initialFocus = function initialFocus(focusContainerElement) {\n      var containerElement = focusContainerElement;\n      var primaryFocusElement = containerElement && containerElement.querySelector(selectorPrimaryFocus);\n\n      if (primaryFocusElement) {\n        return primaryFocusElement;\n      } else {\n        return sidePanelCloseRef && sidePanelCloseRef.current;\n      }\n    };\n\n    var focusButton = function focusButton(focusContainerElement) {\n      var target = initialFocus(focusContainerElement);\n      target === null || target === void 0 ? void 0 : target.focus();\n    };\n\n    if (open && animationComplete) {\n      focusButton(sidePanelInnerRef.current);\n    }\n  }, [selectorPrimaryFocus, open, animationComplete]);\n  useEffect(function () {\n    if (open && actions && actions.length && animationComplete) {\n      var sidePanelOuter = document.querySelector(\"#\".concat(blockClass, \"-outer\"));\n      var actionsContainer = getActionsContainerElement();\n      var actionsHeight = (actionsContainer === null || actionsContainer === void 0 ? void 0 : actionsContainer.offsetHeight) + 16; // add additional 1rem spacing to bottom padding\n\n      actionsHeight = \"\".concat(Math.round(actionsHeight / 16), \"rem\");\n      sidePanelOuter === null || sidePanelOuter === void 0 ? void 0 : sidePanelOuter.style.setProperty(\"--\".concat(blockClass, \"--content-bottom-padding\"), actionsHeight);\n    }\n  }, [actions, condensedActions, open, animationComplete]);\n  /* istanbul ignore next */\n\n  var handleResize = function handleResize() {\n    var sidePanelOuter = document.querySelector(\"#\".concat(blockClass, \"-outer\"));\n    var actionsContainer = getActionsContainerElement();\n    var actionsHeight = actionsContainer.offsetHeight + 16; // add additional 1rem spacing to bottom padding\n\n    actionsHeight = \"\".concat(Math.round(actionsHeight / 16), \"rem\");\n    sidePanelOuter.style.setProperty(\"--\".concat(blockClass, \"--content-bottom-padding\"), actionsHeight);\n  };\n\n  var getActionsContainerElement = function getActionsContainerElement() {\n    var sidePanelOuter = document.querySelector(\"#\".concat(blockClass, \"-outer\"));\n    return sidePanelOuter && sidePanelOuter.querySelector(\".\".concat(blockClass, \"__actions-container\"));\n  }; // Title and subtitle scroll animaton\n\n\n  useEffect(function () {\n    if (open && animateTitle && animationComplete) {\n      var sidePanelOuter = document.querySelector(\"#\".concat(blockClass, \"-outer\"));\n      var sidePanelTitleElement = document.querySelector(\".\".concat(blockClass, \"__title-text\"));\n      var sidePanelCollapsedTitleElement = document.querySelector(\".\".concat(blockClass, \"__collapsed-title-text\"));\n      var sidePanelSubtitleElement = document.querySelector(\".\".concat(\"\".concat(blockClass, \"__subtitle-text\")));\n      var sidePanelSubtitleElementHeight = sidePanelSubtitleElement ? sidePanelSubtitleElement.offsetHeight : 52; // set default subtitle height if a subtitle is not provided to enable scrolling animation\n\n      /* istanbul ignore next */\n\n      sidePanelOuter && sidePanelOuter.addEventListener('scroll', function () {\n        var scrollTop = sidePanelRef.current.scrollTop; // if scrolling has occured\n\n        if (scrollTop > 0) {\n          sidePanelOuter.classList.add(\"\".concat(blockClass, \"__with-condensed-header\")); // Set subtitle opacity calculation here\n          // as scroll progresses\n\n          var titleOpacity = Math.min(1, (sidePanelSubtitleElementHeight - scrollTop) / sidePanelSubtitleElementHeight);\n          titleOpacity = titleOpacity < 0 ? 0 : titleOpacity;\n          sidePanelOuter.style.setProperty(\"--\".concat(blockClass, \"--subtitle-opacity\"), titleOpacity); // Calculate divider opacity to avoid border\n          // abruptly appearing when scrolling starts.\n          // This approach uses a pseudo element and sets\n          // the opacity as scroll progresses.\n\n          var dividerOpacity = Math.min(scrollTop / sidePanelSubtitleElementHeight, 1);\n          sidePanelOuter.style.setProperty(\"--\".concat(blockClass, \"--divider-opacity\"), \"\".concat(Math.min(1, dividerOpacity))); // We need to know the height of the title element\n          // so that we know how far to place the action toolbar\n          // from the top since it is sticky\n\n          var titleHeight = Math.max(sidePanelTitleElement.offsetHeight);\n          sidePanelOuter.style.setProperty(\"--\".concat(blockClass, \"--title-height\"), \"\".concat(titleHeight + 16, \"px\")); // Set title y positioning\n\n          var titleYPosition = Math.min(scrollTop / sidePanelSubtitleElementHeight, 1);\n          sidePanelOuter.style.setProperty(\"--\".concat(blockClass, \"--title-y-position\"), \"\".concat(-Math.abs(titleYPosition), \"rem\")); // mark title with aria-hidden={true} if opacity reaches 0\n\n          if (titleOpacity === 0) {\n            sidePanelTitleElement.setAttribute('aria-hidden', 'true');\n            sidePanelCollapsedTitleElement.setAttribute('aria-hidden', 'false');\n          } // Set collapsed title y positioning\n\n\n          var collapsedTitleYPosition = Math.min(1, (sidePanelSubtitleElementHeight - scrollTop) / sidePanelSubtitleElementHeight);\n          collapsedTitleYPosition = collapsedTitleYPosition < 0 ? 0 : collapsedTitleYPosition;\n          sidePanelOuter.style.setProperty(\"--\".concat(blockClass, \"--collapsed-title-y-position\"), \"\".concat(collapsedTitleYPosition, \"rem\"));\n        } else {\n          sidePanelTitleElement.setAttribute('aria-hidden', 'false');\n          sidePanelCollapsedTitleElement.setAttribute('aria-hidden', 'true');\n          sidePanelOuter.classList.remove(\"\".concat(blockClass, \"__with-condensed-header\"));\n          sidePanelOuter.style.setProperty(\"--\".concat(blockClass, \"--subtitle-opacity\"), 1);\n          sidePanelOuter.style.setProperty(\"--\".concat(blockClass, \"--title-y-position\"), 0);\n          sidePanelOuter.style.setProperty(\"--\".concat(blockClass, \"--divider-opacity\"), 0);\n          sidePanelOuter.style.setProperty(\"--\".concat(blockClass, \"--collapsed-title-y-position\"), \"1rem\");\n        }\n      });\n    }\n\n    if (open && shouldRender && !animateTitle) {\n      var _sidePanelOuter = document.querySelector(\"#\".concat(blockClass, \"-outer\"));\n\n      var _sidePanelTitleElement = document.querySelector(\".\".concat(blockClass, \"__title-container > .\").concat(blockClass, \"__title-text\"));\n\n      var _sidePanelSubtitleElement = document.querySelector(\".\".concat(blockClass, \"__subtitle-text\"));\n\n      var _sidePanelSubtitleElementHeight = _sidePanelSubtitleElement ? _sidePanelSubtitleElement.offsetHeight : 0;\n\n      var titleHeight = (_sidePanelTitleElement === null || _sidePanelTitleElement === void 0 ? void 0 : _sidePanelTitleElement.offsetHeight) + 24;\n      _sidePanelOuter === null || _sidePanelOuter === void 0 ? void 0 : _sidePanelOuter.style.setProperty(\"--\".concat(blockClass, \"--title-container-height\"), \"\".concat(titleHeight, \"px\"));\n      _sidePanelOuter === null || _sidePanelOuter === void 0 ? void 0 : _sidePanelOuter.style.setProperty(\"--\".concat(blockClass, \"--subtitle-container-height\"), \"\".concat(_sidePanelSubtitleElementHeight, \"px\"));\n    }\n  }, [open, animateTitle, animationComplete, shouldRender]); // click outside functionality if `includeOverlay` prop is set\n\n  useEffect(function () {\n    var handleOutsideClick = function handleOutsideClick(e) {\n      if (sidePanelRef.current && sidePanelOverlayRef.current && sidePanelOverlayRef.current.contains(e.target) && onRequestClose) {\n        onRequestClose();\n      }\n    };\n\n    if (includeOverlay) {\n      document.addEventListener('click', handleOutsideClick);\n    }\n\n    return function () {\n      document.removeEventListener('click', handleOutsideClick);\n    };\n  }, [includeOverlay, onRequestClose, open]); // initialize the side panel to open\n\n  useEffect(function () {\n    if (open) {\n      setRender(true);\n    }\n  }, [open]); // initialize the side panel to close\n\n  var onAnimationEnd = function onAnimationEnd() {\n    if (!open) {\n      onUnmount && onUnmount();\n      setRender(false);\n    }\n\n    sidePanelRef.current.style.overflow = 'auto';\n    sidePanelRef.current.style.overflowX = 'hidden';\n    setAnimationComplete(true);\n  }; // initializes the side panel to open and prevents the side panel from being scrolled during animation\n\n\n  var onAnimationStart = function onAnimationStart() {\n    sidePanelRef.current.style.overflow = 'hidden';\n    setAnimationComplete(false);\n  }; // used to reset margins of the slide in panel when closed/closing\n\n\n  useEffect(function () {\n    if (!open && slideIn) {\n      var pageContentElement = document.querySelector(selectorPageContent || pageContentSelector);\n\n      if (placement && placement === 'right') {\n        pageContentElement.style.marginRight = 0;\n      } else {\n        pageContentElement.style.marginLeft = 0;\n      }\n    }\n  }, [open, placement, selectorPageContent, pageContentSelector, slideIn]); // used to set margins of content for slide in panel version\n\n  useEffect(function () {\n    if (shouldRender && slideIn) {\n      var pageContentElement = document.querySelector(selectorPageContent || pageContentSelector);\n\n      if (placement && placement === 'right') {\n        pageContentElement.style.marginRight = 0;\n        pageContentElement.style.transition = 'margin-right 250ms';\n        pageContentElement.style.marginRight = SIDE_PANEL_SIZES[size];\n      } else {\n        pageContentElement.style.marginLeft = 0;\n        pageContentElement.style.transition = 'margin-left 250ms';\n        pageContentElement.style.marginLeft = SIDE_PANEL_SIZES[size];\n      }\n    }\n  }, [slideIn, selectorPageContent, pageContentSelector, placement, shouldRender, size]);\n\n  var setSizeClassName = function setSizeClassName(panelSize) {\n    var sizeClassName = \"\".concat(blockClass, \"__container\");\n\n    switch (panelSize) {\n      case 'xs':\n        return sizeClassName = \"\".concat(sizeClassName, \"--extra-small\");\n\n      case 'sm':\n        return sizeClassName = \"\".concat(sizeClassName, \"--small\");\n\n      case 'lg':\n        return sizeClassName = \"\".concat(sizeClassName, \"--large\");\n\n      case 'max':\n        return sizeClassName = \"\".concat(sizeClassName, \"--max\");\n\n      default:\n        return sizeClassName = \"\".concat(sizeClassName, \"--medium\");\n    }\n  }; // adds focus trap functionality\n\n  /* istanbul ignore next */\n\n\n  var handleBlur = function handleBlur(_ref2) {\n    var oldActiveNode = _ref2.target,\n        currentActiveNode = _ref2.relatedTarget; // focus trap should only be set if the side panel is a `slideOver` type\n\n    if (open && sidePanelInnerRef && !slideIn) {\n      wrapFocus({\n        bodyNode: sidePanelInnerRef.current,\n        startTrapRef: startTrapRef,\n        endTrapRef: endTrapRef,\n        currentActiveNode: currentActiveNode,\n        oldActiveNode: oldActiveNode\n      });\n    }\n  };\n\n  var primaryActionContainerClassNames = cx([\"\".concat(blockClass, \"__actions-container\"), _defineProperty({}, \"\".concat(blockClass, \"__actions-container-condensed\"), condensedActions)]);\n  var mainPanelClassNames = cx([blockClass, className, \"\".concat(blockClass, \"__container\"), setSizeClassName(size), (_ref4 = {}, _defineProperty(_ref4, \"\".concat(blockClass, \"__container-right-placement\"), placement === 'right'), _defineProperty(_ref4, \"\".concat(blockClass, \"__container-left-placement\"), placement === 'left'), _defineProperty(_ref4, \"\".concat(blockClass, \"__container-with-action-toolbar\"), actionToolbarButtons && actionToolbarButtons.length), _defineProperty(_ref4, \"\".concat(blockClass, \"__container-without-overlay\"), !includeOverlay && !slideIn), _ref4)]);\n  return shouldRender && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReactResizeDetector, {\n    onResize: handleResize\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({}, // Pass through any other property values as HTML attributes.\n  rest, {\n    id: \"\".concat(blockClass, \"-outer\"),\n    className: mainPanelClassNames,\n    style: {\n      animation: \"\".concat(open ? placement === 'right' ? 'sidePanelEntranceRight 250ms' : 'sidePanelEntranceLeft 250ms' : placement === 'right' ? 'sidePanelExitRight 250ms' : 'sidePanelExitLeft 250ms')\n    },\n    onAnimationEnd: onAnimationEnd,\n    onAnimationStart: onAnimationStart,\n    onBlur: handleBlur,\n    ref: ref || sidePanelRef,\n    role: \"complementary\",\n    \"aria-label\": title\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    ref: startTrapRef,\n    tabIndex: \"0\",\n    role: \"link\",\n    className: \"\".concat(blockClass, \"__visually-hidden\")\n  }, \"Focus sentinel\"), /*#__PURE__*/React.createElement(\"div\", {\n    ref: sidePanelInnerRef,\n    className: \"\".concat(blockClass, \"__inner-content\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(\"\".concat(blockClass, \"__title-container\"), (_cx = {}, _defineProperty(_cx, \"\".concat(blockClass, \"__on-detail-step\"), currentStep > 0), _defineProperty(_cx, \"\".concat(blockClass, \"__title-container--no-animation\"), !animateTitle), _defineProperty(_cx, \"\".concat(blockClass, \"__title-container-is-animating\"), !animationComplete), _cx))\n  }, currentStep > 0 && /*#__PURE__*/React.createElement(Button, {\n    \"aria-label\": navigationBackIconDescription,\n    kind: \"ghost\",\n    size: \"small\",\n    disabled: false,\n    renderIcon: ArrowLeft20,\n    iconDescription: navigationBackIconDescription,\n    className: \"\".concat(blockClass, \"__navigation-back-button\"),\n    onClick: onNavigationBack\n  }), labelText && labelText.length && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(blockClass, \"__label-text\")\n  }, labelText), title && title.length && /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"\".concat(blockClass, \"__title-text\"),\n    title: title,\n    \"aria-hidden\": false\n  }, title), title && title.length && /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"\".concat(blockClass, \"__collapsed-title-text\"),\n    title: title,\n    \"aria-hidden\": true\n  }, title), /*#__PURE__*/React.createElement(Button, {\n    \"aria-label\": closeIconDescription,\n    kind: \"ghost\",\n    size: \"small\",\n    renderIcon: Close20,\n    iconDescription: closeIconDescription,\n    className: \"\".concat(blockClass, \"__close-button\"),\n    onClick: onRequestClose,\n    ref: sidePanelCloseRef\n  })), subtitle && subtitle.length && /*#__PURE__*/React.createElement(\"p\", {\n    className: cx(\"\".concat(blockClass, \"__subtitle-text\"), (_cx2 = {}, _defineProperty(_cx2, \"\".concat(blockClass, \"__subtitle-text-no-animation\"), !animateTitle), _defineProperty(_cx2, \"\".concat(blockClass, \"__subtitle-text-no-animation-no-action-toolbar\"), !animateTitle && (!actionToolbarButtons || !actionToolbarButtons.length)), _defineProperty(_cx2, \"\".concat(blockClass, \"__subtitle-text-is-animating\"), !animationComplete), _cx2))\n  }, subtitle), actionToolbarButtons && actionToolbarButtons.length && /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(\"\".concat(blockClass, \"__action-toolbar\"), _defineProperty({}, \"\".concat(blockClass, \"__action-toolbar-no-animation\"), !animateTitle))\n  }, actionToolbarButtons.map(function (action) {\n    var _ref5;\n\n    return /*#__PURE__*/React.createElement(Button, {\n      key: action.label,\n      kind: action.leading ? action.kind : 'ghost',\n      size: \"small\",\n      disabled: false,\n      renderIcon: action.icon,\n      iconDescription: action.label,\n      tooltipPosition: \"bottom\",\n      tooltipAlignment: \"center\",\n      className: cx([\"\".concat(blockClass, \"__action-toolbar-button\"), (_ref5 = {}, _defineProperty(_ref5, \"\".concat(blockClass, \"__action-toolbar-icon-only-button\"), action.icon), _defineProperty(_ref5, \"\".concat(blockClass, \"__action-toolbar-leading-button\"), !action.icon), _ref5)]),\n      onClick: function onClick() {\n        return action.onActionToolbarButtonClick();\n      }\n    }, action.leading && action.label);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__body-content\")\n  }, children), /*#__PURE__*/React.createElement(ActionSet, {\n    actions: actions,\n    className: primaryActionContainerClassNames,\n    size: size\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    ref: endTrapRef,\n    tabIndex: \"0\",\n    role: \"link\",\n    className: \"\".concat(blockClass, \"__visually-hidden\")\n  }, \"Focus sentinel\"))), includeOverlay && /*#__PURE__*/React.createElement(\"div\", {\n    ref: sidePanelOverlayRef,\n    className: \"\".concat(blockClass, \"__overlay\"),\n    style: {\n      animation: \"\".concat(open ? 'sidePanelOverlayEntrance 250ms' : 'sidePanelOverlayExit 250ms')\n    }\n  }));\n}); // Return a placeholder if not released and not enabled by feature flag\n\nSidePanel = pkg.checkComponentEnabled(SidePanel, componentName);\n\nSidePanel.validatePageContentSelector = function () {\n  return function (_ref6) {\n    var slideIn = _ref6.slideIn,\n        selectorPageContent = _ref6.selectorPageContent;\n\n    if (slideIn && !selectorPageContent) {\n      throw new Error(\"\".concat(componentName, \": selectorPageContent prop missing, this is required when using a slideIn panel.\"));\n    }\n  };\n};\n\nSidePanel.propTypes = {\n  /**\n   * Sets the action toolbar buttons\n   */\n  actionToolbarButtons: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    leading: PropTypes.bool,\n    icon: PropTypes.object,\n    onActionToolbarButtonClick: PropTypes.func,\n    kind: PropTypes.oneOf(['ghost', 'tertiary', 'secondary', 'primary'])\n  })),\n\n  /**\n   * The primary actions to be shown in the side panel. Each action is\n   * specified as an object with optional fields: 'label' to supply the button\n   * label, 'kind' to select the button kind (must be 'primary', 'secondary' or\n   * 'ghost'), 'loading' to display a loading indicator, and 'onClick' to\n   * receive notifications when the button is clicked. Additional fields in the\n   * object will be passed to the Button component, and these can include\n   * 'disabled', 'ref', 'className', and any other Button props. Any other\n   * fields in the object will be passed through to the button element as HTML\n   * attributes.\n   *\n   * See https://react.carbondesignsystem.com/?path=/docs/components-button--default#component-api\n   */\n  actions: allPropTypes([ActionSet.validateActions(), PropTypes.arrayOf(PropTypes.shape(_objectSpread(_objectSpread({}, Button.propTypes), {}, {\n    kind: PropTypes.oneOf(['ghost', 'secondary', 'primary']),\n    label: PropTypes.string,\n    loading: PropTypes.bool,\n    // we duplicate this Button prop to improve the DocGen here\n    onClick: Button.propTypes.onClick\n  })))]),\n\n  /**\n   * Determines if the title will animate on scroll\n   */\n  animateTitle: PropTypes.bool,\n\n  /**\n   * Sets the body content of the side panel\n   */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n\n  /**\n   * Sets an optional className to be added to the side panel outermost element\n   */\n  className: PropTypes.string,\n\n  /**\n   * Sets the close button icon description\n   */\n  closeIconDescription: PropTypes.string,\n\n  /**\n   * Determines whether the side panel should render the condensed version (affects action buttons primarily)\n   */\n  condensedActions: PropTypes.bool,\n\n  /**\n   * Sets the current step of the side panel\n   */\n  currentStep: PropTypes.number,\n\n  /**\n   * Determines whether the side panel should render with an overlay\n   */\n  includeOverlay: PropTypes.bool,\n\n  /**\n   * Sets the label text which will display above the title text\n   */\n  labelText: PropTypes.string,\n\n  /**\n   * Sets the icon description for the navigation back icon button\n   */\n  navigationBackIconDescription: PropTypes.string,\n\n  /**\n   * Changes the current side panel page to the previous page\n   */\n  onNavigationBack: PropTypes.func,\n\n  /**\n   * Specify a handler for closing the side panel.\n   * This handler closes the modal, e.g. changing `open` prop.\n   */\n  onRequestClose: PropTypes.func,\n\n  /**\n   * Optional function called when the side panel exit animation is complete.\n   * This handler can be used for any state cleanup needed before the panel is removed from the DOM.\n   */\n  onUnmount: PropTypes.func,\n\n  /**\n   * Determines whether the side panel should render or not\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * This is the selector to the element that contains all of the page content that will shrink if the panel is a slide in.\n   * This prop is required when using the `slideIn` variant of the side panel.\n   */\n  pageContentSelector: deprecateProp(allPropTypes([SidePanel.validatePageContentSelector(), PropTypes.string]), 'This prop has been renamed to `selectorPageContent`.'),\n\n  /**\n   * Determines if the side panel is on the right or left\n   */\n  placement: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * This is the selector to the element that contains all of the page content that will shrink if the panel is a slide in.\n   * This prop is required when using the `slideIn` variant of the side panel.\n   */\n  selectorPageContent: PropTypes.string,\n\n  /**\n   * Specify a CSS selector that matches the DOM element that should\n   * be focused when the side panel opens\n   */\n  selectorPrimaryFocus: PropTypes.string,\n\n  /**\n   * Sets the size of the side panel\n   */\n  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'max']),\n\n  /**\n   * Determines if this panel slides in\n   */\n  slideIn: PropTypes.bool,\n\n  /**\n   * Sets the subtitle text\n   */\n  subtitle: PropTypes.string,\n\n  /**\n   * Sets the title text\n   */\n  title: PropTypes.string.isRequired\n};\nSidePanel.defaultProps = {\n  animateTitle: true,\n  placement: 'right',\n  size: 'md',\n  slideIn: false,\n  currentStep: 0,\n  navigationBackIconDescription: 'Back',\n  closeIconDescription: 'Close'\n};\nSidePanel.displayName = componentName;","map":null,"metadata":{},"sourceType":"module"}