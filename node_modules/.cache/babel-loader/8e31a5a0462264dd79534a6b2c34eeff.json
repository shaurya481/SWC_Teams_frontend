{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport { useEffect, useState } from 'react';\n/**\n * @param {Element|Document|Window} [trigger=document] The element which should trigger the Menu on right-click\n * @returns {object} Props object to pass onto Menu component\n */\n\nfunction useContextMenu() {\n  var trigger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      open = _useState2[0],\n      setOpen = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      canBeClosed = _useState4[0],\n      setCanBeClosed = _useState4[1];\n\n  var _useState5 = useState([0, 0]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      position = _useState6[0],\n      setPosition = _useState6[1];\n\n  function openContextMenu(e) {\n    e.preventDefault();\n    var x = e.x,\n        y = e.y;\n    setPosition([x, y]);\n    setOpen(true); // Safari emits the click event when preventDefault was called on\n    // the contextmenu event. This is registered by the ClickListener\n    // component and would lead to immediate closing when a user is\n    // triggering the menu with ctrl+click. To prevent this, we only\n    // allow the menu to be closed after the click event was received.\n    // Since other browsers don't emit this event, it's also reset with\n    // a 50ms delay after mouseup event was called.\n\n    document.addEventListener('mouseup', function () {\n      setTimeout(function () {\n        setCanBeClosed(true);\n      }, 50);\n    }, {\n      once: true\n    });\n    document.addEventListener('click', function () {\n      setCanBeClosed(true);\n    }, {\n      once: true\n    });\n  }\n\n  function onClose() {\n    setOpen(false);\n  }\n\n  useEffect(function () {\n    if (trigger && trigger instanceof Element || trigger instanceof Document || trigger instanceof Window) {\n      trigger.addEventListener('contextmenu', openContextMenu);\n      return function () {\n        trigger.removeEventListener('contextmenu', openContextMenu);\n      };\n    }\n  }, [trigger]);\n  return {\n    open: open,\n    x: position[0],\n    y: position[1],\n    autoclose: canBeClosed,\n    onClose: onClose\n  };\n}\n\nexport default useContextMenu;","map":null,"metadata":{},"sourceType":"module"}