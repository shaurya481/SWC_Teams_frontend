{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nimport setupGetInstanceId from '../../tools/setupGetInstanceId';\nimport deprecate from '../../prop-types/deprecate';\nvar prefix = settings.prefix;\nvar getInstanceId = setupGetInstanceId();\nexport function StructuredListWrapper(props) {\n  var _classNames;\n\n  var children = props.children,\n      selection = props.selection,\n      className = props.className,\n      ariaLabel = props.ariaLabel,\n      isCondensed = props.isCondensed,\n      isFlush = props.isFlush,\n      _border = props.border,\n      other = _objectWithoutProperties(props, [\"children\", \"selection\", \"className\", \"ariaLabel\", \"isCondensed\", \"isFlush\", \"border\"]);\n\n  var classes = classNames(\"\".concat(prefix, \"--structured-list\"), className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--structured-list--selection\"), selection), _defineProperty(_classNames, \"\".concat(prefix, \"--structured-list--condensed\"), isCondensed), _defineProperty(_classNames, \"\".concat(prefix, \"--structured-list--flush\"), isFlush), _classNames));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"table\",\n    className: classes\n  }, other, {\n    \"aria-label\": ariaLabel\n  }), children);\n}\nStructuredListWrapper.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the container node\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Specify whether a border should be added to your StructuredListWrapper\n   */\n  border: deprecate(PropTypes.bool, \"\\nThe prop `border` will be removed in the next major version of Carbon.\"),\n\n  /**\n   * Provide the contents of your StructuredListWrapper\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify if structured list is condensed, default is false\n   */\n  isCondensed: PropTypes.bool,\n\n  /**\n   * Specify if structured list is flush, default is false\n   */\n  isFlush: PropTypes.bool,\n\n  /**\n   * Specify whether your StructuredListWrapper should have selections\n   */\n  selection: PropTypes.bool\n};\nStructuredListWrapper.defaultProps = {\n  selection: false,\n  ariaLabel: 'Structured list section',\n  isCondensed: false,\n  isFlush: false\n};\nexport function StructuredListHead(props) {\n  var children = props.children,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"children\", \"className\"]);\n\n  var classes = classNames(\"\".concat(prefix, \"--structured-list-thead\"), className);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"rowgroup\",\n    className: classes\n  }, other), children);\n}\nStructuredListHead.propTypes = {\n  /**\n   * Provide the contents of your StructuredListHead\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the node\n   */\n  className: PropTypes.string\n};\nexport function StructuredListBody(props) {\n  var children = props.children,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"children\", \"className\"]);\n\n  var classes = classNames(\"\".concat(prefix, \"--structured-list-tbody\"), className);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: classes,\n    role: \"rowgroup\"\n  }, other), children);\n}\nStructuredListBody.propTypes = {\n  /**\n   * Provide the contents of your StructuredListBody\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n  head: PropTypes.bool,\n\n  /**\n   * Provide a handler that is invoked on the key down event for the control\n   */\n  onKeyDown: PropTypes.func\n};\nStructuredListBody.defaultProps = {\n  onKeyDown: function onKeyDown() {}\n};\nexport function StructuredListRow(props) {\n  var onKeyDown = props.onKeyDown,\n      tabIndex = props.tabIndex,\n      children = props.children,\n      className = props.className,\n      head = props.head,\n      label = props.label,\n      other = _objectWithoutProperties(props, [\"onKeyDown\", \"tabIndex\", \"children\", \"className\", \"head\", \"label\"]);\n\n  var classes = classNames(\"\".concat(prefix, \"--structured-list-row\"), className, _defineProperty({}, \"\".concat(prefix, \"--structured-list-row--header-row\"), head));\n  return label ?\n  /*#__PURE__*/\n  // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\n  React.createElement(\"label\", _extends({}, other, {\n    tabIndex: tabIndex,\n    className: classes,\n    onKeyDown: onKeyDown\n  }), children) : /*#__PURE__*/React.createElement(\"div\", _extends({}, other, {\n    className: classes\n  }), children);\n}\nStructuredListRow.propTypes = {\n  /**\n   * Provide the contents of your StructuredListRow\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether your StructuredListRow should be used as a header row\n   */\n  head: PropTypes.bool,\n\n  /**\n   * Specify whether a `<label>` should be used\n   */\n  label: PropTypes.bool,\n\n  /**\n   * Provide a handler that is invoked on the key down event for the control,\n   * if `<label>` is in use\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Specify the tab index of the container node, if `<label>` is in use\n   */\n  tabIndex: PropTypes.number\n};\nStructuredListRow.defaultProps = {\n  head: false,\n  label: false,\n  tabIndex: 0,\n  onKeyDown: function onKeyDown() {}\n};\nexport function StructuredListInput(props) {\n  var className = props.className,\n      value = props.value,\n      name = props.name,\n      title = props.title,\n      id = props.id,\n      other = _objectWithoutProperties(props, [\"className\", \"value\", \"name\", \"title\", \"id\"]);\n\n  var classes = classNames(\"\".concat(prefix, \"--structured-list-input\"), className);\n  var instanceId = id || getInstanceId();\n  return /*#__PURE__*/React.createElement(\"input\", _extends({}, other, {\n    type: \"radio\",\n    tabIndex: -1,\n    id: instanceId,\n    className: classes,\n    value: value,\n    name: name,\n    title: title\n  }));\n}\nStructuredListInput.propTypes = {\n  /**\n   * Specify an optional className to be applied to the input\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the underlying input should be checked by default\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * Specify a custom `id` for the input\n   */\n  id: PropTypes.string,\n\n  /**\n   * Provide a `name` for the input\n   */\n  name: PropTypes.string,\n\n  /**\n   * Provide an optional hook that is called each time the input is updated\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Provide a `title` for the input\n   */\n  title: PropTypes.string,\n\n  /**\n   * Specify the value of the input\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired\n};\nStructuredListInput.defaultProps = {\n  onChange: function onChange() {},\n  value: 'value',\n  title: 'title'\n};\nexport function StructuredListCell(props) {\n  var _classNames3;\n\n  var children = props.children,\n      className = props.className,\n      head = props.head,\n      noWrap = props.noWrap,\n      other = _objectWithoutProperties(props, [\"children\", \"className\", \"head\", \"noWrap\"]);\n\n  var classes = classNames(className, (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefix, \"--structured-list-th\"), head), _defineProperty(_classNames3, \"\".concat(prefix, \"--structured-list-td\"), !head), _defineProperty(_classNames3, \"\".concat(prefix, \"--structured-list-content--nowrap\"), noWrap), _classNames3));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: classes,\n    role: head ? 'columnheader' : 'cell'\n  }, other), children);\n}\nStructuredListCell.propTypes = {\n  /**\n   * Provide the contents of your StructuredListCell\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether your StructuredListCell should be used as a header cell\n   */\n  head: PropTypes.bool,\n\n  /**\n   * Specify whether your StructuredListCell should have text wrapping\n   */\n  noWrap: PropTypes.bool\n};\nStructuredListCell.defaultProps = {\n  head: false,\n  noWrap: false\n};","map":null,"metadata":{},"sourceType":"module"}