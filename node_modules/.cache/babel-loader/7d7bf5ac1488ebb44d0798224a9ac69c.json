{"ast":null,"code":"import { settings } from 'carbon-components';\nvar prefix = settings.prefix;\nexport function resetFocus(el) {\n  if (el) {\n    var _el$querySelectorAll;\n\n    Array.from((_el$querySelectorAll = el.querySelectorAll('[tabindex=\"0\"]')) !== null && _el$querySelectorAll !== void 0 ? _el$querySelectorAll : []).forEach(function (node) {\n      node.tabIndex = -1;\n    });\n  }\n}\nexport function focusNode(node) {\n  if (node) {\n    node.tabIndex = 0;\n    node.focus();\n  }\n}\nexport function getValidNodes(list) {\n  var level = list.dataset.level;\n  var nodes = [];\n\n  if (level) {\n    var submenus = Array.from(list.querySelectorAll('[data-level]'));\n    nodes = Array.from(list.querySelectorAll(\"li.\".concat(prefix, \"--menu-option\"))).filter(function (child) {\n      return !submenus.some(function (submenu) {\n        return submenu.contains(child);\n      });\n    });\n  }\n\n  return nodes.filter(function (node) {\n    return node.matches(\":not(.\".concat(prefix, \"--menu-option--disabled)\"));\n  });\n}\nexport function getNextNode(current, direction) {\n  var menu = getParentMenu(current);\n  var nodes = getValidNodes(menu);\n  var currentIndex = nodes.indexOf(current);\n  var nextNode = nodes[currentIndex + direction];\n  return nextNode || null;\n}\nexport function getFirstSubNode(node) {\n  var submenu = node.querySelector(\"ul.\".concat(prefix, \"--menu\"));\n\n  if (submenu) {\n    var subnodes = getValidNodes(submenu);\n    return subnodes[0] || null;\n  }\n\n  return null;\n}\nexport function getParentNode(node) {\n  if (node) {\n    var parentNode = node.parentNode.closest(\"li.\".concat(prefix, \"--menu-option\"));\n    return parentNode || null;\n  }\n\n  return null;\n}\nexport function getParentMenu(el) {\n  if (el) {\n    var parentMenu = el.parentNode.closest(\"ul.\".concat(prefix, \"--menu\"));\n    return parentMenu || null;\n  }\n\n  return null;\n}\nexport function clickedElementHasSubnodes(e) {\n  if (e) {\n    var closestFocusableElement = e.target.closest('[tabindex]');\n\n    if ((closestFocusableElement === null || closestFocusableElement === void 0 ? void 0 : closestFocusableElement.tagName) === 'LI') {\n      return getFirstSubNode(closestFocusableElement) !== null;\n    }\n  }\n\n  return false;\n}\n/**\n * @param {number} [value] The value to cap\n * @param {number} [min] The minimum of the range\n * @param {number} [max] The maximum of the range\n * @returns {number} Whether or not the element fits inside the boundaries on the given axis\n */\n\nexport function capWithinRange(value, min, max) {\n  if (value > max) {\n    return max;\n  }\n\n  if (value < min) {\n    return min;\n  }\n\n  return value;\n}\n/**\n * @param {number[]} [elementDimensions] The dimensions of the element: [width, height]\n * @param {number[]} [position] The desired position of the element: [x, y]\n * @param {number[]} [boundaries] The boundaries of the container the element should be contained in: [minX, minY, maxX, maxY]\n * @param {string} [axis=\"x\"] Which axis to check. Either \"x\" or \"y\"\n * @returns {boolean} Whether or not the element fits inside the boundaries on the given axis\n */\n\nfunction elementFits(elementDimensions, position, boundaries) {\n  var axis = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'x';\n  var index = axis === 'y' ? 1 : 0;\n  var min = boundaries[index];\n  var max = boundaries[index + 2];\n  var start = position[index];\n  var end = position[index] + elementDimensions[index];\n  return start >= min && end <= max;\n}\n/**\n * @param {number[]} [elementDimensions] The dimensions of the element: [width, height]\n * @param {number[]} [targetBoundaries] The boundaries of the target the element should attach to: [minX, minY, maxX, maxY]\n * @param {number[]} [containerBoundaries] The boundaries of the container the element should be contained in: [minX, minY, maxX, maxY]\n * @param {number} [preferredDirection=1] Which direction is preferred. Either 1 (right right) or -1 (to left)\n * @returns {object} The determined position and direction of the elemnt: { position: [x, y], direction: 1 | -1 }\n */\n\n\nexport function getPosition(elementDimensions, targetBoundaries, containerBoundaries) {\n  var preferredDirection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var position = [0, 0];\n  var direction = preferredDirection; // x\n\n  position[0] = direction === 1 ? targetBoundaries[0] : targetBoundaries[2] - elementDimensions[0];\n  var xFits = elementFits(elementDimensions, position, containerBoundaries, 'x');\n\n  if (!xFits) {\n    direction = direction * -1;\n    position[0] = direction === 1 ? targetBoundaries[0] : targetBoundaries[2] - elementDimensions[0];\n  } // y\n\n\n  position[1] = targetBoundaries[3];\n  var yFits = elementFits(elementDimensions, position, containerBoundaries, 'y');\n\n  if (!yFits) {\n    position[1] = targetBoundaries[1] - elementDimensions[1];\n  }\n\n  return {\n    position: position,\n    direction: direction\n  };\n}","map":null,"metadata":{},"sourceType":"module"}