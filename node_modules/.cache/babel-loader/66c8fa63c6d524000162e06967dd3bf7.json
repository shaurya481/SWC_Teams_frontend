{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport cx from 'classnames';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\n\nvar StructuredListSkeleton = function StructuredListSkeleton(_ref) {\n  var _cx;\n\n  var rowCount = _ref.rowCount,\n      border = _ref.border,\n      className = _ref.className,\n      rest = _objectWithoutProperties(_ref, [\"rowCount\", \"border\", \"className\"]);\n\n  var StructuredListSkeletonClasses = cx(className, (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--skeleton\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--structured-list\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--structured-list--border\"), border), _cx));\n  var rows = [];\n\n  for (var i = 0; i < rowCount; i++) {\n    rows.push( /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--structured-list-row\"),\n      key: i\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--structured-list-td\")\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--structured-list-td\")\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--structured-list-td\")\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: StructuredListSkeletonClasses\n  }, rest), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--structured-list-thead\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--structured-list-row \").concat(prefix, \"--structured-list-row--header-row\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--structured-list-th\")\n  }, /*#__PURE__*/React.createElement(\"span\", null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--structured-list-th\")\n  }, /*#__PURE__*/React.createElement(\"span\", null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--structured-list-th\")\n  }, /*#__PURE__*/React.createElement(\"span\", null)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--structured-list-tbody\")\n  }, rows));\n};\n\nStructuredListSkeleton.propTypes = {\n  /**\n   * Specify whether a border should be added to your StructuredListSkeleton\n   */\n  border: PropTypes.bool,\n\n  /**\n   * Specify an optional className to add.\n   */\n  className: PropTypes.string,\n\n  /**\n   * number of table rows\n   */\n  rowCount: PropTypes.number\n};\nStructuredListSkeleton.defaultProps = {\n  rowCount: 5,\n  border: false\n};\nexport default StructuredListSkeleton;","map":null,"metadata":{},"sourceType":"module"}