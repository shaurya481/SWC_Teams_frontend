{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"className\", \"closeTerminal\", \"documentationLinks\", \"open\"];\n/**\n * Copyright IBM Corp. 2020, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\nimport React, { useCallback, useMemo, useState, useEffect } from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pkg } from '../../settings'; // Carbon and package components we use.\n\nimport { Close16 as Close, Help16 as Help } from '@carbon/icons-react'; // The block part of our conventional BEM class names (blockClass__E--M).\n\nvar componentName = 'WebTerminal';\nvar blockClass = \"\".concat(pkg.prefix, \"-web-terminal\");\nexport var WebTerminal = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref2;\n\n  var children = _ref.children,\n      className = _ref.className,\n      closeTerminal = _ref.closeTerminal,\n      documentationLinks = _ref.documentationLinks,\n      open = _ref.open,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(open),\n      _useState2 = _slicedToArray(_useState, 2),\n      shouldRender = _useState2[0],\n      setRender = _useState2[1];\n  /**\n   * Triggers whenever the user clicks on an item in the help dropdown\n   */\n\n\n  var onDocumentationLinkClick = useCallback(function (event, onClick) {\n    // Runs the function provided by the user if it exists\n    if (typeof onClick === 'function') {\n      // Passes the event object incase the developer wants to event.preventDefault() the link redirect\n      onClick(event);\n    }\n  }, []);\n  var showDocumentationLinks = useMemo(function () {\n    return documentationLinks.length > 0;\n  }, [documentationLinks]);\n  useEffect(function () {\n    if (open) {\n      setRender(true);\n    }\n  }, [open]);\n\n  var onAnimationEnd = function onAnimationEnd() {\n    if (!open) {\n      setRender(false);\n    }\n  };\n\n  return shouldRender ? /*#__PURE__*/React.createElement(\"div\", _extends({}, // Pass through any other property values as HTML attributes.\n  rest, {\n    ref: ref,\n    className: cx([blockClass, (_ref2 = {}, _defineProperty(_ref2, \"\".concat(blockClass, \"--open\"), open), _defineProperty(_ref2, \"\".concat(blockClass, \"--closed\"), !open), _defineProperty(_ref2, className, className), _ref2)]),\n    style: {\n      animation: \"\".concat(open ? 'webTerminalEntrance 250ms' : 'webTerminalExit 250ms')\n    },\n    onAnimationEnd: onAnimationEnd\n  }), /*#__PURE__*/React.createElement(\"header\", {\n    className: \"\".concat(blockClass, \"__bar\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__actions\")\n  }, showDocumentationLinks && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"\".concat(blockClass, \"__bar-icon-container\")\n  }, /*#__PURE__*/React.createElement(Help, {\n    className: \"\".concat(blockClass, \"__bar-icon\")\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"\".concat(blockClass, \"__bar-icon-dropdown\")\n  }, documentationLinks.map(function (_ref3) {\n    var label = _ref3.label,\n        _onClick = _ref3.onClick,\n        _ref3$href = _ref3.href,\n        href = _ref3$href === void 0 ? null : _ref3$href,\n        _ref3$openInNewTab = _ref3.openInNewTab,\n        openInNewTab = _ref3$openInNewTab === void 0 ? true : _ref3$openInNewTab;\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: label,\n      className: \"\".concat(blockClass, \"__bar-icon-dropdown-item\")\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"\".concat(blockClass, \"__bar-icon-dropdown-link\"),\n      onClick: function onClick(event) {\n        return onDocumentationLinkClick(event, _onClick);\n      },\n      href: href,\n      target: openInNewTab ? '_blank' : null,\n      rel: \"noreferrer noopener\"\n    }, label));\n  })))), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: cx([\"\".concat(blockClass, \"__bar-icon-container\"), \"\".concat(blockClass, \"__close-button\")]),\n    onClick: closeTerminal,\n    onKeyDown: closeTerminal\n  }, /*#__PURE__*/React.createElement(Close, {\n    className: \"\".concat(blockClass, \"__bar-icon \").concat(blockClass, \"__bar-icon--close\")\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__body\")\n  }, children)) : null;\n}); // Return a placeholder if not released and not enabled by feature flag\n\nWebTerminal = pkg.checkComponentEnabled(WebTerminal, componentName); // The display name of the component, used by React. Note that displayName\n// is used in preference to relying on function.name.\n\nWebTerminal.displayName = componentName; // The types and DocGen commentary for the component props,\n// in alphabetical order (for consistency).\n// See https://www.npmjs.com/package/prop-types#usage.\n\nWebTerminal.propTypes = {\n  /**\n   * Provide your own terminal component as children to show up in the web terminal\n   */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n\n  /**\n   * Custom classname for additional styling of the web terminal\n   */\n  className: PropTypes.string,\n\n  /**\n   * Function that should set the open prop to false\n   */\n  closeTerminal: PropTypes.func.isRequired,\n\n  /**\n   * Array of objects for each documentation link\n   */\n  documentationLinks: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    href: PropTypes.string,\n    onClick: PropTypes.func,\n    openInNewTab: PropTypes.bool\n  })),\n\n  /**\n   * Boolean that determines if the web terminal is opened or closed\n   */\n  open: PropTypes.bool.isRequired\n}; // Default values for component props. Default values are not required for\n// props that are required, nor for props where the component can apply\n// 'undefined' values reasonably. Default values should be provided when the\n// component needs to make a choice or assumption when a prop is not supplied.\n\nWebTerminal.defaultProps = {\n  documentationLinks: [],\n  className: ''\n};","map":null,"metadata":{},"sourceType":"module"}