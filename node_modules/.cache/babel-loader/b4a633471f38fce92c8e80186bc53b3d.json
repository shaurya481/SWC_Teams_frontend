{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React from 'react';\nimport { settings } from 'carbon-components';\nimport PropTypes from 'prop-types';\nvar prefix = settings.prefix; // No longer used, left export for backward-compatibility\n\nexport var translationIds = {};\n/**\n * `ListBoxField` is responsible for creating the containing node for valid\n * elements inside of a field. It also provides a11y-related attributes like\n * `role` to make sure a user can focus the given field.\n */\n\nfunction ListBoxField(_ref) {\n  var children = _ref.children,\n      disabled = _ref.disabled,\n      tabIndex = _ref.tabIndex,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"disabled\", \"tabIndex\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: \"\".concat(prefix, \"--list-box__field\"),\n    tabIndex: !disabled && tabIndex || -1\n  }, rest), children);\n}\n\nListBoxField.propTypes = {\n  /**\n   * Typically set by `getToggleButtonProps`, this should specify whether the\n   * field has a popup.\n   */\n  'aria-haspopup': PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n  /**\n   * Provide the contents of your ListBoxField\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify if the parent <ListBox> is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The role for the component, should be set by `getToggleButtonProps` coming\n   * from Downshift\n   */\n  role: PropTypes.string,\n\n  /**\n   * Optional prop to specify the tabIndex of the <ListBox> trigger button\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\nexport default ListBoxField;","map":null,"metadata":{},"sourceType":"module"}