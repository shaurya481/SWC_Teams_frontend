{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"body\", \"className\", \"error\", \"errorMessage\", \"filename\", \"inputLabel\", \"invalidInputText\", \"loading\", \"loadingMessage\", \"onClose\", \"onRequestSubmit\", \"open\", \"preformattedExtensions\", \"preformattedExtensionsLabel\", \"primaryButtonText\", \"secondaryButtonText\", \"successMessage\", \"successful\", \"title\", \"validExtensions\"]; //\n// Copyright IBM Corp. 2020, 2021\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\nimport React, { useState, useRef, forwardRef } from 'react';\nimport { Button, ComposedModal, ModalHeader, ModalFooter, ModalBody, TextInput, RadioButton, RadioButtonGroup, FormGroup, Loading } from 'carbon-components-react';\nimport cx from 'classnames';\nimport { ErrorFilled16, CheckmarkFilled16 } from '@carbon/icons-react';\nimport PropTypes from 'prop-types';\nimport { pkg } from '../../settings';\nimport uuidv4 from '../../global/js/utils/uuidv4';\nvar componentName = 'ExportModal';\nexport var ExportModal = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _preformattedExtensio;\n\n  var body = _ref.body,\n      className = _ref.className,\n      error = _ref.error,\n      errorMessage = _ref.errorMessage,\n      filename = _ref.filename,\n      inputLabel = _ref.inputLabel,\n      invalidInputText = _ref.invalidInputText,\n      loading = _ref.loading,\n      loadingMessage = _ref.loadingMessage,\n      onClose = _ref.onClose,\n      onRequestSubmit = _ref.onRequestSubmit,\n      open = _ref.open,\n      preformattedExtensions = _ref.preformattedExtensions,\n      preformattedExtensionsLabel = _ref.preformattedExtensionsLabel,\n      primaryButtonText = _ref.primaryButtonText,\n      secondaryButtonText = _ref.secondaryButtonText,\n      successMessage = _ref.successMessage,\n      successful = _ref.successful,\n      title = _ref.title,\n      validExtensions = _ref.validExtensions,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(filename),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dirtyInput = _useState4[0],\n      setDirtyInput = _useState4[1]; // by default (if it exists) use the first extension in the extension array\n\n\n  var _useState5 = useState(preformattedExtensions === null || preformattedExtensions === void 0 ? void 0 : (_preformattedExtensio = preformattedExtensions[0]) === null || _preformattedExtensio === void 0 ? void 0 : _preformattedExtensio.extension),\n      _useState6 = _slicedToArray(_useState5, 2),\n      extension = _useState6[0],\n      setExtension = _useState6[1];\n\n  var onNameChangeHandler = function onNameChangeHandler(evt) {\n    setName(evt.target.value);\n  };\n\n  var onExtensionChangeHandler = function onExtensionChangeHandler(value) {\n    setExtension(value);\n  };\n\n  var onBlurHandler = function onBlurHandler() {\n    setDirtyInput(true);\n  };\n\n  var onSubmitHandler = function onSubmitHandler() {\n    var returnName = extension ? \"\".concat(filename, \".\").concat(extension.toLocaleLowerCase()) : name;\n    onRequestSubmit(returnName);\n  };\n\n  var hasInvalidExtension = function hasInvalidExtension() {\n    if (!dirtyInput || !validExtensions || !validExtensions.length) {\n      return false;\n    }\n\n    if (!name.includes('.')) {\n      return true;\n    }\n\n    var ext = name.split('.').pop();\n\n    if (!validExtensions.includes(ext)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  var blockClass = \"\".concat(pkg.prefix, \"--export-modal\");\n  var internalId = useRef(uuidv4());\n  var primaryButtonDisabled = loading || !name || hasInvalidExtension();\n  var submitted = loading || error || successful;\n  return /*#__PURE__*/React.createElement(ComposedModal, _extends({}, rest, {\n    className: cx(blockClass, className),\n    \"aria-label\": title,\n    size: \"sm\",\n    preventCloseOnClickOutside: true,\n    open: open,\n    ref: ref,\n    onClose: onClose\n  }), /*#__PURE__*/React.createElement(ModalHeader, {\n    className: \"\".concat(blockClass, \"__header\"),\n    title: title\n  }), /*#__PURE__*/React.createElement(ModalBody, {\n    className: \"\".concat(blockClass, \"__body-container\")\n  }, !submitted && /*#__PURE__*/React.createElement(React.Fragment, null, body && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(blockClass, \"__body\")\n  }, body), preformattedExtensions.length ? /*#__PURE__*/React.createElement(FormGroup, {\n    legendText: preformattedExtensionsLabel\n  }, /*#__PURE__*/React.createElement(RadioButtonGroup, {\n    orientation: \"vertical\",\n    onChange: onExtensionChangeHandler,\n    valueSelected: extension,\n    name: \"extensions\"\n  }, preformattedExtensions.map(function (o) {\n    return /*#__PURE__*/React.createElement(RadioButton, {\n      key: o.extension,\n      id: o.extension,\n      value: o.extension,\n      labelText: \"\".concat(o.extension, \" (\").concat(o.description, \")\")\n    });\n  }))) : /*#__PURE__*/React.createElement(TextInput, {\n    id: \"text-input--\".concat(internalId.current),\n    value: name,\n    onChange: onNameChangeHandler,\n    labelText: inputLabel,\n    invalid: hasInvalidExtension(),\n    invalidText: invalidInputText,\n    onBlur: onBlurHandler\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__messaging\")\n  }, loading && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Loading, {\n    small: true,\n    withOverlay: false\n  }), /*#__PURE__*/React.createElement(\"p\", null, loadingMessage)), successful && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CheckmarkFilled16, {\n    className: \"\".concat(blockClass, \"__checkmark-icon\")\n  }), /*#__PURE__*/React.createElement(\"p\", null, successMessage)), error && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ErrorFilled16, {\n    className: \"\".concat(blockClass, \"__error-icon\")\n  }), /*#__PURE__*/React.createElement(\"p\", null, errorMessage)))), !submitted && /*#__PURE__*/React.createElement(ModalFooter, {\n    className: \"\".concat(blockClass, \"__footer\")\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    kind: \"secondary\",\n    onClick: onClose\n  }, secondaryButtonText), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    kind: \"primary\",\n    onClick: onSubmitHandler,\n    disabled: primaryButtonDisabled\n  }, primaryButtonText)));\n}); // Return a placeholder if not released and not enabled by feature flag\n\nExportModal = pkg.checkComponentEnabled(ExportModal, componentName);\nExportModal.propTypes = {\n  /**\n   * Body content for the modal\n   */\n  body: PropTypes.string,\n\n  /**\n   * Optional class name\n   */\n  className: PropTypes.string,\n\n  /**\n   * specify if an error occured\n   */\n  error: PropTypes.bool,\n\n  /**\n   * messaging to display in the event of an error\n   */\n  errorMessage: PropTypes.string,\n\n  /**\n   * name of the file being exported\n   */\n  filename: PropTypes.string.isRequired,\n\n  /**\n   * label for the text input\n   */\n  inputLabel: PropTypes.string,\n\n  /**\n   * text for an invalid input\n   */\n  invalidInputText: PropTypes.string,\n\n  /**\n   * specify if the modal is in a loading state\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * messaing to display during the loading state\n   */\n  loadingMessage: PropTypes.string,\n\n  /**\n   * Specify a handler for closing modal\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Specify a handler for \"submitting\" modal. Returns the file name\n   */\n  onRequestSubmit: PropTypes.func,\n\n  /**\n   * Specify whether the Modal is currently open\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Array of extensions to display as radio buttons\n   */\n  preformattedExtensions: PropTypes.arrayOf(PropTypes.shape({\n    extension: PropTypes.string,\n    description: PropTypes.string\n  })),\n\n  /**\n   * Label for the preformatted label form group\n   */\n  preformattedExtensionsLabel: PropTypes.string,\n\n  /**\n   * Specify the text for the primary button\n   */\n  primaryButtonText: PropTypes.string.isRequired,\n\n  /**\n   * Specify the text for the secondary button\n   */\n  secondaryButtonText: PropTypes.string.isRequired,\n\n  /**\n   * messaging to display if the export was successful\n   */\n  successMessage: PropTypes.string,\n\n  /**\n   * specify if the export was successful\n   */\n  successful: PropTypes.bool,\n\n  /**\n   * The text displayed at the top of the modal\n   */\n  title: PropTypes.string.isRequired,\n\n  /**\n   * array of valid extensions the file can have\n   */\n  validExtensions: PropTypes.array\n};\nExportModal.defaultProps = {\n  preformattedExtensions: [],\n  validExtensions: []\n};\nExportModal.displayName = componentName;","map":null,"metadata":{},"sourceType":"module"}