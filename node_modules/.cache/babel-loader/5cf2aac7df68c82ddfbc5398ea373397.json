{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React, { useRef } from 'react';\nimport { useSelect } from 'downshift';\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Checkmark16, WarningAltFilled16, WarningFilled16 } from '@carbon/icons-react';\nimport ListBox, { PropTypes as ListBoxPropTypes } from '../ListBox';\nimport { mapDownshiftProps } from '../../tools/createPropAdapter';\nimport mergeRefs from '../../tools/mergeRefs';\nimport deprecate from '../../prop-types/deprecate';\nvar prefix = settings.prefix;\n\nvar defaultItemToString = function defaultItemToString(item) {\n  if (typeof item === 'string') {\n    return item;\n  }\n\n  return item ? item.label : '';\n};\n\nvar Dropdown = /*#__PURE__*/React.forwardRef(function Dropdown(_ref, ref) {\n  var _cx, _cx2, _cx4;\n\n  var containerClassName = _ref.className,\n      disabled = _ref.disabled,\n      direction = _ref.direction,\n      items = _ref.items,\n      label = _ref.label,\n      ariaLabel = _ref.ariaLabel,\n      itemToString = _ref.itemToString,\n      itemToElement = _ref.itemToElement,\n      type = _ref.type,\n      size = _ref.size,\n      onChange = _ref.onChange,\n      id = _ref.id,\n      titleText = _ref.titleText,\n      hideLabel = _ref.hideLabel,\n      helperText = _ref.helperText,\n      translateWithId = _ref.translateWithId,\n      light = _ref.light,\n      invalid = _ref.invalid,\n      invalidText = _ref.invalidText,\n      warn = _ref.warn,\n      warnText = _ref.warnText,\n      initialSelectedItem = _ref.initialSelectedItem,\n      controlledSelectedItem = _ref.selectedItem,\n      downshiftProps = _ref.downshiftProps,\n      other = _objectWithoutProperties(_ref, [\"className\", \"disabled\", \"direction\", \"items\", \"label\", \"ariaLabel\", \"itemToString\", \"itemToElement\", \"type\", \"size\", \"onChange\", \"id\", \"titleText\", \"hideLabel\", \"helperText\", \"translateWithId\", \"light\", \"invalid\", \"invalidText\", \"warn\", \"warnText\", \"initialSelectedItem\", \"selectedItem\", \"downshiftProps\"]);\n\n  var selectProps = mapDownshiftProps(_objectSpread(_objectSpread({}, downshiftProps), {}, {\n    items: items,\n    itemToString: itemToString,\n    initialSelectedItem: initialSelectedItem,\n    onSelectedItemChange: onSelectedItemChange\n  })); // only set selectedItem if the prop is defined. Setting if it is undefined\n  // will overwrite default selected items from useSelect\n\n  if (controlledSelectedItem !== undefined) {\n    selectProps.selectedItem = controlledSelectedItem;\n  }\n\n  var _useSelect = useSelect(selectProps),\n      isOpen = _useSelect.isOpen,\n      getToggleButtonProps = _useSelect.getToggleButtonProps,\n      getLabelProps = _useSelect.getLabelProps,\n      getMenuProps = _useSelect.getMenuProps,\n      getItemProps = _useSelect.getItemProps,\n      highlightedIndex = _useSelect.highlightedIndex,\n      selectedItem = _useSelect.selectedItem;\n\n  var inline = type === 'inline';\n  var showWarning = !invalid && warn;\n  var className = cx(\"\".concat(prefix, \"--dropdown\"), containerClassName, (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--dropdown--invalid\"), invalid), _defineProperty(_cx, \"\".concat(prefix, \"--dropdown--warning\"), showWarning), _defineProperty(_cx, \"\".concat(prefix, \"--dropdown--open\"), isOpen), _defineProperty(_cx, \"\".concat(prefix, \"--dropdown--inline\"), inline), _defineProperty(_cx, \"\".concat(prefix, \"--dropdown--disabled\"), disabled), _defineProperty(_cx, \"\".concat(prefix, \"--dropdown--light\"), light), _defineProperty(_cx, \"\".concat(prefix, \"--dropdown--\").concat(size), size), _defineProperty(_cx, \"\".concat(prefix, \"--list-box--up\"), direction === 'top'), _cx));\n  var titleClasses = cx(\"\".concat(prefix, \"--label\"), (_cx2 = {}, _defineProperty(_cx2, \"\".concat(prefix, \"--label--disabled\"), disabled), _defineProperty(_cx2, \"\".concat(prefix, \"--visually-hidden\"), hideLabel), _cx2));\n  var helperClasses = cx(\"\".concat(prefix, \"--form__helper-text\"), _defineProperty({}, \"\".concat(prefix, \"--form__helper-text--disabled\"), disabled));\n  var wrapperClasses = cx(\"\".concat(prefix, \"--dropdown__wrapper\"), \"\".concat(prefix, \"--list-box__wrapper\"), (_cx4 = {}, _defineProperty(_cx4, \"\".concat(prefix, \"--dropdown__wrapper--inline\"), inline), _defineProperty(_cx4, \"\".concat(prefix, \"--list-box__wrapper--inline\"), inline), _defineProperty(_cx4, \"\".concat(prefix, \"--dropdown__wrapper--inline--invalid\"), inline && invalid), _defineProperty(_cx4, \"\".concat(prefix, \"--list-box__wrapper--inline--invalid\"), inline && invalid), _cx4)); // needs to be Capitalized for react to render it correctly\n\n  var ItemToElement = itemToElement;\n  var toggleButtonProps = getToggleButtonProps();\n  var helper = helperText ? /*#__PURE__*/React.createElement(\"div\", {\n    className: helperClasses\n  }, helperText) : null;\n\n  function onSelectedItemChange(_ref2) {\n    var selectedItem = _ref2.selectedItem;\n\n    if (onChange) {\n      onChange({\n        selectedItem: selectedItem\n      });\n    }\n  }\n\n  var menuItemOptionRefs = useRef(items.map(function (_) {\n    return /*#__PURE__*/React.createRef();\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: wrapperClasses\n  }, other), titleText && /*#__PURE__*/React.createElement(\"label\", _extends({\n    className: titleClasses\n  }, getLabelProps()), titleText), /*#__PURE__*/React.createElement(ListBox, {\n    \"aria-label\": ariaLabel,\n    size: size,\n    className: className,\n    invalid: invalid,\n    invalidText: invalidText,\n    warn: warn,\n    warnText: warnText,\n    light: light,\n    isOpen: isOpen,\n    id: id\n  }, invalid && /*#__PURE__*/React.createElement(WarningFilled16, {\n    className: \"\".concat(prefix, \"--list-box__invalid-icon\")\n  }), showWarning && /*#__PURE__*/React.createElement(WarningAltFilled16, {\n    className: \"\".concat(prefix, \"--list-box__invalid-icon \").concat(prefix, \"--list-box__invalid-icon--warning\")\n  }), /*#__PURE__*/React.createElement(\"button\", _extends({\n    type: \"button\",\n    className: \"\".concat(prefix, \"--list-box__field\"),\n    disabled: disabled,\n    \"aria-disabled\": disabled\n  }, toggleButtonProps, {\n    ref: mergeRefs(toggleButtonProps.ref, ref)\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--list-box__label\")\n  }, selectedItem ? itemToString(selectedItem) : label), /*#__PURE__*/React.createElement(ListBox.MenuIcon, {\n    isOpen: isOpen,\n    translateWithId: translateWithId\n  })), /*#__PURE__*/React.createElement(ListBox.Menu, getMenuProps(), isOpen && items.map(function (item, index) {\n    var _menuItemOptionRefs$c;\n\n    var itemProps = getItemProps({\n      item: item,\n      index: index\n    });\n    var title = itemToElement ? item.text : itemToString(item);\n\n    var _ref3 = (menuItemOptionRefs === null || menuItemOptionRefs === void 0 ? void 0 : (_menuItemOptionRefs$c = menuItemOptionRefs.current[index]) === null || _menuItemOptionRefs$c === void 0 ? void 0 : _menuItemOptionRefs$c.current) || {},\n        offsetWidth = _ref3.offsetWidth,\n        scrollWidth = _ref3.scrollWidth;\n\n    return /*#__PURE__*/React.createElement(ListBox.MenuItem, _extends({\n      key: itemProps.id,\n      isActive: selectedItem === item,\n      isHighlighted: highlightedIndex === index || selectedItem === item,\n      title: offsetWidth < scrollWidth && title || undefined,\n      ref: {\n        menuItemOptionRef: menuItemOptionRefs.current[index]\n      }\n    }, itemProps), itemToElement ? /*#__PURE__*/React.createElement(ItemToElement, _extends({\n      key: itemProps.id\n    }, item)) : itemToString(item), selectedItem === item && /*#__PURE__*/React.createElement(Checkmark16, {\n      className: \"\".concat(prefix, \"--list-box__menu-item__selected-icon\")\n    }));\n  }))), !inline && !invalid && !warn && helper);\n});\nDropdown.displayName = 'Dropdown';\nDropdown.propTypes = {\n  /**\n   * 'aria-label' of the ListBox component.\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Provide a custom className to be applied on the bx--dropdown node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the direction of the dropdown. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom']),\n\n  /**\n   * Disable the control\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Additional props passed to Downshift\n   */\n  downshiftProps: PropTypes.object,\n\n  /**\n   * Provide helper text that is used alongside the control label for\n   * additional help\n   */\n  helperText: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * Specify whether the title text should be hidden or not\n   */\n  hideLabel: PropTypes.bool,\n\n  /**\n   * Specify a custom `id`\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\n   * from their collection that are pre-selected\n   */\n  initialSelectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n\n  /**\n   * Specify whether you want the inline version of this control\n   */\n  inline: deprecate(PropTypes.bool, \"The `inline` prop has been deprecated and will\\n    be removed in the next major release. To specify the inline variant of Dropdown, please use the `type` prop.\"),\n\n  /**\n   * Specify if the currently selected value is invalid.\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Message which is displayed if the value is invalid.\n   */\n  invalidText: PropTypes.node,\n\n  /**\n   * Function to render items as custom components instead of strings.\n   * Defaults to null and is overriden by a getter\n   */\n  itemToElement: PropTypes.func,\n\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * `true` to use the light version.\n   */\n  light: PropTypes.bool,\n\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occuring.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * In the case you want to control the dropdown selection entirely.\n   */\n  selectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n\n  /**\n   * Specify the size of the ListBox. Currently supports either `sm`, `md` or `lg` as an option.\n   */\n  size: ListBoxPropTypes.ListBoxSize,\n\n  /**\n   * Provide the title text that will be read by a screen reader when\n   * visiting this control\n   */\n  titleText: PropTypes.node,\n\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: PropTypes.func,\n\n  /**\n   * The dropdown type, `default` or `inline`\n   */\n  type: ListBoxPropTypes.ListBoxType,\n\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\nDropdown.defaultProps = {\n  disabled: false,\n  type: 'default',\n  itemToString: defaultItemToString,\n  itemToElement: null,\n  light: false,\n  titleText: '',\n  helperText: '',\n  direction: 'bottom'\n};\nexport default Dropdown;","map":null,"metadata":{},"sourceType":"module"}