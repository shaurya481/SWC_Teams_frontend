{"ast":null,"code":"var _iconTypes;\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport cx from 'classnames';\nimport { settings } from 'carbon-components';\nimport { Close20, ErrorFilled20, CheckmarkFilled20, WarningFilled20, WarningAltFilled20, InformationFilled20, InformationSquareFilled20 } from '@carbon/icons-react';\nimport Button from '../Button';\nvar prefix = settings.prefix;\nexport function NotificationActionButton(_ref) {\n  var children = _ref.children,\n      customClassName = _ref.className,\n      onClick = _ref.onClick,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"className\", \"onClick\"]);\n\n  var className = cx(customClassName, \"\".concat(prefix, \"--inline-notification__action-button\"));\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    className: className,\n    kind: \"ghost\",\n    onClick: onClick,\n    size: \"small\"\n  }, rest), children);\n}\nNotificationActionButton.propTypes = {\n  /**\n   * Specify the content of the notification action button.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification action button\n   */\n  className: PropTypes.string,\n\n  /**\n   * Optionally specify a click handler for the notification action button.\n   */\n  onClick: PropTypes.func\n};\nexport function NotificationButton(_ref2) {\n  var ariaLabel = _ref2.ariaLabel,\n      className = _ref2.className,\n      iconDescription = _ref2.iconDescription,\n      type = _ref2.type,\n      IconTag = _ref2.renderIcon,\n      name = _ref2.name,\n      notificationType = _ref2.notificationType,\n      rest = _objectWithoutProperties(_ref2, [\"ariaLabel\", \"className\", \"iconDescription\", \"type\", \"renderIcon\", \"name\", \"notificationType\"]);\n\n  var buttonClassName = cx(className, _defineProperty({}, \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__close-button\"), notificationType));\n  var iconClassName = cx(_defineProperty({}, \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__close-icon\"), notificationType));\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line react/button-has-type\n    React.createElement(\"button\", _extends({}, rest, {\n      type: type,\n      \"aria-label\": iconDescription,\n      title: iconDescription,\n      className: buttonClassName\n    }), IconTag && /*#__PURE__*/React.createElement(IconTag, {\n      \"aria-label\": ariaLabel,\n      className: iconClassName,\n      name: name\n    }))\n  );\n}\nNotificationButton.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the notification button\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Specify an optional className to be applied to the notification button\n   */\n  className: PropTypes.string,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify an optional icon for the Button through a string,\n   * if something but regular \"close\" icon is desirable\n   */\n  name: PropTypes.string,\n\n  /**\n   * Specify the notification type\n   */\n  notificationType: PropTypes.oneOf(['toast', 'inline']),\n\n  /**\n   * Optional prop to allow overriding the icon rendering.\n   * Can be a React component class\n   */\n  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Optional prop to specify the type of the Button\n   */\n  type: PropTypes.string\n};\nNotificationButton.defaultProps = {\n  ariaLabel: 'close notification',\n  // TODO: deprecate this prop\n  notificationType: 'toast',\n  type: 'button',\n  iconDescription: 'close icon',\n  renderIcon: Close20\n};\nexport function NotificationTextDetails(_ref3) {\n  var title = _ref3.title,\n      subtitle = _ref3.subtitle,\n      caption = _ref3.caption,\n      notificationType = _ref3.notificationType,\n      children = _ref3.children,\n      rest = _objectWithoutProperties(_ref3, [\"title\", \"subtitle\", \"caption\", \"notificationType\", \"children\"]);\n\n  if (notificationType === 'toast') {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n      className: \"\".concat(prefix, \"--toast-notification__details\")\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"\".concat(prefix, \"--toast-notification__title\")\n    }, title), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--toast-notification__subtitle\")\n    }, subtitle), caption && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--toast-notification__caption\")\n    }, caption), children);\n  }\n\n  if (notificationType === 'inline') {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n      className: \"\".concat(prefix, \"--inline-notification__text-wrapper\")\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"\".concat(prefix, \"--inline-notification__title\")\n    }, title), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--inline-notification__subtitle\")\n    }, subtitle), children);\n  }\n}\nNotificationTextDetails.propTypes = {\n  /**\n   * Specify the caption\n   */\n  caption: PropTypes.node,\n\n  /**\n   * Pass in the children that will be rendered in NotificationTextDetails\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify the notification type\n   */\n  notificationType: PropTypes.oneOf(['toast', 'inline']),\n\n  /**\n   * Specify the sub-title\n   */\n  subtitle: PropTypes.node,\n\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string\n};\nNotificationTextDetails.defaultProps = {\n  title: 'title',\n  notificationType: 'toast'\n};\nvar iconTypes = (_iconTypes = {\n  error: ErrorFilled20,\n  success: CheckmarkFilled20,\n  warning: WarningFilled20\n}, _defineProperty(_iconTypes, 'warning-alt', WarningAltFilled20), _defineProperty(_iconTypes, \"info\", InformationFilled20), _defineProperty(_iconTypes, 'info-square', InformationSquareFilled20), _iconTypes);\n\nfunction NotificationIcon(_ref4) {\n  var iconDescription = _ref4.iconDescription,\n      kind = _ref4.kind,\n      notificationType = _ref4.notificationType;\n  var IconForKind = iconTypes[kind];\n\n  if (!IconForKind) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(IconForKind, {\n    className: \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__icon\")\n  }, /*#__PURE__*/React.createElement(\"title\", null, iconDescription));\n}\n\nNotificationIcon.propTypes = {\n  iconDescription: PropTypes.string.isRequired,\n  kind: PropTypes.oneOf(['error', 'success', 'warning', 'warning-alt', 'info', 'info-square']).isRequired,\n  notificationType: PropTypes.oneOf(['inline', 'toast']).isRequired\n};\nexport function ToastNotification(_ref5) {\n  var _cx3;\n\n  var role = _ref5.role,\n      notificationType = _ref5.notificationType,\n      onClose = _ref5.onClose,\n      onCloseButtonClick = _ref5.onCloseButtonClick,\n      iconDescription = _ref5.iconDescription,\n      statusIconDescription = _ref5.statusIconDescription,\n      className = _ref5.className,\n      caption = _ref5.caption,\n      subtitle = _ref5.subtitle,\n      title = _ref5.title,\n      kind = _ref5.kind,\n      lowContrast = _ref5.lowContrast,\n      hideCloseButton = _ref5.hideCloseButton,\n      children = _ref5.children,\n      timeout = _ref5.timeout,\n      rest = _objectWithoutProperties(_ref5, [\"role\", \"notificationType\", \"onClose\", \"onCloseButtonClick\", \"iconDescription\", \"statusIconDescription\", \"className\", \"caption\", \"subtitle\", \"title\", \"kind\", \"lowContrast\", \"hideCloseButton\", \"children\", \"timeout\"]);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var containerClassName = cx(className, (_cx3 = {}, _defineProperty(_cx3, \"\".concat(prefix, \"--toast-notification\"), true), _defineProperty(_cx3, \"\".concat(prefix, \"--toast-notification--low-contrast\"), lowContrast), _defineProperty(_cx3, \"\".concat(prefix, \"--toast-notification--\").concat(kind), kind), _cx3));\n\n  var handleClose = function handleClose(evt) {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n\n  var savedOnClose = useRef(onClose);\n  useEffect(function () {\n    savedOnClose.current = onClose;\n  });\n  useEffect(function () {\n    if (!timeout) {\n      return;\n    }\n\n    var timeoutId = window.setTimeout(function (event) {\n      setIsOpen(false);\n\n      if (savedOnClose.current) {\n        savedOnClose.current(event);\n      }\n    }, timeout);\n    return function () {\n      window.clearTimeout(timeoutId);\n    };\n  }, [timeout]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    role: role,\n    kind: kind,\n    className: containerClassName\n  }), /*#__PURE__*/React.createElement(NotificationIcon, {\n    notificationType: notificationType,\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React.createElement(NotificationTextDetails, {\n    title: title,\n    subtitle: subtitle,\n    caption: caption,\n    notificationType: notificationType\n  }, children), !hideCloseButton && /*#__PURE__*/React.createElement(NotificationButton, {\n    iconDescription: iconDescription,\n    notificationType: notificationType,\n    onClick: handleCloseButtonClick\n  }));\n}\nToastNotification.propTypes = {\n  /**\n   * Specify the caption\n   */\n  caption: PropTypes.node,\n\n  /**\n   * Pass in the children that will be rendered within the ToastNotification\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']).isRequired,\n\n  /**\n   * Specify whether you are using the low contrast variant of the ToastNotification.\n   */\n  lowContrast: PropTypes.bool,\n\n  /**\n   * By default, this value is \"toast\". You can also provide an alternate type\n   * if it makes sense for the underlying `<NotificationTextDetails>` and `<NotificationButton>`\n   */\n  notificationType: PropTypes.string,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * By default, this value is \"alert\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side\n   */\n  role: PropTypes.string.isRequired,\n\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n\n  /**\n   * Specify the sub-title\n   */\n  subtitle: PropTypes.node,\n\n  /**\n   * Specify an optional duration the notification should be closed in\n   */\n  timeout: PropTypes.number,\n\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string.isRequired\n};\nToastNotification.defaultProps = {\n  kind: 'error',\n  title: 'provide a title',\n  role: 'alert',\n  notificationType: 'toast',\n  iconDescription: 'closes notification',\n  onCloseButtonClick: function onCloseButtonClick() {},\n  hideCloseButton: false,\n  timeout: 0\n};\nexport function InlineNotification(_ref6) {\n  var _cx4;\n\n  var actions = _ref6.actions,\n      role = _ref6.role,\n      notificationType = _ref6.notificationType,\n      onClose = _ref6.onClose,\n      onCloseButtonClick = _ref6.onCloseButtonClick,\n      iconDescription = _ref6.iconDescription,\n      statusIconDescription = _ref6.statusIconDescription,\n      className = _ref6.className,\n      subtitle = _ref6.subtitle,\n      title = _ref6.title,\n      kind = _ref6.kind,\n      lowContrast = _ref6.lowContrast,\n      hideCloseButton = _ref6.hideCloseButton,\n      children = _ref6.children,\n      rest = _objectWithoutProperties(_ref6, [\"actions\", \"role\", \"notificationType\", \"onClose\", \"onCloseButtonClick\", \"iconDescription\", \"statusIconDescription\", \"className\", \"subtitle\", \"title\", \"kind\", \"lowContrast\", \"hideCloseButton\", \"children\"]);\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isOpen = _useState4[0],\n      setIsOpen = _useState4[1];\n\n  var containerClassName = cx(className, (_cx4 = {}, _defineProperty(_cx4, \"\".concat(prefix, \"--inline-notification\"), true), _defineProperty(_cx4, \"\".concat(prefix, \"--inline-notification--low-contrast\"), lowContrast), _defineProperty(_cx4, \"\".concat(prefix, \"--inline-notification--\").concat(kind), kind), _defineProperty(_cx4, \"\".concat(prefix, \"--inline-notification--hide-close-button\"), hideCloseButton), _cx4));\n\n  var handleClose = function handleClose(evt) {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    role: role,\n    kind: kind,\n    className: containerClassName\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--inline-notification__details\")\n  }, /*#__PURE__*/React.createElement(NotificationIcon, {\n    notificationType: notificationType,\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React.createElement(NotificationTextDetails, {\n    title: title,\n    subtitle: subtitle,\n    notificationType: notificationType\n  }, children)), actions, !hideCloseButton && /*#__PURE__*/React.createElement(NotificationButton, {\n    iconDescription: iconDescription,\n    notificationType: notificationType,\n    onClick: handleCloseButtonClick\n  }));\n}\nInlineNotification.propTypes = {\n  /**\n   * Pass in the action nodes that will be rendered within the InlineNotification\n   */\n  actions: PropTypes.node,\n\n  /**\n   * Pass in the children that will be rendered within the InlineNotification\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']).isRequired,\n\n  /**\n   * Specify whether you are using the low contrast variant of the InlineNotification.\n   */\n  lowContrast: PropTypes.bool,\n\n  /**\n   * By default, this value is \"inline\". You can also provide an alternate type\n   * if it makes sense for the underlying `<NotificationTextDetails>` and `<NotificationButton>`\n   */\n  notificationType: PropTypes.string,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * By default, this value is \"alert\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side\n   */\n  role: PropTypes.string.isRequired,\n\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n\n  /**\n   * Specify the sub-title\n   */\n  subtitle: PropTypes.node,\n\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string.isRequired\n};\nInlineNotification.defaultProps = {\n  role: 'alert',\n  notificationType: 'inline',\n  iconDescription: 'closes notification',\n  onCloseButtonClick: function onCloseButtonClick() {},\n  hideCloseButton: false\n};","map":null,"metadata":{},"sourceType":"module"}