{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Create an adapter that converts an object of props with potentially deprecated\n * prop names to the replacement prop names in a newer version. Useful for guarding\n * against breaking changes when a prop has been renamed\n *\n * @param {Array} spec - an array of options which specify a text or regex\n * matcher alongside a replacement if there is a match\n * @returns {Function}\n */\n\n\nfunction createPropAdapter(spec) {\n  // if props aren't passed in we should default the prop to empty object\n  return function () {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var output = {};\n    Object.keys(input).forEach(function (key) {\n      var match = spec.find(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            regex = _ref2[0];\n\n        return key.match(regex);\n      });\n\n      if (match) {\n        var _match = _slicedToArray(match, 2),\n            regex = _match[0],\n            replacer = _match[1];\n\n        output[key.replace(regex, replacer)] = input[key];\n        return;\n      }\n\n      output[key] = input[key];\n    });\n    return output;\n  };\n}\n/**\n * TODO: REMOVE IN v11\n * props staring with \"default...\" were changed to \"initial...\" in Downshift v3\n *\n * @see https://github.com/downshift-js/downshift/releases/tag/v3.0.0\n */\n\n\nvar mapDownshiftProps = createPropAdapter([[/^default/g, 'initial']]);\nexport { mapDownshiftProps };","map":null,"metadata":{},"sourceType":"module"}