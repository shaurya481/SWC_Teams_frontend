{"ast":null,"code":"import { tokenRegex, revFormat, formats } from \"./formatting\";\nimport { defaults } from \"../types/options\";\nimport { english } from \"../l10n/default\";\nexport var createDateFormatter = function createDateFormatter(_ref) {\n  var _ref$config = _ref.config,\n      config = _ref$config === void 0 ? defaults : _ref$config,\n      _ref$l10n = _ref.l10n,\n      l10n = _ref$l10n === void 0 ? english : _ref$l10n,\n      _ref$isMobile = _ref.isMobile,\n      isMobile = _ref$isMobile === void 0 ? false : _ref$isMobile;\n  return function (dateObj, frmt, overrideLocale) {\n    var locale = overrideLocale || l10n;\n\n    if (config.formatDate !== undefined && !isMobile) {\n      return config.formatDate(dateObj, frmt, locale);\n    }\n\n    return frmt.split(\"\").map(function (c, i, arr) {\n      return formats[c] && arr[i - 1] !== \"\\\\\" ? formats[c](dateObj, locale, config) : c !== \"\\\\\" ? c : \"\";\n    }).join(\"\");\n  };\n};\nexport var createDateParser = function createDateParser(_ref2) {\n  var _ref2$config = _ref2.config,\n      config = _ref2$config === void 0 ? defaults : _ref2$config,\n      _ref2$l10n = _ref2.l10n,\n      l10n = _ref2$l10n === void 0 ? english : _ref2$l10n;\n  return function (date, givenFormat, timeless, customLocale) {\n    if (date !== 0 && !date) return undefined;\n    var locale = customLocale || l10n;\n    var parsedDate;\n    var dateOrig = date;\n    if (date instanceof Date) parsedDate = new Date(date.getTime());else if (typeof date !== \"string\" && date.toFixed !== undefined) parsedDate = new Date(date);else if (typeof date === \"string\") {\n      var format = givenFormat || (config || defaults).dateFormat;\n      var datestr = String(date).trim();\n\n      if (datestr === \"today\") {\n        parsedDate = new Date();\n        timeless = true;\n      } else if (/Z$/.test(datestr) || /GMT$/.test(datestr)) parsedDate = new Date(date);else if (config && config.parseDate) parsedDate = config.parseDate(date, format);else {\n        parsedDate = !config || !config.noCalendar ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0) : new Date(new Date().setHours(0, 0, 0, 0));\n        var matched,\n            ops = [];\n\n        for (var i = 0, matchIndex = 0, regexStr = \"\"; i < format.length; i++) {\n          var token = format[i];\n          var isBackSlash = token === \"\\\\\";\n          var escaped = format[i - 1] === \"\\\\\" || isBackSlash;\n\n          if (tokenRegex[token] && !escaped) {\n            regexStr += tokenRegex[token];\n            var match = new RegExp(regexStr).exec(date);\n\n            if (match && (matched = true)) {\n              ops[token !== \"Y\" ? \"push\" : \"unshift\"]({\n                fn: revFormat[token],\n                val: match[++matchIndex]\n              });\n            }\n          } else if (!isBackSlash) regexStr += \".\";\n\n          ops.forEach(function (_ref3) {\n            var fn = _ref3.fn,\n                val = _ref3.val;\n            return parsedDate = fn(parsedDate, val, locale) || parsedDate;\n          });\n        }\n\n        parsedDate = matched ? parsedDate : undefined;\n      }\n    }\n\n    if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {\n      config.errorHandler(new Error(\"Invalid date provided: \".concat(dateOrig)));\n      return undefined;\n    }\n\n    if (timeless === true) parsedDate.setHours(0, 0, 0, 0);\n    return parsedDate;\n  };\n};\nexport function compareDates(date1, date2) {\n  var timeless = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (timeless !== false) {\n    return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);\n  }\n\n  return date1.getTime() - date2.getTime();\n}\nexport function compareTimes(date1, date2) {\n  return 3600 * (date1.getHours() - date2.getHours()) + 60 * (date1.getMinutes() - date2.getMinutes()) + date1.getSeconds() - date2.getSeconds();\n}\nexport var isBetween = function isBetween(ts, ts1, ts2) {\n  return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);\n};\nexport var duration = {\n  DAY: 86400000\n};\nexport function getDefaultHours(config) {\n  var hours = config.defaultHour;\n  var minutes = config.defaultMinute;\n  var seconds = config.defaultSeconds;\n\n  if (config.minDate !== undefined) {\n    var minHour = config.minDate.getHours();\n    var minMinutes = config.minDate.getMinutes();\n    var minSeconds = config.minDate.getSeconds();\n\n    if (hours < minHour) {\n      hours = minHour;\n    }\n\n    if (hours === minHour && minutes < minMinutes) {\n      minutes = minMinutes;\n    }\n\n    if (hours === minHour && minutes === minMinutes && seconds < minSeconds) seconds = config.minDate.getSeconds();\n  }\n\n  if (config.maxDate !== undefined) {\n    var maxHr = config.maxDate.getHours();\n    var maxMinutes = config.maxDate.getMinutes();\n    hours = Math.min(hours, maxHr);\n    if (hours === maxHr) minutes = Math.min(maxMinutes, minutes);\n    if (hours === maxHr && minutes === maxMinutes) seconds = config.maxDate.getSeconds();\n  }\n\n  return {\n    hours: hours,\n    minutes: minutes,\n    seconds: seconds\n  };\n}","map":null,"metadata":{},"sourceType":"module"}