{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"className\", \"onRequestClose\", \"open\", \"title\", \"subtitle\", \"children\", \"disableSubmit\", \"onRequestSubmit\", \"primaryButtonText\", \"secondaryButtonText\", \"selectorPrimaryFocus\", \"pageContentSelector\", \"selectorPageContent\", \"formTitle\", \"formDescription\"];\n/**\n * Copyright IBM Corp. 2021, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\nimport React from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pkg } from '../../settings';\nimport { deprecateProp } from '../../global/js/utils/props-helper'; // Carbon and package components we use.\n\nimport { Form } from 'carbon-components-react';\nimport { SidePanel } from '../SidePanel/SidePanel'; // The block part of our conventional BEM class names (blockClass__E--M).\n\nvar blockClass = \"\".concat(pkg.prefix, \"--create-side-panel\");\nvar componentName = 'CreateSidePanel'; // NOTE: the component SCSS is not imported here: it is rolled up separately.\n\n/**\n * This is an example component to show relevant conventions and usage.\n */\n\nexport var CreateSidePanel = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var className = _ref.className,\n      onRequestClose = _ref.onRequestClose,\n      open = _ref.open,\n      title = _ref.title,\n      subtitle = _ref.subtitle,\n      children = _ref.children,\n      disableSubmit = _ref.disableSubmit,\n      onRequestSubmit = _ref.onRequestSubmit,\n      primaryButtonText = _ref.primaryButtonText,\n      secondaryButtonText = _ref.secondaryButtonText,\n      selectorPrimaryFocus = _ref.selectorPrimaryFocus,\n      pageContentSelector = _ref.pageContentSelector,\n      selectorPageContent = _ref.selectorPageContent,\n      formTitle = _ref.formTitle,\n      formDescription = _ref.formDescription,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var actions = [{\n    label: primaryButtonText,\n    onClick: onRequestSubmit,\n    kind: 'primary',\n    disabled: disableSubmit\n  }, {\n    label: secondaryButtonText,\n    onClick: onRequestClose,\n    kind: 'secondary'\n  }];\n  return (selectorPageContent || pageContentSelector) && /*#__PURE__*/React.createElement(SidePanel, _extends({}, rest, {\n    open: open,\n    ref: ref,\n    pageContentSelector: pageContentSelector,\n    selectorPageContent: selectorPageContent,\n    onRequestClose: onRequestClose,\n    title: title,\n    subtitle: subtitle,\n    actions: actions,\n    selectorPrimaryFocus: selectorPrimaryFocus,\n    placement: \"right\",\n    slideIn: true,\n    animateTitle: false,\n    className: cx(blockClass, className),\n    size: \"md\"\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"\".concat(blockClass, \"__form-title-text \").concat(blockClass, \"__content-text\")\n  }, formTitle), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(blockClass, \"__form-description-text \").concat(blockClass, \"__content-text\")\n  }, formDescription), /*#__PURE__*/React.createElement(Form, {\n    className: \"\".concat(blockClass, \"__form\")\n  }, children));\n});\nCreateSidePanel = pkg.checkComponentEnabled(CreateSidePanel, componentName);\nCreateSidePanel.displayName = componentName;\nCreateSidePanel.propTypes = {\n  /**\n   * Sets the body content of the create side panel\n   */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n\n  /**\n   * Provide an optional class to be applied to the containing node.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The description of the CreateSidePanel serves to provide more information about the form within the panel.\n   */\n  description: PropTypes.node,\n\n  /**\n   * Specifies a boolean for disabling or enabling the primary button. This is important for form validation\n   * Returning `true` prevents the primary button from being clicked until required fields are completed.\n   */\n  disableSubmit: PropTypes.bool,\n\n  /**\n   * Specifies an optional field that provides a additional context for a form\n   */\n  formDescription: PropTypes.node,\n\n  /**\n   * Specifies a required field that provides a title for a form\n   */\n  formTitle: PropTypes.node.isRequired,\n\n  /**\n   * Specifies an optional handler which is called when the CreateSidePanel\n   * is closed.\n   */\n  onRequestClose: PropTypes.func,\n\n  /**\n   * Specifies an optional handler which is called when the CreateSidePanel\n   * primary button is pressed.\n   */\n  onRequestSubmit: PropTypes.func,\n\n  /**\n   * Specifies whether the CreateSidePanel is open or not.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * This is the selector to the element that contains all of the page content that will shrink if the panel is a slide in.\n   * This prop is required when using the `slideIn` variant of the side panel.\n   */\n  pageContentSelector: deprecateProp(PropTypes.string, 'This prop has been renamed to `selectorPageContent`.'),\n\n  /**\n   * Specifies the primary button's text in the modal.\n   */\n  primaryButtonText: PropTypes.string.isRequired,\n\n  /**\n   * Specifies the secondary button's text in the modal.\n   */\n  secondaryButtonText: PropTypes.string.isRequired,\n\n  /**\n   * This is the selector to the element that contains all of the page content that will shrink if the panel is a slide in.\n   * This prop is required when using the `slideIn` variant of the side panel.\n   */\n  selectorPageContent: PropTypes.string.isRequired,\n\n  /**\n   * Specifies which DOM element in the form should be focused.\n   */\n  selectorPrimaryFocus: PropTypes.node.isRequired,\n\n  /**\n   * The subtitle of the CreateSidePanel is optional and serves to provide more information about the modal.\n   */\n  subtitle: PropTypes.node,\n\n  /**\n   * The title of the CreateSidePanel is usually the product or service name.\n   */\n  title: PropTypes.node.isRequired\n};","map":null,"metadata":{},"sourceType":"module"}