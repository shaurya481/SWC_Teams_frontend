{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} //\n// Copyright IBM Corp. 2020, 2021\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n// Import portions of React that are needed.\n\n\nimport React from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pkg } from '../../settings'; // Carbon and package components we use.\n\nimport { Button } from 'carbon-components-react'; // The block part of our conventional BEM class names (blockClass__E--M).\n\nvar componentName = 'ActionBarItem';\nvar blockClass = \"\".concat(pkg.prefix, \"--action-bar-item\"); // NOTE: the component SCSS is not imported here: it is rolled up separately.\n\n/**\n * The ActionBarItem is used in the page header to populate the action bar\n */\n\nexport var ActionBarItem = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var className = _ref.className,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(Button, _objectSpread(_objectSpread({}, rest), {}, {\n    ref: ref,\n    className: cx(blockClass, className),\n    hasIconOnly: true,\n    kind: 'ghost',\n    size: 'field',\n    tooltipPosition: 'bottom',\n    tooltipAlignment: 'end',\n    type: 'button'\n  }));\n}); // Return a placeholder if not released and not enabled by feature flag\n\nActionBarItem = pkg.checkComponentEnabled(ActionBarItem, componentName); // Props the user cannot change\n\nvar reservedProps = ['hasIconOnly', 'kind', 'size', 'tooltipPosition', 'tooltipAlignment', 'type']; // Base props on Carbon Button\n\nvar propTypes = _objectSpread({}, Button.propTypes);\n\nvar defaultProps = _objectSpread({}, Button.defaultProps); // Remove reserved props\n\n\nreservedProps.forEach(function (prop) {\n  delete propTypes[prop];\n  delete defaultProps[prop];\n});\nActionBarItem.displayName = componentName;\nActionBarItem.propTypes = _objectSpread(_objectSpread({}, propTypes), {}, {\n  /* ***************************************\n  /\n  /  The declarations below allow storybook & DocGen to produce documentation.\n  /  Some or all of them may be inherited from the underlying Carbon component.\n  /\n  / ****************************************/\n\n  /**\n   * Specify an optional className to be added to your Button\n   *\n   * (inherited from Carbon Button)\n   */\n  className: PropTypes.string,\n\n  /**\n   * If specifying the `renderIcon` prop, provide a description for that icon that can\n   * be read by screen readers\n   *\n   * (inherited from Carbon Button)\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Optional click handler\n   *\n   * (inherited from Carbon Button)\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Optional prop to allow overriding the icon rendering.\n   * Can be a React component class\n   *\n   * (inherited from Carbon Button)\n   */\n  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n});\nActionBarItem.defaultProps = _objectSpread({}, defaultProps);","map":null,"metadata":{},"sourceType":"module"}