{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"actions\", \"children\", \"className\", \"maxVisible\", \"onWidthChange\", \"overflowAriaLabel\", \"rightAlign\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} //\n// Copyright IBM Corp. 2020, 2021\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n// Import portions of React that are needed.\n\n\nimport React, { useEffect, useState, useRef } from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pkg } from '../../settings';\nimport ReactResizeDetector from 'react-resize-detector'; // Carbon and package components we use.\n\nimport { Button, OverflowMenu, OverflowMenuItem } from 'carbon-components-react';\nimport uuidv4 from '../../global/js/utils/uuidv4';\nimport { deprecateProp, extractShapesArray, prepareProps } from '../../global/js/utils/props-helper';\nimport { ActionBarItem } from './ActionBarItem'; // The block part of our conventional BEM class names (blockClass__E--M).\n\nvar blockClass = \"\".concat(pkg.prefix, \"--action-bar\");\nvar componentName = 'ActionBar'; // NOTE: the component SCSS is not imported here: it is rolled up separately.\n\n/**\n * The ActionBar is used internally by the PageHeader to wrap ActionBarItems.\n */\n\nexport var ActionBar = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var actions = _ref.actions,\n      children = _ref.children,\n      className = _ref.className,\n      maxVisible = _ref.maxVisible,\n      onWidthChange = _ref.onWidthChange,\n      overflowAriaLabel = _ref.overflowAriaLabel,\n      rightAlign = _ref.rightAlign,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      displayCount = _useState2[0],\n      setDisplayCount = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      displayedItems = _useState4[0],\n      setDisplayedItems = _useState4[1];\n\n  var internalId = useRef(uuidv4());\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      itemArray = _useState6[0],\n      setItemArray = _useState6[1];\n\n  var refDisplayedItems = useRef(null);\n\n  var ActionBarOverflowItems = function ActionBarOverflowItems(_ref2) {\n    var overflowItems = _ref2.overflowItems;\n    return /*#__PURE__*/React.createElement(OverflowMenu, {\n      ariaLabel: overflowAriaLabel,\n      className: \"\".concat(blockClass, \"__overflow-menu\"),\n      direction: \"bottom\",\n      flipped: true,\n      menuOptionsClass: \"\".concat(blockClass, \"-options\")\n    }, overflowItems.map(function (item, index) {\n      // This uses a copy of a menu item option\n      // NOTE: Cannot use a real Tooltip icon below as it uses a <button /> the\n      // div equivalent below is based on Carbon 10.25.0\n      return /*#__PURE__*/React.createElement(OverflowMenuItem, {\n        className: \"\".concat(blockClass, \"__overflow-menu-item\"),\n        key: \"\".concat(blockClass, \"-overflow-\").concat(internalId.current, \"-\").concat(index),\n        itemText: /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(blockClass, \"__overflow-menu-item-content\"),\n          \"aria-describedby\": \"\".concat(internalId, \"--overflow-menu-item-label\")\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"\".concat(blockClass, \"__overflow-menu-item-label\"),\n          id: \"\".concat(internalId, \"--overflow-menu-item-label\")\n        }, item.props.iconDescription), /*#__PURE__*/React.createElement(item.props.renderIcon, null))\n      });\n    }));\n  };\n\n  ActionBarOverflowItems.propTypes = {\n    /**\n     * overflowItems: items to bre shown in the ActionBar overflow menu\n     */\n    overflowItems: PropTypes.arrayOf(PropTypes.element)\n  }; // create child array from children which may be a fragment\n\n  useEffect(function () {\n    if (actions) {\n      setItemArray(actions);\n    } else {\n      setItemArray(extractShapesArray(children));\n    }\n  }, [actions, children]); // creates displayed items based on displayCount and alignment\n\n  useEffect(function () {\n    var newDisplayedItems = itemArray.map(function (item, index) {\n      return /*#__PURE__*/React.createElement(ActionBarItem, _extends({}, item, {\n        key: \"\".concat(index)\n      }));\n    }); // extract any there are not room for to newOverflowItems\n\n    var newOverflowItems = newDisplayedItems.splice(displayCount); // add overflow menu if needed\n\n    if (newOverflowItems.length) {\n      newDisplayedItems.push( /*#__PURE__*/React.createElement(ActionBarOverflowItems, {\n        overflowItems: newOverflowItems,\n        key: \"overflow-menu-\".concat(internalId.current)\n      }));\n    }\n\n    setDisplayedItems(newDisplayedItems);\n  }, [itemArray, displayCount]); // determine display count based on space available and width of pageActions\n\n  var checkFullyVisibleItems = function checkFullyVisibleItems() {\n    var spaceAvailable = refDisplayedItems.current.offsetWidth;\n    var actionBarItemWidth = refDisplayedItems.current.offsetHeight; // short cut measure width\n\n    /* istanbul ignore next if */\n\n    if (actionBarItemWidth > 0) {\n      var mightFit = spaceAvailable / actionBarItemWidth; // visibleItems may include 1 overflow menu\n\n      var visibleItems = maxVisible ? Math.min(itemArray.length, maxVisible + 1) // + 1 for overflow menu if needed\n      : itemArray.length;\n      var willFit = Math.min(Math.floor(mightFit), visibleItems);\n      onWidthChange && onWidthChange({\n        maxWidth: actionBarItemWidth * visibleItems,\n        minWidth: actionBarItemWidth\n      }); // action bar items are a fixed width\n\n      if (willFit < itemArray.length) {\n        willFit -= 1; // remove one for overflow menu\n      }\n\n      if (willFit < 1) {\n        setDisplayCount(0);\n      } else {\n        setDisplayCount(willFit);\n      }\n    }\n  };\n\n  useEffect(function () {\n    checkFullyVisibleItems(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [maxVisible, itemArray]);\n\n  var handleResize = function handleResize() {\n    // width is the space available for all action bar items horizontally\n    // the action bar items are squares so the height should be one item wide\n\n    /* istanbul ignore next */\n    // not sure how to fake window resize\n    checkFullyVisibleItems();\n  };\n\n  return /*#__PURE__*/React.createElement(ReactResizeDetector, {\n    onResize: handleResize\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    className: cx([blockClass, className]),\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: refDisplayedItems,\n    className: cx([\"\".concat(blockClass, \"__displayed-items\"), _defineProperty({}, \"\".concat(blockClass, \"__displayed-items--right\"), rightAlign)])\n  }, displayedItems)));\n});\nActionBar.displayName = componentName;\nActionBar.propTypes = {\n  /**\n   * Specifies the action bar items. Each item is specified as an object\n   * with the properties of a Carbon Button in icon only form. Button kind, size, tooltipPosition,\n   * tooltipAlignment and type are ignored.\n   *\n   * Carbon Button API https://react.carbondesignsystem.com/?path=/docs/components-button--default#component-api\n   */\n  actions: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape(_objectSpread(_objectSpread({}, prepareProps(Button.propTypes, ['kind', 'size', 'tooltipPosition', 'tooltipAlignment'])), {}, {\n    iconDescription: PropTypes.string.isRequired,\n    onClick: Button.propTypes.onClick,\n    renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired\n  })))]),\n\n  /**\n   * children of the action bar (action bar items)\n   */\n  children: deprecateProp(PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element]), 'See documentation on the `actions` prop.'),\n  // expects action bar item as array or in fragment,\n\n  /**\n   * className\n   */\n  className: PropTypes.string,\n\n  /**\n   * maxVisible : Maximum action bar items visible before going into the overflow menu\n   */\n  maxVisible: PropTypes.number,\n\n  /**\n   * onItemCountChange - event reporting maxWidth\n   */\n  onWidthChange: PropTypes.func,\n\n  /**\n   * overflowAriaLabel label for open close button overflow used for action bar items that do nto fit.\n   */\n  overflowAriaLabel: PropTypes.string,\n\n  /**\n   * align tags to right of available space\n   */\n  rightAlign: PropTypes.bool\n};\nActionBar.defaultProps = {\n  overflowAriaLabel: 'Open and close additional action bar items list.',\n  rightAlign: false\n};","map":null,"metadata":{},"sourceType":"module"}