{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"className\", \"children\", \"onRequestClose\", \"onRequestSubmit\", \"open\", \"title\", \"subtitle\", \"description\", \"secondaryButtonText\", \"primaryButtonText\", \"disableSubmit\", \"selectorPrimaryFocus\"];\n/**\n * Copyright IBM Corp. 2021, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\nimport React from 'react'; // Carbon and package components we use.\n\nimport { ComposedModal, ModalHeader, ModalFooter, ModalBody, Form, Button } from 'carbon-components-react'; // Other standard imports.\n\nimport { pkg } from '../../settings';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nvar componentName = 'CreateModal';\nvar blockClass = \"\".concat(pkg.prefix, \"--create-modal\"); // Custom PropType validator which checks and ensures that the children property has no more than 4 nodes\n\nvar isValidChildren = function isValidChildren() {\n  return function (_ref) {\n    var children = _ref.children;\n\n    if (children && children.length > 4) {\n      throw new Error('The `CreateModal` component does not take more than 4 nodes as children. This is to ensure that the modal does not overflow. Please remove 1 or more nodes.');\n    }\n\n    return;\n  };\n};\n\nexport var CreateModal = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var className = _ref2.className,\n      children = _ref2.children,\n      onRequestClose = _ref2.onRequestClose,\n      onRequestSubmit = _ref2.onRequestSubmit,\n      open = _ref2.open,\n      title = _ref2.title,\n      subtitle = _ref2.subtitle,\n      description = _ref2.description,\n      secondaryButtonText = _ref2.secondaryButtonText,\n      primaryButtonText = _ref2.primaryButtonText,\n      disableSubmit = _ref2.disableSubmit,\n      selectorPrimaryFocus = _ref2.selectorPrimaryFocus,\n      rest = _objectWithoutProperties(_ref2, _excluded);\n\n  return /*#__PURE__*/React.createElement(ComposedModal, _extends({}, rest, {\n    selectorPrimaryFocus: selectorPrimaryFocus,\n    className: cx(blockClass, className),\n    open: open,\n    ref: ref,\n    \"aria-label\": title,\n    size: \"sm\",\n    preventCloseOnClickOutside: true\n  }), /*#__PURE__*/React.createElement(ModalHeader, {\n    title: title,\n    titleClassName: \"\".concat(blockClass, \"__title\")\n  }, subtitle && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(blockClass, \"__subtitle\")\n  }, subtitle)), /*#__PURE__*/React.createElement(ModalBody, {\n    hasForm: true\n  }, description && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(blockClass, \"__description\")\n  }, description), /*#__PURE__*/React.createElement(Form, {\n    className: \"\".concat(blockClass, \"__form\")\n  }, children)), /*#__PURE__*/React.createElement(ModalFooter, null, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    kind: \"secondary\",\n    onClick: onRequestClose\n  }, secondaryButtonText), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    kind: \"primary\",\n    onClick: onRequestSubmit,\n    disabled: disableSubmit\n  }, primaryButtonText)));\n}); // Return a placeholder if not released and not enabled by feature flag\n\nCreateModal = pkg.checkComponentEnabled(CreateModal, componentName);\nCreateModal.propTypes = {\n  /**\n   * Children refers to all form items within a form inside of the modal's body.\n   */\n  children: isValidChildren(),\n\n  /**\n   * Specify an optional className to be applied to the modal root node\n   */\n  className: PropTypes.string,\n\n  /**\n   * The description of the CreateModal serves to provide more information about the modal.\n   */\n  description: PropTypes.node.isRequired,\n\n  /**\n   * Specifies a boolean for disabling or enabling the primary button. This is important for form validation\n   * Returning `true` prevents the primary button from being clicked until required fields are completed.\n   */\n  disableSubmit: PropTypes.bool,\n\n  /**\n   * Specifies an optional handler which is called when the CreateModal\n   * is closed.\n   */\n  onRequestClose: PropTypes.func,\n\n  /**\n   * Specifies an optional handler which is called when the CreateModal\n   * primary button is pressed.\n   */\n  onRequestSubmit: PropTypes.func,\n\n  /**\n   * Specifies whether the CreateModal is open or not.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Specifies the primary button's text in the modal.\n   */\n  primaryButtonText: PropTypes.string.isRequired,\n\n  /**\n   * Specifies the secondary button's text in the modal.\n   */\n  secondaryButtonText: PropTypes.string.isRequired,\n\n  /**\n   * Specifies which DOM element in the form should be focused.\n   */\n  selectorPrimaryFocus: PropTypes.node.isRequired,\n\n  /**\n   * The subtitle of the CreateModal is optional and serves to provide more information about the modal.\n   */\n  subtitle: PropTypes.node,\n\n  /**\n   * The title of the CreateModal is usually the product or service name.\n   */\n  title: PropTypes.node.isRequired\n};\nCreateModal.displayName = componentName;\nCreateModal.defaultProps = {\n  disableSubmit: false\n};","map":null,"metadata":{},"sourceType":"module"}