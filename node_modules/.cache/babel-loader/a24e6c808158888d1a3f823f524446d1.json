{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"action\", \"className\", \"illustrationTheme\", \"link\", \"size\", \"subtitle\", \"title\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2020, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\n\nimport React from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Button, Link } from 'carbon-components-react';\nimport { pkg } from '../../../settings';\nimport { EmptyStateContent } from '../EmptyStateContent';\nimport { NotificationsIllustration } from '../assets/NotificationsIllustration';\nimport { EmptyStateDefaultProps } from '../EmptyState'; // The block part of our conventional BEM class names (blockClass__E--M).\n\nvar blockClass = \"\".concat(pkg.prefix, \"--empty-state\");\nvar componentName = 'NotificationsEmptyState';\nexport var NotificationsEmptyState = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var action = _ref.action,\n      className = _ref.className,\n      illustrationTheme = _ref.illustrationTheme,\n      link = _ref.link,\n      size = _ref.size,\n      subtitle = _ref.subtitle,\n      title = _ref.title,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, // Pass through any other property values as HTML attributes.\n  rest, {\n    className: cx(blockClass, className),\n    ref: ref\n  }), /*#__PURE__*/React.createElement(NotificationsIllustration, {\n    size: size,\n    theme: illustrationTheme\n  }), /*#__PURE__*/React.createElement(EmptyStateContent, {\n    action: action,\n    link: link,\n    size: size,\n    subtitle: subtitle,\n    title: title\n  }));\n}); // Return a placeholder if not released and not enabled by feature flag\n\nNotificationsEmptyState = pkg.checkComponentEnabled(NotificationsEmptyState, componentName); // The display name of the component, used by React. Note that displayName\n// is used in preference to relying on function.name.\n\nNotificationsEmptyState.displayName = componentName; // The types and DocGen commentary for the component props,\n// in alphabetical order (for consistency).\n// See https://www.npmjs.com/package/prop-types#usage.\n\nNotificationsEmptyState.propTypes = {\n  /**\n   * Empty state action button\n   */\n  action: PropTypes.shape(_objectSpread(_objectSpread({}, Button.propTypes), {}, {\n    kind: PropTypes.oneOf(['primary', 'secondary', 'tertiary']),\n    renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    onClick: Button.propTypes.onClick,\n    text: PropTypes.string\n  })),\n\n  /**\n   * Provide an optional class to be applied to the containing node.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Empty state illustration theme variations.\n   * To ensure you use the correct themed illustrations, you can conditionally specify light or dark\n   * based on your app's current theme value. Example:\n   * `illustrationTheme={appTheme === ('carbon--g100' || 'carbon--g90') ? 'dark' : 'light'}`\n   */\n  illustrationTheme: PropTypes.oneOf(['light', 'dark']),\n\n  /**\n   * Empty state link object\n   */\n  link: PropTypes.shape(_objectSpread(_objectSpread({}, Link.propTypes), {}, {\n    text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    href: PropTypes.string\n  })),\n\n  /**\n   * Empty state size\n   */\n  size: PropTypes.oneOf(['lg', 'sm']),\n\n  /**\n   * Empty state subtitle\n   */\n  subtitle: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n\n  /**\n   * Empty state title\n   */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired\n}; // Default values for component props. Default values are not required for\n// props that are required, nor for props where the component can apply\n// 'undefined' values reasonably. Default values should be provided when the\n// component needs to make a choice or assumption when a prop is not supplied.\n\nNotificationsEmptyState.defaultProps = EmptyStateDefaultProps;","map":null,"metadata":{},"sourceType":"module"}