{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"backButtonText\", \"cancelButtonText\", \"children\", \"className\", \"description\", \"includeViewAllToggle\", \"label\", \"nextButtonText\", \"onClose\", \"onRequestSubmit\", \"open\", \"submitButtonText\", \"title\", \"verticalPosition\", \"viewAllToggleLabelText\", \"viewAllToggleOffLabelText\", \"viewAllToggleOnLabelText\"];\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n/**\n * Copyright IBM Corp. 2021, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { forwardRef, useCallback, useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { ProgressIndicator, ProgressStep, Toggle } from 'carbon-components-react';\nimport { SideNav, SideNavItems, SideNavLink } from 'carbon-components-react/lib/components/UIShell';\nimport cx from 'classnames';\nimport wrapFocus from '../../global/js/utils/wrapFocus';\nimport { TearsheetShell } from '../Tearsheet/TearsheetShell';\nimport { pkg } from '../../settings';\nimport { CREATE_TEARSHEET_SECTION, CREATE_TEARSHEET_STEP } from './constants';\nvar componentName = 'CreateTearsheet';\nvar blockClass = \"\".concat(pkg.prefix, \"--tearsheet-create\");\n\nvar usePreviousValue = function usePreviousValue(value) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport var CreateTearsheet = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var backButtonText = _ref.backButtonText,\n      cancelButtonText = _ref.cancelButtonText,\n      children = _ref.children,\n      className = _ref.className,\n      description = _ref.description,\n      includeViewAllToggle = _ref.includeViewAllToggle,\n      label = _ref.label,\n      nextButtonText = _ref.nextButtonText,\n      onClose = _ref.onClose,\n      onRequestSubmit = _ref.onRequestSubmit,\n      open = _ref.open,\n      submitButtonText = _ref.submitButtonText,\n      title = _ref.title,\n      verticalPosition = _ref.verticalPosition,\n      viewAllToggleLabelText = _ref.viewAllToggleLabelText,\n      viewAllToggleOffLabelText = _ref.viewAllToggleOffLabelText,\n      viewAllToggleOnLabelText = _ref.viewAllToggleOnLabelText,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      createTearsheetActions = _useState2[0],\n      setCreateTearsheetActions = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      shouldViewAll = _useState4[0],\n      setShouldViewAll = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentStep = _useState6[0],\n      setCurrentStep = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isSubmitting = _useState8[0],\n      setIsSubmitting = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      activeSectionIndex = _useState10[0],\n      setActiveSectionIndex = _useState10[1];\n\n  var previousState = usePreviousValue({\n    currentStep: currentStep,\n    open: open\n  }); // set current step to 1 upon tearsheet opening, in order\n  // to get the auto focus on the first step.\n\n  useEffect(function () {\n    if (!(previousState !== null && previousState !== void 0 && previousState.open) && open) {\n      setCurrentStep(1);\n    }\n  }, [open, previousState]); // Log a warning to the console in the event a create tearsheet is used with only one step\n\n  useEffect(function () {\n    var createSteps = getTearsheetSteps();\n    var total = createSteps.length;\n\n    if (total === 1) {\n      console.warn(\"\".concat(componentName, \": CreateTearsheets with one step are not permitted. If you require only one step, please use either the narrow tearsheet, CreateSidePanel, or CreateModal components.\"));\n    }\n  }, [getTearsheetSteps]); // useEffect to handle multi step logic\n\n  useEffect(function () {\n    var _getTearsheetSteps;\n\n    var onUnmount = function onUnmount() {\n      setCurrentStep(0);\n      setIsSubmitting(false);\n      setShouldViewAll(false);\n      onClose();\n    };\n\n    var handleOnRequestSubmit = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return onRequestSubmit();\n\n              case 3:\n                onUnmount();\n                _context.next = 10;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n                setIsSubmitting(false);\n                console.warn(\"\".concat(componentName, \" submit error: \").concat(_context.t0));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 6]]);\n      }));\n\n      return function handleOnRequestSubmit() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    var isSubmitDisabled = function isSubmitDisabled() {\n      var step = 0;\n      var submitDisabled = false;\n      var tearsheetSteps = getTearsheetSteps();\n      tearsheetSteps.forEach(function (child) {\n        step++;\n\n        if (currentStep === step) {\n          submitDisabled = child.props.disableSubmit;\n        }\n      });\n      return submitDisabled;\n    };\n\n    var handleNext = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var createSteps;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                setIsSubmitting(true);\n                createSteps = getTearsheetSteps();\n\n                if (!createSteps[currentStep - 1].props.onNext) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                _context2.prev = 3;\n                _context2.next = 6;\n                return createSteps[currentStep - 1].props.onNext();\n\n              case 6:\n                continueToNextStep();\n                _context2.next = 13;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n                setIsSubmitting(false);\n                console.warn(\"\".concat(componentName, \" onNext error: \").concat(_context2.t0));\n\n              case 13:\n                _context2.next = 16;\n                break;\n\n              case 15:\n                continueToNextStep();\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[3, 9]]);\n      }));\n\n      return function handleNext() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    var handleSubmit = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var createSteps;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                setIsSubmitting(true);\n                createSteps = getTearsheetSteps(); // last step should have onNext as well\n\n                if (!createSteps[currentStep - 1].props.onNext) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                _context3.prev = 3;\n                _context3.next = 6;\n                return createSteps[currentStep - 1].props.onNext();\n\n              case 6:\n                _context3.next = 8;\n                return handleOnRequestSubmit();\n\n              case 8:\n                _context3.next = 14;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](3);\n                setIsSubmitting(false);\n                console.warn(\"\".concat(componentName, \" onNext error: \").concat(_context3.t0));\n\n              case 14:\n                _context3.next = 18;\n                break;\n\n              case 16:\n                _context3.next = 18;\n                return handleOnRequestSubmit();\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[3, 10]]);\n      }));\n\n      return function handleSubmit() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    if ((_getTearsheetSteps = getTearsheetSteps()) !== null && _getTearsheetSteps !== void 0 && _getTearsheetSteps.length) {\n      var createSteps = getTearsheetSteps();\n      var total = createSteps.length;\n      var buttons = [];\n\n      if (total > 1 && !shouldViewAll) {\n        buttons.push({\n          label: backButtonText,\n          onClick: function onClick() {\n            return setCurrentStep(function (prev) {\n              return prev - 1;\n            });\n          },\n          kind: 'secondary',\n          disabled: currentStep === 1\n        });\n      }\n\n      buttons.push({\n        label: cancelButtonText,\n        onClick: onUnmount,\n        kind: 'ghost'\n      });\n      buttons.push({\n        label: shouldViewAll ? submitButtonText : currentStep < total ? nextButtonText : submitButtonText,\n        onClick: shouldViewAll ? handleSubmit : currentStep < total ? handleNext : handleSubmit,\n        disabled: isSubmitDisabled(),\n        kind: 'primary',\n        loading: isSubmitting,\n        className: \"\".concat(blockClass, \"__create-button\")\n      });\n      setCreateTearsheetActions(buttons);\n    }\n  }, [getTearsheetSteps, children, backButtonText, cancelButtonText, currentStep, onClose, nextButtonText, submitButtonText, onRequestSubmit, isSubmitting, shouldViewAll]);\n\n  var continueToNextStep = function continueToNextStep() {\n    setIsSubmitting(false);\n    setCurrentStep(function (prev) {\n      return prev + 1;\n    });\n  }; // returns an array of tearsheet steps\n\n\n  var getTearsheetSteps = useCallback(function () {\n    var steps = [];\n    var childrenArray = Array.isArray(children) ? children : [children];\n    childrenArray.forEach(function (child) {\n      if (isTearsheetStep(child)) {\n        steps.push(child);\n      }\n    });\n    return steps;\n  }, [children]); // check if child is a tearsheet step component\n\n  var isTearsheetStep = function isTearsheetStep(child) {\n    if (child && child.props && child.props.type === CREATE_TEARSHEET_STEP) {\n      return true;\n    }\n\n    return false;\n  }; // check if child is a tearsheet section component\n\n\n  var isTearsheetSection = function isTearsheetSection(child) {\n    if (child && child.props && child.props.type === CREATE_TEARSHEET_SECTION) {\n      return true;\n    }\n\n    return false;\n  }; // renders the step progression components in the left influencer area\n\n\n  var renderProgressSteps = function renderProgressSteps(childrenElements) {\n    var childrenArray = Array.isArray(childrenElements) ? childrenElements : [childrenElements];\n    var stepChildren = childrenArray.filter(function (child) {\n      return isTearsheetStep(child);\n    });\n    var sectionChildElements = [];\n    stepChildren.forEach(function (child) {\n      // we have received an array of children, lets check to see that each child is\n      // a CreateTearsheetSection component before adding it to sectionChildElements\n      if (shouldViewAll && child.props.children.length) {\n        child.props.children.forEach(function (stepChild) {\n          if (isTearsheetSection(stepChild)) {\n            sectionChildElements.push(stepChild);\n          }\n        });\n      } // we have received a single child element, lets check to see that it is\n      // a CreateTearsheetSection component before adding it to sectionChildElements\n\n\n      if (shouldViewAll && typeof child.props.children !== 'undefined' && !child.props.children.length) {\n        if (isTearsheetSection(child.props.children)) {\n          sectionChildElements.push(child.props.children);\n        }\n      }\n    });\n\n    if (shouldViewAll) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(blockClass, \"__left-nav\")\n      }, /*#__PURE__*/React.createElement(SideNav, {\n        expanded: true,\n        isFixedNav: true\n      }, /*#__PURE__*/React.createElement(SideNavItems, null, (sectionChildElements === null || sectionChildElements === void 0 ? void 0 : sectionChildElements.length) && sectionChildElements.map(function (sectionChild, sectionIndex) {\n        return /*#__PURE__*/React.createElement(SideNavLink, {\n          href: \"javascript:void(0)\",\n          key: sectionIndex,\n          isActive: activeSectionIndex === sectionIndex,\n          onClick: function onClick() {\n            setActiveSectionIndex(sectionIndex);\n\n            if (sectionChild.props.id) {\n              var scrollTarget = document.querySelector(\"#\".concat(sectionChild.props.id));\n              var scrollContainer = document.querySelector(\".\".concat(pkg.prefix, \"--tearsheet__main\"));\n              scrollContainer.scrollTo({\n                top: scrollTarget.offsetTop,\n                behavior: 'smooth'\n              });\n            } else {\n              console.warn(\"\".concat(componentName, \": CreateTearsheetSection is missing a required prop of 'id'\"));\n            }\n          }\n        }, sectionChild.props.title);\n      }))));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(blockClass, \"__left-nav\")\n    }, /*#__PURE__*/React.createElement(ProgressIndicator, {\n      currentIndex: currentStep - 1,\n      spaceEqually: true,\n      vertical: true,\n      className: \"\".concat(blockClass, \"__progress-indicator\")\n    }, stepChildren.map(function (child, stepIndex) {\n      return /*#__PURE__*/React.createElement(ProgressStep, {\n        label: child.props.title,\n        key: stepIndex\n      });\n    })));\n  }; // renders all children (CreateTearsheetSteps and regular children elements)\n\n\n  var renderChildren = function renderChildren(childrenElements) {\n    var step = 0;\n    var childrenArray = Array.isArray(childrenElements) ? childrenElements : [childrenElements];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, ' ', childrenArray.map(function (child, stepIndex) {\n      var _cx;\n\n      if (!isTearsheetStep(child)) {\n        return child;\n      }\n\n      step++;\n      return /*#__PURE__*/React.cloneElement(child, {\n        className: cx(child.props.className, (_cx = {}, _defineProperty(_cx, \"\".concat(blockClass, \"__step--hidden-step\"), !shouldViewAll && currentStep !== step), _defineProperty(_cx, \"\".concat(blockClass, \"__step--visible-step\"), currentStep === step), _defineProperty(_cx, \"\".concat(blockClass, \"__step--first-panel-step\"), !(previousState !== null && previousState !== void 0 && previousState.open) && open && (previousState === null || previousState === void 0 ? void 0 : previousState.currentStep) === 0 && stepIndex === 0), _cx)),\n        key: \"key_\".concat(stepIndex)\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"\".concat(blockClass, \"__step--heading\")\n      }, renderStepTitle(stepIndex)), renderStepChildren(child.props.children)));\n    }));\n  };\n\n  var renderStepChildren = function renderStepChildren(stepChildren) {\n    var childrenArray = Array.isArray(stepChildren) ? stepChildren : [stepChildren];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, childrenArray.map(function (child, index) {\n      var _cx2;\n\n      if (!isTearsheetSection(child)) {\n        return child;\n      }\n\n      return /*#__PURE__*/React.cloneElement(child, {\n        className: cx(child.props.className, (_cx2 = {}, _defineProperty(_cx2, \"\".concat(blockClass, \"__step--hidden-section\"), child.props.viewAllOnly && !shouldViewAll), _defineProperty(_cx2, \"\".concat(blockClass, \"__step--visible-section\"), !child.props.viewAllOnly || child.props.viewAllOnly && shouldViewAll), _cx2)),\n        key: \"key_\".concat(index)\n      });\n    }));\n  }; // renders the individual step title\n\n\n  var renderStepTitle = function renderStepTitle(stepIndex) {\n    var _tearsheetSteps$stepI;\n\n    var tearsheetSteps = getTearsheetSteps();\n    var stepTitle = tearsheetSteps && ((_tearsheetSteps$stepI = tearsheetSteps[stepIndex]) === null || _tearsheetSteps$stepI === void 0 ? void 0 : _tearsheetSteps$stepI.props.title) || null;\n    return stepTitle;\n  }; // set initial focus when the step changes, if there is not an input to focus\n  // the next/create button receives focus\n\n\n  useEffect(function () {\n    if (open && (previousState === null || previousState === void 0 ? void 0 : previousState.currentStep) !== currentStep && currentStep > 0) {\n      var visibleStepInnerContent = document.querySelector(\".\".concat(blockClass, \"__step.\").concat(blockClass, \"__step--visible-step\"));\n      var tearsheetSteps = getTearsheetSteps();\n      var focusableStepElements = tearsheetSteps && tearsheetSteps.length && getFocusableElements(visibleStepInnerContent);\n\n      if (focusableStepElements && focusableStepElements.length) {\n        focusableStepElements[0].focus();\n      } else {\n        var nextButton = document.querySelector(\".\".concat(blockClass, \"__create-button\"));\n        nextButton === null || nextButton === void 0 ? void 0 : nextButton.focus();\n      }\n    }\n  }, [open, currentStep, getTearsheetSteps, previousState]); // returns an array of focusable elements, for use in auto focusing the first input on a step\n\n  var getFocusableElements = function getFocusableElements(element) {\n    return _toConsumableArray(element.querySelectorAll('a, button, input, textarea, select, details,[tabindex]:not([tabindex=\"-1\"])')).filter(function (e) {\n      return !e.hasAttribute('disabled');\n    });\n  }; // adds focus trap functionality\n\n  /* istanbul ignore next */\n\n\n  var handleBlur = function handleBlur(_ref5) {\n    var oldActiveNode = _ref5.target,\n        currentActiveNode = _ref5.relatedTarget;\n    var visibleStepInnerContent = document.querySelector(\".\".concat(pkg.prefix, \"--tearsheet__body\"));\n    var visibleStepStartMarker;\n    var visibleStepEndMarker;\n\n    if (open && visibleStepInnerContent) {\n      wrapFocus({\n        bodyNode: visibleStepInnerContent,\n        visibleStepStartMarker: visibleStepStartMarker,\n        visibleStepEndMarker: visibleStepEndMarker,\n        currentActiveNode: currentActiveNode,\n        oldActiveNode: oldActiveNode\n      });\n    }\n  };\n\n  var handleViewAllToggle = function handleViewAllToggle(toggleState) {\n    setShouldViewAll(toggleState);\n    setActiveSectionIndex(0); // scroll to top of tearsheet page upon toggling view all option\n\n    if (toggleState) {\n      var createTearsheetContainer = document.querySelector(\".\".concat(blockClass));\n      createTearsheetContainer.scrollTop = 0;\n    }\n  };\n\n  var renderViewAllToggle = function renderViewAllToggle() {\n    return /*#__PURE__*/React.createElement(Toggle, {\n      id: \"\".concat(blockClass, \"__view-all-toggle\"),\n      toggled: shouldViewAll,\n      labelText: viewAllToggleLabelText,\n      labelA: viewAllToggleOffLabelText,\n      labelB: viewAllToggleOnLabelText,\n      onToggle: function onToggle(value) {\n        return handleViewAllToggle(value);\n      },\n      className: \"\".concat(blockClass, \"__view-all-toggle\")\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(TearsheetShell, _extends({}, rest, {\n    actions: createTearsheetActions,\n    className: cx(blockClass, className),\n    closeIconDescription: 'Close icon',\n    description: description,\n    hasCloseIcon: false,\n    influencer: /*#__PURE__*/React.createElement(React.Fragment, null, renderProgressSteps(children), includeViewAllToggle && renderViewAllToggle()),\n    influencerPosition: \"left\",\n    influencerWidth: \"narrow\",\n    label: label,\n    onClose: onClose,\n    open: open,\n    size: \"wide\",\n    title: title,\n    verticalPosition: verticalPosition,\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__multi-step-panel-content\"),\n    onBlur: handleBlur\n  }, renderChildren(children)));\n}); // Return a placeholder if not released and not enabled by feature flag\n\nCreateTearsheet = pkg.checkComponentEnabled(CreateTearsheet, componentName); // The display name of the component, used by React. Note that displayName\n// is used in preference to relying on function.name.\n\nCreateTearsheet.displayName = componentName; // Note that the descriptions here should be kept in sync with those for the\n// corresponding props for TearsheetNarrow and TearsheetShell components.\n\nCreateTearsheet.propTypes = {\n  /**\n   * The back button text\n   */\n  backButtonText: PropTypes.string.isRequired,\n\n  /**\n   * The cancel button text\n   */\n  cancelButtonText: PropTypes.string.isRequired,\n\n  /**\n   * The main content of the tearsheet\n   */\n  children: PropTypes.node,\n\n  /**\n   * An optional class or classes to be added to the outermost element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * A description of the flow, displayed in the header area of the tearsheet.\n   */\n  description: PropTypes.node,\n\n  /**\n   * Used to optionally include view all toggle\n   */\n  includeViewAllToggle: PropTypes.bool,\n\n  /**\n   * A label for the tearsheet, displayed in the header area of the tearsheet\n   * to maintain context for the tearsheet (e.g. as the title changes from page\n   * to page of a multi-page task).\n   */\n  label: PropTypes.node,\n\n  /**\n   * The next button text\n   */\n  nextButtonText: PropTypes.string.isRequired,\n\n  /**\n   * An optional handler that is called when the user closes the tearsheet (by\n   * clicking the close button, if enabled, or clicking outside, if enabled).\n   * Returning `false` here prevents the modal from closing.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Specify a handler for submitting the multi step tearsheet (final step).\n   * This function can _optionally_ return a promise that is either resolved or rejected and the CreateTearsheet will handle the submitting state of the create button.\n   */\n  onRequestSubmit: PropTypes.func.isRequired,\n\n  /**\n   * Specifies whether the tearsheet is currently open.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The submit button text\n   */\n  submitButtonText: PropTypes.string.isRequired,\n\n  /**\n   * The main title of the tearsheet, displayed in the header area.\n   */\n  title: PropTypes.node,\n\n  /**\n   * The position of the top of tearsheet in the viewport. The 'normal'\n   * position (the default) is a short distance down from the top of the\n   * viewport, leaving room at the top for a global header bar to show through\n   * from below. The 'lower' position provides a little extra room at the top\n   * to allow an action bar navigation or breadcrumbs to also show through.\n   */\n  verticalPosition: PropTypes.oneOf(['normal', 'lower']),\n\n  /**\n   * Sets the label text for the view all toggle component\n   */\n  viewAllToggleLabelText: PropTypes.string,\n\n  /**\n   * Sets the label text for the view all toggle `off` text\n   */\n  viewAllToggleOffLabelText: PropTypes.string,\n\n  /**\n   * Sets the label text for the view all toggle `on` text\n   */\n  viewAllToggleOnLabelText: PropTypes.string\n}; // Default values for component props. Default values are not required for\n// props that are required, nor for props where the component can apply\n// 'undefined' values reasonably. Default values should be provided when the\n// component needs to make a choice or assumption when a prop is not supplied.\n\nCreateTearsheet.defaultProps = {\n  verticalPosition: 'normal'\n};","map":null,"metadata":{},"sourceType":"module"}