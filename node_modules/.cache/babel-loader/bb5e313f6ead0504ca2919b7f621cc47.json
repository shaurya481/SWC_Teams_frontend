{"ast":null,"code":"var _defaultTranslations;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ChevronDown16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\nexport var translationIds = {\n  'close.menu': 'close.menu',\n  'open.menu': 'open.menu'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['close.menu'], 'Close'), _defineProperty(_defaultTranslations, translationIds['open.menu'], 'Open'), _defaultTranslations);\n/**\n * `ListBoxTrigger` is used to orient the icon up or down depending on the\n * state of the menu for a given `ListBox`\n */\n\nvar ListBoxTrigger = function ListBoxTrigger(_ref) {\n  var _cx;\n\n  var isOpen = _ref.isOpen,\n      t = _ref.translateWithId,\n      rest = _objectWithoutProperties(_ref, [\"isOpen\", \"translateWithId\"]);\n\n  var className = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--list-box__menu-icon\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__menu-icon--open\"), isOpen), _cx));\n  var description = isOpen ? t('close.menu') : t('open.menu');\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, rest, {\n    \"aria-label\": description,\n    title: description,\n    className: className,\n    type: \"button\",\n    tabIndex: \"-1\"\n  }), /*#__PURE__*/React.createElement(ChevronDown16, null));\n};\n\nListBoxTrigger.propTypes = {\n  /**\n   * Specify whether the menu is currently open, which will influence the\n   * direction of the menu icon\n   */\n  isOpen: PropTypes.bool.isRequired,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxTrigger.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxTrigger;","map":null,"metadata":{},"sourceType":"module"}