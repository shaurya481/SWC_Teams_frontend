{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport React from 'react';\n/**\n * unwrapIfFragment - walks the passed children unwrapping fragments\n * to create a flat array of all children\n */\n\nvar unwrapIfFragment = function unwrapIfFragment(children) {\n  // When passed one of the following\n  // - A fragment with zero or more children *1\n  // - An array with zero or more children *1\n  // - A single node\n  // *1 -  The children of the above can be any of the above\n  // Outputs - A flat array of child nodes\n  var newChildArray = [];\n\n  var isFragment = function isFragment(item) {\n    return item && item.type === React.Fragment;\n  };\n\n  var addChildren = function addChildren(children) {\n    var loopOver = function loopOver(children) {\n      // children may be a single item\n      var _children = Array.isArray(children) ? children : [children];\n\n      var _iterator = _createForOfIteratorHelper(_children),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          addChildren(child);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }; // children is nothing, one fragment, array with one or more children, or a single item\n\n\n    if (!children) {\n      return;\n    }\n\n    if (isFragment(children)) {\n      loopOver(children.props.children);\n    } else {\n      if (Array.isArray(children)) {\n        loopOver(children);\n      } else {\n        newChildArray.push(children);\n      }\n    }\n  }; // nothing, one fragment, array with one or more children, or a single item\n\n\n  addChildren(children);\n  return newChildArray;\n};\n\nexport default unwrapIfFragment;","map":null,"metadata":{},"sourceType":"module"}