{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\n * Copyright IBM Corp. 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkmark16 } from '@carbon/icons-react';\nimport MenuOption from './MenuOption';\n\nfunction MenuRadioGroupOptions(_ref) {\n  var items = _ref.items,\n      initialSelectedItem = _ref.initialSelectedItem,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange;\n\n  var _useState = useState(initialSelectedItem),\n      _useState2 = _slicedToArray(_useState, 2),\n      selected = _useState2[0],\n      setSelected = _useState2[1];\n\n  function handleClick(option) {\n    setSelected(option);\n    onChange(option);\n  }\n\n  var options = items.map(function (option, i) {\n    var isSelected = selected === option;\n    return /*#__PURE__*/React.createElement(MenuOption, {\n      key: i,\n      role: \"menuitemradio\",\n      \"aria-checked\": isSelected,\n      renderIcon: isSelected ? Checkmark16 : null,\n      label: option,\n      indented: true,\n      onClick: function onClick() {\n        handleClick(option);\n      }\n    });\n  });\n  return options;\n}\n\nMenuRadioGroupOptions.propTypes = {\n  /**\n   * Whether the option should be checked by default\n   */\n  initialSelectedItem: PropTypes.string,\n\n  /**\n   * Array of the radio options\n   */\n  items: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n  /**\n   * Callback function when selection the has been changed\n   */\n  onChange: PropTypes.func\n};\nexport default MenuRadioGroupOptions;","map":null,"metadata":{},"sourceType":"module"}