{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React, { useRef } from 'react';\nimport uid from '../../tools/uniqueId';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nimport { CheckmarkFilled16 as CheckmarkFilled } from '@carbon/icons-react';\nimport { keys, matches } from '../../internal/keyboard';\nimport deprecate from '../../prop-types/deprecate';\nvar prefix = settings.prefix;\n\nfunction RadioTile(_ref) {\n  var _classNames;\n\n  var children = _ref.children,\n      className = _ref.className,\n      disabled = _ref.disabled,\n      iconDescription = _ref.iconDescription,\n      light = _ref.light,\n      checked = _ref.checked,\n      name = _ref.name,\n      value = _ref.value,\n      id = _ref.id,\n      onChange = _ref.onChange,\n      tabIndex = _ref.tabIndex,\n      other = _objectWithoutProperties(_ref, [\"children\", \"className\", \"disabled\", \"iconDescription\", \"light\", \"checked\", \"name\", \"value\", \"id\", \"onChange\", \"tabIndex\"]);\n\n  var _useRef = useRef(id || uid()),\n      inputId = _useRef.current;\n\n  var classes = classNames(className, \"\".concat(prefix, \"--tile\"), \"\".concat(prefix, \"--tile--selectable\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--tile--is-selected\"), checked), _defineProperty(_classNames, \"\".concat(prefix, \"--tile--light\"), light), _defineProperty(_classNames, \"\".concat(prefix, \"--tile--disabled\"), disabled), _classNames));\n\n  function handleOnChange(evt) {\n    onChange(value, name, evt);\n  }\n\n  function handleOnKeyDown(evt) {\n    if (matches(evt, [keys.Enter, keys.Space])) {\n      evt.preventDefault();\n      onChange(value, name, evt);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", _extends({}, other, {\n    type: \"radio\",\n    checked: checked,\n    disabled: disabled,\n    name: name,\n    value: value,\n    className: \"\".concat(prefix, \"--tile-input\"),\n    tabIndex: !disabled ? tabIndex : null,\n    onChange: !disabled ? handleOnChange : null,\n    onKeyDown: !disabled ? handleOnKeyDown : null,\n    id: inputId\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: inputId,\n    className: classes\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--tile__checkmark\")\n  }, /*#__PURE__*/React.createElement(CheckmarkFilled, null)), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--tile-content\")\n  }, children)));\n}\n\nRadioTile.propTypes = {\n  /**\n   * `true` if this tile should be selected.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The tile content.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The CSS class names.\n   */\n  className: PropTypes.string,\n\n  /**\n   * `true` if the `<input>` should be checked at initialization.\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * Specify whether the RadioTile should be disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The description of the tile checkmark icon.\n   */\n  iconDescription: deprecate(PropTypes.string, 'The `iconDescription` prop for `RadioTile` is no longer needed and has ' + 'been deprecated. It will be moved in the next major release.'),\n\n  /**\n   * The ID of the `<input>`.\n   */\n  id: PropTypes.string,\n\n  /**\n   * `true` to use the light version.\n   */\n  light: PropTypes.bool,\n\n  /**\n   * The `name` of the `<input>`.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The handler of the massaged `change` event on the `<input>`.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Specify the tab index of the wrapper element\n   */\n  tabIndex: PropTypes.number,\n\n  /**\n   * The `value` of the `<input>`.\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired\n};\nRadioTile.defaultProps = {\n  onChange: function onChange() {},\n  tabIndex: 0,\n  light: false\n};\nexport default RadioTile;","map":null,"metadata":{},"sourceType":"module"}