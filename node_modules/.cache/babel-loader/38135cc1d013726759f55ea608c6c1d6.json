{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"actions\", \"children\", \"className\", \"closeIconDescription\", \"description\", \"hasCloseIcon\", \"headerActions\", \"influencer\", \"influencerPosition\", \"influencerWidth\", \"label\", \"navigation\", \"onClose\", \"open\", \"size\", \"title\", \"verticalPosition\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2020, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\n\nimport React, { useEffect, useLayoutEffect, useState, useRef } from 'react';\nimport { useResizeDetector } from 'react-resize-detector'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pkg, carbon } from '../../settings';\nimport { deprecateProp } from '../../global/js/utils/props-helper';\nimport pconsole from '../../global/js/utils/pconsole'; // Carbon and package components we use.\n\nimport { Button, ComposedModal, ModalHeader, ModalBody } from 'carbon-components-react';\nimport { ActionSet } from '../ActionSet';\nimport { Wrap } from '../../global/js/utils/Wrap'; // The block part of our conventional BEM class names (bc__E--M).\n\nvar bc = \"\".concat(pkg.prefix, \"--tearsheet\");\nvar bcModalHeader = \"\".concat(carbon.prefix, \"--modal-header\");\nvar componentName = 'TearsheetShell';\nvar maxDepth = 3; // NOTE: the component SCSS is not imported here: it is rolled up separately.\n// Global data structure to communicate the state of tearsheet stacking\n// (i.e. when more than one tearsheet is open). Each tearsheet supplies a\n// handler to be called whenever the stacking of the tearsheets changes, which\n// happens when a tearsheet opens or closes. The 'open' array contains one\n// handler per OPEN tearsheet ordered from lowest to highest in visual z-order.\n// The 'all' array contains all the handlers for open and closed tearsheets.\n\nvar stack = {\n  open: [],\n  all: []\n}; // these props are only applicable when size='wide'\n\nexport var tearsheetShellWideProps = ['headerActions', 'influencer', 'influencerPosition', 'influencerWidth', 'navigation'];\nexport var tearsheetIsPassive = function tearsheetIsPassive(actions) {\n  return !actions || !(actions !== null && actions !== void 0 && actions.length);\n};\nexport var tearsheetHasCloseIcon = function tearsheetHasCloseIcon(actions, hasCloseIcon) {\n  return hasCloseIcon !== null && hasCloseIcon !== void 0 ? hasCloseIcon : tearsheetIsPassive(actions);\n}; // TearSheetShell is used internally by TearSheet and TearSheetNarrow\n\nexport var TearsheetShell = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var actions = _ref.actions,\n      children = _ref.children,\n      className = _ref.className,\n      closeIconDescription = _ref.closeIconDescription,\n      description = _ref.description,\n      hasCloseIcon = _ref.hasCloseIcon,\n      headerActions = _ref.headerActions,\n      influencer = _ref.influencer,\n      influencerPosition = _ref.influencerPosition,\n      influencerWidth = _ref.influencerWidth,\n      label = _ref.label,\n      navigation = _ref.navigation,\n      onClose = _ref.onClose,\n      open = _ref.open,\n      size = _ref.size,\n      title = _ref.title,\n      verticalPosition = _ref.verticalPosition,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useResizeDetector = useResizeDetector({\n    handleHeight: false\n  }),\n      width = _useResizeDetector.width,\n      resizer = _useResizeDetector.ref; // Keep track of the stack depth and our position in it (1-based, 0=closed)\n\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      depth = _useState2[0],\n      setDepth = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      position = _useState4[0],\n      setPosition = _useState4[1]; // Keep a record of the previous value of depth.\n\n\n  var prevDepth = useRef();\n  useEffect(function () {\n    prevDepth.current = depth;\n  }); // A \"passive\" tearsheet is one with no navigation actions.\n\n  var isPassive = tearsheetIsPassive(actions);\n  var effectiveHasCloseIcon = tearsheetHasCloseIcon(actions, hasCloseIcon); // Callback that will be called whenever the stacking order changes.\n  // position is 1-based with 0 indicating closed.\n\n  function handleStackChange(newDepth, newPosition) {\n    setDepth(newDepth);\n    setPosition(newPosition);\n  } // Hook called whenever the tearsheet mounts, unmounts, or 'open' changes.\n\n\n  useLayoutEffect(function () {\n    var notify = function notify() {\n      return stack.all.forEach(function (handler) {\n        return handler(Math.min(stack.open.length, maxDepth), stack.open.indexOf(handler) + 1);\n      });\n    }; // Register this tearsheet's stack change callback/listener.\n\n\n    stack.all.push(handleStackChange); // If the tearsheet is mounting with open=true or open is changing from\n    // false to true to open it then append its notification callback to\n    // the end of the stack array (as its ID), and call all the callbacks\n    // to notify all open tearsheets that the stacking has changed.\n\n    if (open) {\n      stack.open.push(handleStackChange);\n      notify();\n    } // Cleanup function called whenever the tearsheet unmounts or the open\n    // prop changes value (in which case it is called prior to this hook\n    // being called again).\n\n\n    return function cleanup() {\n      // Remove the notification callback from the all handlers array.\n      stack.all.splice(stack.all.indexOf(handleStackChange), 1); // Remove the notification callback from the open handlers array, if\n      // it's there, and notify all open tearsheets that the stacking has\n      // changed (only necessary if this tearsheet was open).\n\n      var openIndex = stack.open.indexOf(handleStackChange);\n\n      if (openIndex >= 0) {\n        stack.open.splice(openIndex, 1);\n        notify();\n      }\n    };\n  }, [open]);\n\n  if (position <= depth) {\n    var _cx, _ref2, _cx3, _cx5, _cx6; // Include a modal header if and only if one or more of these is given.\n    // We can't use a Wrap for the ModalHeader because ComposedModal requires\n    // the direct child to be the ModalHeader instance.\n\n\n    var includeHeader = label || title || description || headerActions || navigation || effectiveHasCloseIcon; // Include an ActionSet if and only if one or more actions is given.\n\n    var includeActions = actions && (actions === null || actions === void 0 ? void 0 : actions.length) > 0;\n    return /*#__PURE__*/React.createElement(ComposedModal, _extends({}, // Pass through any other property values.\n    rest, {\n      \"aria-label\": title,\n      className: cx(bc, className, (_cx = {}, _defineProperty(_cx, \"\".concat(bc, \"--stacked-\").concat(position, \"-of-\").concat(depth), // Don't apply this on the initial open of a single tearsheet.\n      depth > 1 || depth === 1 && prevDepth.current > 1), _defineProperty(_cx, \"\".concat(bc, \"--wide\"), size === 'wide'), _defineProperty(_cx, \"\".concat(bc, \"--narrow\"), size !== 'wide'), _cx)),\n      style: (_ref2 = {}, _defineProperty(_ref2, \"--\".concat(bc, \"--stacking-scale-factor-single\"), (width - 32) / width), _defineProperty(_ref2, \"--\".concat(bc, \"--stacking-scale-factor-double\"), (width - 64) / width), _ref2),\n      containerClassName: cx(\"\".concat(bc, \"__container\"), _defineProperty({}, \"\".concat(bc, \"__container--lower\"), verticalPosition === 'lower')),\n      onClose: onClose,\n      open: open,\n      ref: ref,\n      preventCloseOnClickOutside: !isPassive,\n      size: \"sm\"\n    }), includeHeader && /*#__PURE__*/React.createElement(ModalHeader, {\n      className: cx(\"\".concat(bc, \"__header\"), (_cx3 = {}, _defineProperty(_cx3, \"\".concat(bc, \"__header--with-close-icon\"), effectiveHasCloseIcon), _defineProperty(_cx3, \"\".concat(bc, \"__header--with-nav\"), navigation), _cx3)),\n      closeClassName: cx(_defineProperty({}, \"\".concat(bc, \"__header--no-close-icon\"), !effectiveHasCloseIcon)),\n      iconDescription: closeIconDescription\n    }, /*#__PURE__*/React.createElement(Wrap, {\n      className: \"\".concat(bc, \"__header-content\")\n    }, /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(Wrap, {\n      element: \"h2\",\n      className: \"\".concat(bcModalHeader, \"__label\")\n    }, label), /*#__PURE__*/React.createElement(Wrap, {\n      element: \"h3\",\n      className: \"\".concat(bcModalHeader, \"__heading\")\n    }, title), /*#__PURE__*/React.createElement(Wrap, {\n      className: \"\".concat(bc, \"__header-description\")\n    }, description)), /*#__PURE__*/React.createElement(Wrap, {\n      className: \"\".concat(bc, \"__header-actions\")\n    }, headerActions)), /*#__PURE__*/React.createElement(Wrap, {\n      className: \"\".concat(bc, \"__header-navigation\")\n    }, navigation)), /*#__PURE__*/React.createElement(Wrap, {\n      element: ModalBody,\n      className: \"\".concat(bc, \"__body\")\n    }, /*#__PURE__*/React.createElement(Wrap, {\n      className: cx((_cx5 = {}, _defineProperty(_cx5, \"\".concat(bc, \"__influencer\"), true), _defineProperty(_cx5, \"\".concat(bc, \"__influencer--wide\"), influencerWidth === 'wide'), _cx5)),\n      neverRender: influencerPosition === 'right'\n    }, influencer), /*#__PURE__*/React.createElement(Wrap, {\n      className: \"\".concat(bc, \"__right\")\n    }, /*#__PURE__*/React.createElement(Wrap, {\n      alwaysRender: includeActions,\n      className: \"\".concat(bc, \"__main\")\n    }, /*#__PURE__*/React.createElement(Wrap, {\n      alwaysRender: influencer && influencerPosition === 'right',\n      className: \"\".concat(bc, \"__content\")\n    }, children), /*#__PURE__*/React.createElement(Wrap, {\n      className: cx((_cx6 = {}, _defineProperty(_cx6, \"\".concat(bc, \"__influencer\"), true), _defineProperty(_cx6, \"\".concat(bc, \"__influencer--wide\"), influencerWidth === 'wide'), _cx6)),\n      neverRender: influencerPosition !== 'right'\n    }, influencer)), includeActions && /*#__PURE__*/React.createElement(Wrap, {\n      className: \"\".concat(bc, \"__button-container\")\n    }, /*#__PURE__*/React.createElement(ActionSet, {\n      actions: actions,\n      buttonSize: size === 'wide' ? 'xl' : null,\n      className: \"\".concat(bc, \"__buttons\"),\n      size: size === 'wide' ? 'max' : 'lg'\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(bc, \"__resize-detector\"),\n      ref: resizer\n    }));\n  } else {\n    pconsole.warn('Tearsheet not rendered: maximum stacking depth exceeded.');\n    return null;\n  }\n}); // The display name of the component, used by React. Note that displayName\n// is used in preference to relying on function.name.\n\nTearsheetShell.displayName = componentName; // The types and DocGen commentary for the component props,\n// in alphabetical order (for consistency).\n// See https://www.npmjs.com/package/prop-types#usage.\n// Note that the descriptions here should be kept in sync with those for the\n// corresponding props for Tearsheet and TearsheetNarrow components.\n\nTearsheetShell.propTypes = {\n  /**\n   * The actions to be shown as buttons in the action area at the bottom of the\n   * tearsheet. Each action is specified as an object with optional fields\n   * 'label' to supply the button label, 'kind' to select the button kind (must\n   * be 'primary', 'secondary' or 'ghost'), 'loading' to display a loading\n   * indicator, and 'onClick' to receive notifications when the button is\n   * clicked. Additional fields in the object will be passed to the Button\n   * component, and these can include 'disabled', 'ref', 'className', and any\n   * other Button props. Any other fields in the object will be passed through\n   * to the button element as HTML attributes.\n   *\n   * See https://react.carbondesignsystem.com/?path=/docs/components-button--default#component-api\n   */\n  actions: PropTypes.arrayOf( // NB we don't include the validator here, as the component wrapping this\n  // one should ensure appropriate validation is done.\n  PropTypes.shape(_objectSpread(_objectSpread({}, Button.propTypes), {}, {\n    kind: PropTypes.oneOf(['ghost', 'secondary', 'primary']),\n    label: PropTypes.string,\n    loading: PropTypes.bool,\n    // we duplicate this Button prop to improve the DocGen here\n    onClick: Button.propTypes.onClick\n  }))),\n\n  /**\n   * The main content of the tearsheet.\n   */\n  children: PropTypes.node,\n\n  /**\n   * An optional class or classes to be added to the outermost element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The accessibility title for the close icon (if shown).\n   *\n   * **Note:** This prop is only required if a close icon is shown, i.e. if\n   * there are a no navigation actions and/or hasCloseIcon is true.\n   */\n  closeIconDescription: PropTypes.string.isRequired.if(function (_ref3) {\n    var actions = _ref3.actions,\n        hasCloseIcon = _ref3.hasCloseIcon;\n    return tearsheetHasCloseIcon(actions, hasCloseIcon);\n  }),\n\n  /**\n   * A description of the flow, displayed in the header area of the tearsheet.\n   */\n  description: PropTypes.node,\n\n  /**\n   * Enable a close icon ('x') in the header area of the tearsheet. By default,\n   * (when this prop is omitted, or undefined or null) a tearsheet does not\n   * display a close icon if there are navigation actions (\"transactional\n   * tearsheet\") and displays one if there are no navigation actions (\"passive\n   * tearsheet\"), and that behavior can be overridden if required by setting\n   * this prop to either true or false.\n   */\n  hasCloseIcon: PropTypes.bool,\n\n  /**\n   * The content for the header actions area, displayed alongside the title in\n   * the header area of the tearsheet. This is typically a drop-down, or a set\n   * of small buttons, or similar. NB the headerActions is only applicable for\n   * wide tearsheets.\n   */\n  headerActions: PropTypes.element,\n\n  /**\n   * The content for the influencer section of the tearsheet, displayed\n   * alongside the main content. This is typically a menu, or filter, or\n   * progress indicator, or similar. NB the influencer is only applicable for\n   * wide tearsheets.\n   */\n  influencer: PropTypes.element,\n\n  /**\n   * The position of the influencer section, 'left' or 'right'.\n   */\n  influencerPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * The width of the influencer: 'narrow' (the default) is 256px, and 'wide'\n   * is 320px.\n   */\n  influencerWidth: PropTypes.oneOf(['narrow', 'wide']),\n\n  /**\n   * A label for the tearsheet, displayed in the header area of the tearsheet\n   * to maintain context for the tearsheet (e.g. as the title changes from page\n   * to page of a multi-page task).\n   */\n  label: PropTypes.node,\n\n  /**\n   * Navigation content, such as a set of tabs, to be displayed at the bottom\n   * of the header area of the tearsheet. NB the navigation is only applicable\n   * for wide tearsheets.\n   */\n  navigation: PropTypes.element,\n\n  /**\n   * An optional handler that is called when the user closes the tearsheet (by\n   * clicking the close button, if enabled, or clicking outside, if enabled).\n   * Returning `false` here prevents the modal from closing.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Specifies whether the tearsheet is currently open.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Prevent the tearsheet from automatically closing (triggering onClose, if\n   * provided, which can be cancelled by returning 'false') if the user clicks\n   * outside it.\n   */\n  preventCloseOnClickOutside: deprecateProp(PropTypes.bool, 'The tearsheet will close automatically if the user clicks outside it if and only if the tearsheet is passive (no navigation actions)'),\n\n  /**\n   * Specifies the width of the tearsheet, 'narrow' or 'wide'.\n   */\n  size: PropTypes.oneOf(['narrow', 'wide']).isRequired,\n\n  /**\n   * The main title of the tearsheet, displayed in the header area.\n   */\n  title: PropTypes.node,\n\n  /**\n   * The position of the top of tearsheet in the viewport. The 'normal'\n   * position (the default) is a short distance down from the top of the\n   * viewport, leaving room at the top for a global header bar to show through\n   * from below. The 'lower' position provides a little extra room at the top\n   * to allow an action bar navigation or breadcrumbs to also show through.\n   */\n  verticalPosition: PropTypes.oneOf(['normal', 'lower'])\n};","map":null,"metadata":{},"sourceType":"module"}