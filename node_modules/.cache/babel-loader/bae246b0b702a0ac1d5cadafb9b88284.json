{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useRef } from 'react';\nimport Filename from './Filename';\nimport { keys, matches } from '../../internal/keyboard';\nimport uid from '../../tools/uniqueId';\nvar prefix = settings.prefix;\n\nfunction FileUploaderItem(_ref) {\n  var _cx;\n\n  var uuid = _ref.uuid,\n      name = _ref.name,\n      status = _ref.status,\n      iconDescription = _ref.iconDescription,\n      onDelete = _ref.onDelete,\n      invalid = _ref.invalid,\n      errorSubject = _ref.errorSubject,\n      errorBody = _ref.errorBody,\n      size = _ref.size,\n      other = _objectWithoutProperties(_ref, [\"uuid\", \"name\", \"status\", \"iconDescription\", \"onDelete\", \"invalid\", \"errorSubject\", \"errorBody\", \"size\"]);\n\n  var _useRef = useRef(uuid || uid()),\n      id = _useRef.current;\n\n  var classes = cx(\"\".concat(prefix, \"--file__selected-file\"), (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--file__selected-file--invalid\"), invalid), _defineProperty(_cx, \"\".concat(prefix, \"--file__selected-file--md\"), size === 'field' || size === 'md'), _defineProperty(_cx, \"\".concat(prefix, \"--file__selected-file--sm\"), size === 'small' || size === 'sm'), _cx));\n  return /*#__PURE__*/React.createElement(\"span\", _extends({\n    className: classes\n  }, other), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(prefix, \"--file-filename\"),\n    title: name\n  }, name), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--file__state-container\")\n  }, /*#__PURE__*/React.createElement(Filename, {\n    iconDescription: iconDescription,\n    status: status,\n    invalid: invalid,\n    onKeyDown: function onKeyDown(evt) {\n      if (matches(evt, [keys.Enter, keys.Space])) {\n        if (status === 'edit') {\n          onDelete(evt, {\n            uuid: id\n          });\n        }\n      }\n    },\n    onClick: function onClick(evt) {\n      if (status === 'edit') {\n        onDelete(evt, {\n          uuid: id\n        });\n      }\n    }\n  })), invalid && errorSubject && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--form-requirement\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--form-requirement__title\")\n  }, errorSubject), errorBody && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(prefix, \"--form-requirement__supplement\")\n  }, errorBody)));\n}\n\nFileUploaderItem.propTypes = {\n  /**\n   * Error message body for an invalid file upload\n   */\n  errorBody: PropTypes.string,\n\n  /**\n   * Error message subject for an invalid file upload\n   */\n  errorSubject: PropTypes.string,\n\n  /**\n   * Description of status icon (displayed in native tooltip)\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify if the currently uploaded file is invalid\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Name of the uploaded file\n   */\n  name: PropTypes.string,\n\n  /**\n   * Event handler that is called after removing a file from the file uploader\n   * The event handler signature looks like `onDelete(evt, { uuid })`\n   */\n  onDelete: PropTypes.func,\n\n  /**\n   * Specify the size of the uploaded items, from a list of available\n   * sizes. For `default` buttons, this prop can remain unspecified.\n   * V11: `default`, `field`, and `small` will be removed\n   */\n  size: PropTypes.oneOf(['default', 'field', 'small', 'sm', 'md', 'lg']),\n\n  /**\n   * Status of the file upload\n   */\n  status: PropTypes.oneOf(['uploading', 'edit', 'complete']),\n\n  /**\n   * Unique identifier for the file object\n   */\n  uuid: PropTypes.string\n};\nFileUploaderItem.defaultProps = {\n  status: 'uploading',\n  onDelete: function onDelete() {}\n};\nexport default FileUploaderItem;","map":null,"metadata":{},"sourceType":"module"}