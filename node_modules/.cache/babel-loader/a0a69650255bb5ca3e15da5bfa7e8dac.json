{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport { settings } from 'carbon-components';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Filename from './Filename';\nimport FileUploaderButton from './FileUploaderButton';\nimport { ButtonKinds } from '../../prop-types/types';\nimport { keys, matches } from '../../internal/keyboard';\nvar prefix = settings.prefix;\n\nvar FileUploader = /*#__PURE__*/function (_React$Component) {\n  _inherits(FileUploader, _React$Component);\n\n  var _super = _createSuper(FileUploader);\n\n  function FileUploader() {\n    var _this;\n\n    _classCallCheck(this, FileUploader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      filenames: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"nodes\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (evt) {\n      evt.stopPropagation();\n      var filenames = Array.prototype.map.call(evt.target.files, function (file) {\n        return file.name;\n      });\n\n      _this.setState({\n        filenames: _this.props.multiple ? _this.state.filenames.concat(filenames) : filenames\n      });\n\n      if (_this.props.onChange) {\n        _this.props.onChange(evt);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (evt, _ref) {\n      var index = _ref.index,\n          filenameStatus = _ref.filenameStatus;\n\n      if (filenameStatus === 'edit') {\n        evt.stopPropagation();\n\n        var filteredArray = _this.state.filenames.filter(function (filename) {\n          return filename !== _this.nodes[index].innerText.trim();\n        });\n\n        _this.setState({\n          filenames: filteredArray\n        });\n\n        if (_this.props.onDelete) {\n          _this.props.onDelete(evt);\n        }\n\n        _this.props.onClick(evt);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearFiles\", function () {\n      // A clearFiles function that resets filenames and can be referenced using a ref by the parent.\n      _this.setState({\n        filenames: []\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(FileUploader, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames,\n          _classNames2,\n          _this2 = this;\n\n      var _this$props = this.props,\n          iconDescription = _this$props.iconDescription,\n          buttonLabel = _this$props.buttonLabel,\n          buttonKind = _this$props.buttonKind,\n          filenameStatus = _this$props.filenameStatus,\n          labelDescription = _this$props.labelDescription,\n          labelTitle = _this$props.labelTitle,\n          className = _this$props.className,\n          multiple = _this$props.multiple,\n          accept = _this$props.accept,\n          name = _this$props.name,\n          size = _this$props.size,\n          onDelete = _this$props.onDelete,\n          other = _objectWithoutProperties(_this$props, [\"iconDescription\", \"buttonLabel\", \"buttonKind\", \"filenameStatus\", \"labelDescription\", \"labelTitle\", \"className\", \"multiple\", \"accept\", \"name\", \"size\", \"onDelete\"]);\n\n      var classes = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--form-item\"), true), _defineProperty(_classNames, className, className), _classNames));\n      var selectedFileClasses = classNames(\"\".concat(prefix, \"--file__selected-file\"), (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefix, \"--file__selected-file--md\"), size === 'field' || size === 'md'), _defineProperty(_classNames2, \"\".concat(prefix, \"--file__selected-file--sm\"), size === 'small' || size === 'sm'), _classNames2));\n      return /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: classes\n      }, other), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"\".concat(prefix, \"--file--label\")\n      }, labelTitle), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"\".concat(prefix, \"--label-description\")\n      }, labelDescription), /*#__PURE__*/React.createElement(FileUploaderButton, {\n        labelText: buttonLabel,\n        multiple: multiple,\n        buttonKind: buttonKind,\n        onChange: this.handleChange,\n        disableLabelChanges: true,\n        accept: accept,\n        name: name,\n        size: size\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--file-container\")\n      }, this.state.filenames.length === 0 ? null : this.state.filenames.map(function (name, index) {\n        return /*#__PURE__*/React.createElement(\"span\", _extends({\n          key: index,\n          className: selectedFileClasses,\n          ref: function ref(node) {\n            return _this2.nodes[index] = node;\n          } // eslint-disable-line\n\n        }, other), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"\".concat(prefix, \"--file-filename\")\n        }, name), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"\".concat(prefix, \"--file__state-container\")\n        }, /*#__PURE__*/React.createElement(Filename, {\n          iconDescription: iconDescription,\n          status: filenameStatus,\n          onKeyDown: function onKeyDown(evt) {\n            if (matches(evt, [keys.Enter, keys.Space])) {\n              _this2.handleClick(evt, {\n                index: index,\n                filenameStatus: filenameStatus\n              });\n            }\n          },\n          onClick: function onClick(evt) {\n            return _this2.handleClick(evt, {\n              index: index,\n              filenameStatus: filenameStatus\n            });\n          }\n        })));\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_ref2, state) {\n      var filenameStatus = _ref2.filenameStatus;\n      var prevFilenameStatus = state.prevFilenameStatus;\n      return prevFilenameStatus === filenameStatus ? null : {\n        filenameStatus: filenameStatus,\n        prevFilenameStatus: filenameStatus\n      };\n    }\n  }]);\n\n  return FileUploader;\n}(React.Component);\n\n_defineProperty(FileUploader, \"propTypes\", {\n  /**\n   * Specify the types of files that this input should be able to receive\n   */\n  accept: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Specify the type of the <FileUploaderButton>\n   */\n  buttonKind: PropTypes.oneOf(ButtonKinds),\n\n  /**\n   * Provide the label text to be read by screen readers when interacting with\n   * the <FileUploaderButton>\n   */\n  buttonLabel: PropTypes.string,\n\n  /**\n   * Provide a custom className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the status of the File Upload\n   */\n  filenameStatus: PropTypes.oneOf(['edit', 'complete', 'uploading']).isRequired,\n\n  /**\n   * Provide a description for the complete/close icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify the description text of this <FileUploader>\n   */\n  labelDescription: PropTypes.string,\n\n  /**\n   * Specify the title text of this <FileUploader>\n   */\n  labelTitle: PropTypes.string,\n\n  /**\n   * Specify if the component should accept multiple files to upload\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Provide a name for the underlying `<input>` node\n   */\n  name: PropTypes.string,\n\n  /**\n   * Provide an optional `onChange` hook that is called each time the input is\n   * changed\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Provide an optional `onClick` hook that is called each time the\n   * FileUploader is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Provide an optional `onDelete` hook that is called when an uploaded item\n   * is removed\n   */\n  onDelete: PropTypes.func,\n\n  /**\n   * Specify the size of the FileUploaderButton, from a list of available\n   * sizes. For `default` buttons, this prop can remain unspecified.\n   * V11: `default`, `field`, and `small` will be removed\n   */\n  size: PropTypes.oneOf(['default', 'field', 'small', 'sm', 'md', 'lg'])\n});\n\n_defineProperty(FileUploader, \"defaultProps\", {\n  iconDescription: 'Provide icon description',\n  filenameStatus: 'uploading',\n  buttonLabel: '',\n  buttonKind: 'primary',\n  multiple: false,\n  onClick: function onClick() {},\n  accept: []\n});\n\nexport { FileUploader as default };","map":null,"metadata":{},"sourceType":"module"}