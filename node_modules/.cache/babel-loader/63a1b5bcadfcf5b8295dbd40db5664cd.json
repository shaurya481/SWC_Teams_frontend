{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"additionalInfo\", \"className\", \"content\", \"copyrightText\", \"legalText\", \"links\", \"logo\", \"onClose\", \"open\", \"title\"];\n/**\n * Copyright IBM Corp. 2020, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\nimport React from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pkg } from '../../settings'; // Carbon and package components we use.\n\nimport { ComposedModal, ModalHeader, ModalFooter, ModalBody, Tabs, Tab } from 'carbon-components-react'; // The block part of our conventional BEM class names (blockClass__E--M).\n\nvar blockClass = \"\".concat(pkg.prefix, \"--about-modal\");\nvar componentName = 'AboutModal'; // NOTE: the component SCSS is not imported here: it is rolled up separately.\n\n/**\n * The AboutModal component provides a way to communicate product information\n * to users. It is triggered by a user’s action, appears on top of the main\n * page content, and is persistent until dismissed. The purpose of this modal\n * should be immediately apparent to the user, with a clear and obvious path\n * to completion.\n */\n\nexport var AboutModal = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var additionalInfo = _ref.additionalInfo,\n      className = _ref.className,\n      content = _ref.content,\n      copyrightText = _ref.copyrightText,\n      legalText = _ref.legalText,\n      links = _ref.links,\n      logo = _ref.logo,\n      onClose = _ref.onClose,\n      open = _ref.open,\n      title = _ref.title,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(ComposedModal, _extends({}, // Pass through any other property values as HTML attributes.\n  rest, {\n    className: cx(blockClass, // Apply the block class to the main HTML element\n    className, // Apply any supplied class names to the main HTML element.\n    _defineProperty({}, \"\".concat(blockClass, \"--with-tabs\"), additionalInfo && additionalInfo.length > 1)),\n    onClose: onClose,\n    open: open,\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__logo\")\n  }, logo), /*#__PURE__*/React.createElement(ModalHeader, {\n    className: \"\".concat(blockClass, \"__header\"),\n    label: title,\n    labelClassName: \"\".concat(blockClass, \"__title\")\n  }), /*#__PURE__*/React.createElement(ModalBody, {\n    className: \"\".concat(blockClass, \"__body\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__body-content\")\n  }, content, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__links-container\")\n  }, links && links.length > 0 && links.map(function (link, i) {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: i\n    }, link);\n  })), legalText && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(blockClass, \"__legal-text\")\n  }, legalText), copyrightText && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(blockClass, \"__copyright-text\")\n  }, copyrightText))), /*#__PURE__*/React.createElement(ModalFooter, {\n    className: \"\".concat(blockClass, \"__footer\")\n  }, additionalInfo && additionalInfo.length > 0 && (additionalInfo.length === 1 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(blockClass, \"__version-label\")\n  }, additionalInfo[0].label), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(blockClass, \"__version-number\")\n  }, additionalInfo[0].content)) : /*#__PURE__*/React.createElement(Tabs, {\n    className: \"\".concat(blockClass, \"__tab-container\")\n  }, additionalInfo.map(function (tab, i) {\n    return /*#__PURE__*/React.createElement(Tab, {\n      id: 'about-modal-tab-' + tab.label,\n      label: tab.label,\n      key: i\n    }, tab.content);\n  })))));\n}); // Return a placeholder if not released and not enabled by feature flag\n\nAboutModal = pkg.checkComponentEnabled(AboutModal, componentName); // The display name of the component, used by React.\n\nAboutModal.displayName = componentName; // The types and DocGen commentary for the component props,\n// in alphabetical order (for consistency).\n// See https://www.npmjs.com/package/prop-types#usage.\n\nAboutModal.propTypes = {\n  /**\n   * Additional information to be displayed in the footer. Can be used for\n   * version information and/or a set of tabs with various contents. If only\n   * one set of additional information is provided then no tabs are\n   * displayed and the label and content are just displayed one above the\n   * other in the footer.\n   */\n  additionalInfo: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    content: PropTypes.node\n  })),\n\n  /**\n   * Provide an optional class to be applied to the modal root node.\n   */\n  className: PropTypes.string,\n\n  /**\n   * A summary that appears immediately beneath the title, and might\n   * include information such as: version name, server name,\n   * user name, user role, browser version, browser OS etc.\n   */\n  content: PropTypes.node.isRequired,\n\n  /**\n   * Trademark and copyright information. Suggested format for copyright -\n   * \"Copyright © 2018 Company\".\n   */\n  copyrightText: PropTypes.node,\n\n  /**\n   * Text providing legal information.\n   */\n  legalText: PropTypes.node,\n\n  /**\n   * An array of Carbon `Link` components that contain links to additional\n   * information.\n   */\n  links: PropTypes.arrayOf(PropTypes.element),\n\n  /**\n   * A visual symbol used to represent the product.\n   */\n  logo: PropTypes.node.isRequired,\n\n  /**\n   * Specifies an optional handler which is called when the AboutModal\n   * is closed. Returning `false` prevents the AboutModal from closing.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Specifies whether the AboutModal is open or not.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The title of the AboutModal is usually the product or service name.\n   */\n  title: PropTypes.node.isRequired\n};","map":null,"metadata":{},"sourceType":"module"}