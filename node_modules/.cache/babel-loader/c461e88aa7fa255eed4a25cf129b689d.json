{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nimport { ChevronDown16, WarningFilled16, WarningAltFilled16 } from '@carbon/icons-react';\nimport deprecate from '../../prop-types/deprecate';\nvar prefix = settings.prefix;\nvar Select = /*#__PURE__*/React.forwardRef(function Select(_ref, ref) {\n  var _classNames, _classNames2, _classNames3;\n\n  var className = _ref.className,\n      id = _ref.id,\n      inline = _ref.inline,\n      labelText = _ref.labelText,\n      disabled = _ref.disabled,\n      children = _ref.children,\n      noLabel = _ref.noLabel,\n      iconDescription = _ref.iconDescription,\n      hideLabel = _ref.hideLabel,\n      invalid = _ref.invalid,\n      invalidText = _ref.invalidText,\n      helperText = _ref.helperText,\n      light = _ref.light,\n      size = _ref.size,\n      warn = _ref.warn,\n      warnText = _ref.warnText,\n      other = _objectWithoutProperties(_ref, [\"className\", \"id\", \"inline\", \"labelText\", \"disabled\", \"children\", \"noLabel\", \"iconDescription\", \"hideLabel\", \"invalid\", \"invalidText\", \"helperText\", \"light\", \"size\", \"warn\", \"warnText\"]);\n\n  var selectClasses = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--select\"), true), _defineProperty(_classNames, \"\".concat(prefix, \"--select--inline\"), inline), _defineProperty(_classNames, \"\".concat(prefix, \"--select--light\"), light), _defineProperty(_classNames, \"\".concat(prefix, \"--select--invalid\"), invalid), _defineProperty(_classNames, \"\".concat(prefix, \"--select--disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefix, \"--select--warning\"), warn), _defineProperty(_classNames, className, className), _classNames));\n  var labelClasses = classNames(\"\".concat(prefix, \"--label\"), (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefix, \"--visually-hidden\"), hideLabel), _defineProperty(_classNames2, \"\".concat(prefix, \"--label--disabled\"), disabled), _classNames2));\n  var inputClasses = classNames((_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefix, \"--select-input\"), true), _defineProperty(_classNames3, \"\".concat(prefix, \"--select-input--\").concat(size), size), _classNames3));\n  var errorId = \"\".concat(id, \"-error-msg\");\n\n  var errorText = function () {\n    if (invalid) {\n      return invalidText;\n    }\n\n    if (warn) {\n      return warnText;\n    }\n  }();\n\n  var error = invalid || warn ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--form-requirement\"),\n    id: errorId\n  }, errorText) : null;\n  var helperTextClasses = classNames(\"\".concat(prefix, \"--form__helper-text\"), _defineProperty({}, \"\".concat(prefix, \"--form__helper-text--disabled\"), disabled));\n  var helper = helperText ? /*#__PURE__*/React.createElement(\"div\", {\n    className: helperTextClasses\n  }, helperText) : null;\n  var ariaProps = {};\n\n  if (invalid) {\n    ariaProps['aria-describedby'] = errorId;\n  }\n\n  var input = function () {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"select\", _extends({}, other, ariaProps, {\n      id: id,\n      className: inputClasses,\n      disabled: disabled || undefined,\n      \"aria-invalid\": invalid || undefined,\n      ref: ref\n    }), children), /*#__PURE__*/React.createElement(ChevronDown16, {\n      className: \"\".concat(prefix, \"--select__arrow\")\n    }), invalid && /*#__PURE__*/React.createElement(WarningFilled16, {\n      className: \"\".concat(prefix, \"--select__invalid-icon\")\n    }), !invalid && warn && /*#__PURE__*/React.createElement(WarningAltFilled16, {\n      className: \"\".concat(prefix, \"--select__invalid-icon \").concat(prefix, \"--select__invalid-icon--warning\")\n    }));\n  }();\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--form-item\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: selectClasses\n  }, !noLabel && /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    className: labelClasses\n  }, labelText), inline && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--select-input--inline__wrapper\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--select-input__wrapper\"),\n    \"data-invalid\": invalid || null\n  }, input), error), !inline && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--select-input__wrapper\"),\n    \"data-invalid\": invalid || null\n  }, input), !inline && error ? error : helper));\n});\nSelect.displayName = 'Select';\nSelect.propTypes = {\n  /**\n   * Provide the contents of your Select\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the node containing the label and the select box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Optionally provide the default value of the `<select>`\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide text that is used alongside the control label for additional help\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * Specify whether the label should be hidden, or not\n   */\n  hideLabel: PropTypes.bool,\n\n  /**\n   * Provide a description for the twistie icon that can be read by screen readers\n   */\n  iconDescription: deprecate(PropTypes.string, 'The `iconDescription` prop for `Select` is no longer needed and has ' + 'been deprecated. It will be moved in the next major release.'),\n\n  /**\n   * Specify a custom `id` for the `<select>`\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Specify whether you want the inline version of this control\n   */\n  inline: PropTypes.bool,\n\n  /**\n   * Specify if the currently value is invalid.\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Message which is displayed if the value is invalid.\n   */\n  invalidText: PropTypes.node,\n\n  /**\n   * Provide label text to be read by screen readers when interacting with the\n   * control\n   */\n  labelText: PropTypes.node,\n\n  /**\n   * Specify whether you want the light version of this control\n   */\n  light: PropTypes.bool,\n\n  /**\n   * Reserved for use with <Pagination> component. Will not render a label for the\n   * select since Pagination renders one for us.\n   */\n  noLabel: PropTypes.bool,\n\n  /**\n   * Provide an optional `onChange` hook that is called each time the value of\n   * the underlying `<input>` changes\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Specify the size of the Select Input. Currently supports either `sm`, 'md' (default) or 'lg` as an option.\n   * TODO V11: remove `xl` (replaced with lg)\n   */\n  size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl']),\n\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\nSelect.defaultProps = {\n  disabled: false,\n  labelText: 'Select',\n  inline: false,\n  invalid: false,\n  invalidText: '',\n  helperText: '',\n  light: false\n};\nexport default Select;","map":null,"metadata":{},"sourceType":"module"}