{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useRef } from 'react';\nimport setupGetInstanceId from '../../tools/setupGetInstanceId';\nvar prefix = settings.prefix;\nvar getInstanceId = setupGetInstanceId();\n\nfunction Loading(_ref) {\n  var _cx, _cx2;\n\n  var id = _ref.id,\n      active = _ref.active,\n      customClassName = _ref.className,\n      withOverlay = _ref.withOverlay,\n      small = _ref.small,\n      description = _ref.description,\n      rest = _objectWithoutProperties(_ref, [\"id\", \"active\", \"className\", \"withOverlay\", \"small\", \"description\"]);\n\n  var _useRef = useRef(getInstanceId()),\n      instanceId = _useRef.current;\n\n  var loadingClassName = cx(customClassName, (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--loading\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--loading--small\"), small), _defineProperty(_cx, \"\".concat(prefix, \"--loading--stop\"), !active), _cx));\n  var overlayClassName = cx((_cx2 = {}, _defineProperty(_cx2, \"\".concat(prefix, \"--loading-overlay\"), true), _defineProperty(_cx2, \"\".concat(prefix, \"--loading-overlay--stop\"), !active), _cx2));\n  var loadingId = id || \"loading-id-\".concat(instanceId);\n  var spinnerRadius = small ? '42' : '44';\n  var loading = /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    \"aria-atomic\": \"true\",\n    \"aria-labelledby\": loadingId,\n    \"aria-live\": active ? 'assertive' : 'off',\n    className: loadingClassName\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    id: loadingId,\n    className: \"\".concat(prefix, \"--visually-hidden\")\n  }, description), /*#__PURE__*/React.createElement(\"svg\", {\n    className: \"\".concat(prefix, \"--loading__svg\"),\n    viewBox: \"0 0 100 100\"\n  }, /*#__PURE__*/React.createElement(\"title\", null, description), small ? /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"\".concat(prefix, \"--loading__background\"),\n    cx: \"50%\",\n    cy: \"50%\",\n    r: spinnerRadius\n  }) : null, /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"\".concat(prefix, \"--loading__stroke\"),\n    cx: \"50%\",\n    cy: \"50%\",\n    r: spinnerRadius\n  })));\n  return withOverlay ? /*#__PURE__*/React.createElement(\"div\", {\n    className: overlayClassName\n  }, loading) : loading;\n}\n\nLoading.propTypes = {\n  /**\n   * Specify whether you want the loading indicator to be spinning or not\n   */\n  active: PropTypes.bool,\n\n  /**\n   * Provide an optional className to be applied to the containing node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify an description that would be used to best describe the loading state\n   */\n  description: PropTypes.string,\n\n  /**\n   * Provide an `id` to uniquely identify the label\n   */\n  id: PropTypes.string,\n\n  /**\n   * Specify whether you would like the small variant of <Loading>\n   */\n  small: PropTypes.bool,\n\n  /**\n   * Specify whether you want the loader to be applied with an overlay\n   */\n  withOverlay: PropTypes.bool\n};\nLoading.defaultProps = {\n  active: true,\n  withOverlay: true,\n  small: false,\n  description: 'Active loading indicator'\n};\nexport default Loading;","map":null,"metadata":{},"sourceType":"module"}