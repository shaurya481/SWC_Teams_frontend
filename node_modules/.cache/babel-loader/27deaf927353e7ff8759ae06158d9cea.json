{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"className\", \"iconDescription\", \"label\", \"renderIcon\", \"size\"];\n/**\n * Copyright IBM Corp. 2021, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\nimport React from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pkg, carbon } from '../../settings'; // Carbon and package components we use.\n\nimport { Button, OverflowMenu } from 'carbon-components-react'; // The block part of our conventional BEM class names (blockClass__E--M).\n\nvar blockClass = \"\".concat(pkg.prefix, \"--button-menu\");\nvar componentName = 'ButtonMenu'; // NOTE: the component SCSS is not imported here: it is rolled up separately.\n\n/**\n * Combining a standard button with an overflow menu, this component appears\n * as a button and has all the usual carbon Button props and rendering, but\n * acts as an overflow menu when clicked. The ButtonMenu component can contain\n * zero to many ButtonMenuItem, which is identical to the carbon\n * OverflowMenuItem component.\n */\n\nexport var ButtonMenu = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      iconDescription = _ref.iconDescription,\n      label = _ref.label,\n      Icon = _ref.renderIcon,\n      size = _ref.size,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(OverflowMenu, _extends({}, // Pass through any other property values as HTML attributes.\n  rest, {\n    className: cx(blockClass, // Apply the block class to the main HTML element\n    className // Apply any supplied class names to the main HTML element.\n    ),\n    menuOptionsClass: \"\".concat(blockClass, \"__options\"),\n    renderIcon: function renderIcon() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: cx([\"\".concat(blockClass, \"__trigger\"), \"\".concat(carbon.prefix, \"--btn\"), \"\".concat(carbon.prefix, \"--btn--primary\"), \"\".concat(carbon.prefix, \"--btn--\").concat(size)])\n      }, label, Icon && /*#__PURE__*/React.createElement(Icon, {\n        \"aria-hidden\": \"true\",\n        \"aria-label\": iconDescription,\n        className: \"\".concat(carbon.prefix, \"--btn__icon\")\n      }));\n    },\n    ref: ref\n  }), children);\n}); // Return a placeholder if not released and not enabled by feature flag\n\nButtonMenu = pkg.checkComponentEnabled(ButtonMenu, componentName); // The display name of the component, used by React. Note that displayName\n// is used in preference to relying on function.name.\n\nButtonMenu.displayName = componentName; // The types and DocGen commentary for the component props,\n// in alphabetical order (for consistency).\n// See https://www.npmjs.com/package/prop-types#usage.\n\nButtonMenu.propTypes = {\n  /**\n   * Provide the contents of the ButtonMenu. This should be one or more\n   * ButtonMenuItem components.\n   */\n  children: PropTypes.arrayOf(PropTypes.element).isRequired,\n\n  /**\n   * Provide an optional class to be applied to the containing node.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If specifying the `renderIcon` prop, provide a description for that icon that can\n   * be read by screen readers\n   */\n  iconDescription: Button.propTypes.iconDescription,\n\n  /**\n   * The button label for the menu trigger.\n   */\n  label: PropTypes.node,\n\n  /**\n   * Optional prop to allow overriding the icon rendering.\n   * Can be a React component class\n   */\n  renderIcon: Button.propTypes.renderIcon,\n\n  /**\n   * The size of the button for the menu trigger. The values can be any valid\n   * value for the carbon Button component 'size' prop.\n   */\n  size: Button.propTypes.size\n};\nButtonMenu.defaultProps = {\n  size: Button.defaultProps.size\n};","map":null,"metadata":{},"sourceType":"module"}