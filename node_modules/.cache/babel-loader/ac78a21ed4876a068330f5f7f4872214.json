{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nimport { useControllableState } from '../../../internal/useControllableState';\nvar prefix = settings.prefix;\nexport function Toggle(_ref) {\n  var className = _ref.className,\n      _ref$defaultToggled = _ref.defaultToggled,\n      defaultToggled = _ref$defaultToggled === void 0 ? false : _ref$defaultToggled,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$hideLabel = _ref.hideLabel,\n      hideLabel = _ref$hideLabel === void 0 ? false : _ref$hideLabel,\n      id = _ref.id,\n      _ref$labelA = _ref.labelA,\n      labelA = _ref$labelA === void 0 ? 'Off' : _ref$labelA,\n      _ref$labelB = _ref.labelB,\n      labelB = _ref$labelB === void 0 ? 'On' : _ref$labelB,\n      labelText = _ref.labelText,\n      onClick = _ref.onClick,\n      onToggle = _ref.onToggle,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'md' : _ref$size,\n      toggled = _ref.toggled,\n      other = _objectWithoutProperties(_ref, [\"className\", \"defaultToggled\", \"disabled\", \"hideLabel\", \"id\", \"labelA\", \"labelB\", \"labelText\", \"onClick\", \"onToggle\", \"size\", \"toggled\"]);\n\n  var _useControllableState = useControllableState(toggled, onToggle, defaultToggled),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      checked = _useControllableState2[0],\n      setChecked = _useControllableState2[1];\n\n  function handleClick(e) {\n    setChecked(!checked);\n\n    if (onClick) {\n      onClick(e);\n    }\n  }\n\n  var isSm = size === 'sm';\n  var sideLabel = hideLabel ? labelText : checked ? labelB : labelA;\n  var wrapperClasses = classNames(\"\".concat(prefix, \"--toggle\"), _defineProperty({}, \"\".concat(prefix, \"--toggle--disabled\"), disabled), className);\n  var labelTextClasses = classNames(\"\".concat(prefix, \"--toggle__label-text\"), _defineProperty({}, \"\".concat(prefix, \"--visually-hidden\"), hideLabel));\n  var appearanceClasses = classNames(\"\".concat(prefix, \"--toggle__appearance\"), _defineProperty({}, \"\".concat(prefix, \"--toggle__appearance--sm\"), isSm));\n  var switchClasses = classNames(\"\".concat(prefix, \"--toggle__switch\"), _defineProperty({}, \"\".concat(prefix, \"--toggle__switch--checked\"), checked));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClasses\n  }, /*#__PURE__*/React.createElement(\"button\", _extends({}, other, {\n    id: id,\n    className: \"\".concat(prefix, \"--toggle__button\"),\n    role: \"switch\",\n    type: \"button\",\n    \"aria-checked\": checked,\n    disabled: disabled,\n    onClick: handleClick\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    className: \"\".concat(prefix, \"--toggle__label\")\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: labelTextClasses\n  }, labelText), /*#__PURE__*/React.createElement(\"div\", {\n    className: appearanceClasses\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: switchClasses\n  }, isSm && /*#__PURE__*/React.createElement(\"svg\", {\n    className: \"\".concat(prefix, \"--toggle__check\"),\n    width: \"6px\",\n    height: \"5px\",\n    viewBox: \"0 0 6 5\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M2.2 2.7L5 0 6 1 2.2 5 0 2.7 1 1.5z\"\n  }))), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--toggle__text\"),\n    \"aria-hidden\": \"true\"\n  }, sideLabel))));\n}\nToggle.propTypes = {\n  /**\n   * Specify a custom className to apply to the form-item node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the toggle should be on by default\n   */\n  defaultToggled: PropTypes.bool,\n\n  /**\n   * Whether this control should be disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify whether the label should be hidden, or not\n   */\n  hideLabel: PropTypes.bool,\n\n  /**\n   * Provide an id that unique represents the underlying `<button>`\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Specify the label for the \"off\" position\n   */\n  labelA: PropTypes.node.isRequired,\n\n  /**\n   * Specify the label for the \"on\" position\n   */\n  labelB: PropTypes.node.isRequired,\n\n  /**\n   * Provide the text that will be read by a screen reader when visiting this\n   * control\n   */\n  labelText: PropTypes.node.isRequired,\n\n  /**\n   * Provide an event listener that is called when the control is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Provide an event listener that is called when the control is toggled\n   */\n  onToggle: PropTypes.func,\n\n  /**\n   * Specify the size of the Toggle. Currently only supports 'sm' or 'md' (default)\n   */\n  size: PropTypes.oneOf(['sm', 'md']),\n\n  /**\n   * Specify whether the control is toggled\n   */\n  toggled: PropTypes.bool\n};\nexport default Toggle;","map":null,"metadata":{},"sourceType":"module"}