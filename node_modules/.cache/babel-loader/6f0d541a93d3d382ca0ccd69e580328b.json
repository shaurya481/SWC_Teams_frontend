{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nimport throttle from 'lodash.throttle';\nimport * as keys from '../../internal/keyboard/keys';\nimport { matches } from '../../internal/keyboard/match';\nimport deprecate from '../../prop-types/deprecate';\nvar prefix = settings.prefix;\n\nvar defaultFormatLabel = function defaultFormatLabel(value, label) {\n  return typeof label === 'function' ? label(value) : \"\".concat(value).concat(label);\n};\n/**\n * Minimum time between processed \"drag\" events.\n */\n\n\nvar EVENT_THROTTLE = 16; // ms\n\n/**\n * Event types that trigger \"drags\".\n */\n\nvar DRAG_EVENT_TYPES = new Set(['mousemove', 'touchmove']);\n/**\n * Event types that trigger a \"drag\" to stop.\n */\n\nvar DRAG_STOP_EVENT_TYPES = new Set(['mouseup', 'touchend', 'touchcancel']);\n\nvar Slider = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Slider, _PureComponent);\n\n  var _super = _createSuper(Slider);\n\n  function Slider() {\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      value: _this.props.value,\n      left: 0,\n      needsOnRelease: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragStart\", function (evt) {\n      // Do nothing if component is disabled\n      if (_this.props.disabled) {\n        return;\n      } // Register drag stop handlers\n\n\n      DRAG_STOP_EVENT_TYPES.forEach(function (element) {\n        _this.element.ownerDocument.addEventListener(element, _this.onDragStop);\n      }); // Register drag handlers\n\n      DRAG_EVENT_TYPES.forEach(function (element) {\n        _this.element.ownerDocument.addEventListener(element, _this.onDrag);\n      }); // Perform first recalculation since we probably didn't click exactly in the\n      // middle of the thumb\n\n      _this.onDrag(evt);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragStop\", function () {\n      // Do nothing if component is disabled\n      if (_this.props.disabled) {\n        return;\n      } // Remove drag stop handlers\n\n\n      DRAG_STOP_EVENT_TYPES.forEach(function (element) {\n        _this.element.ownerDocument.removeEventListener(element, _this.onDragStop);\n      }); // Remove drag handlers\n\n      DRAG_EVENT_TYPES.forEach(function (element) {\n        _this.element.ownerDocument.removeEventListener(element, _this.onDrag);\n      }); // Set needsOnRelease flag so event fires on next update\n\n      _this.setState({\n        needsOnRelease: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onDrag\", function (evt) {\n      // Do nothing if component is disabled or we have no event\n      if (_this.props.disabled || !evt) {\n        return;\n      }\n\n      var clientX;\n\n      if ('clientX' in evt) {\n        clientX = evt.clientX;\n      } else if ('touches' in evt && 0 in evt.touches && 'clientX' in evt.touches[0]) {\n        clientX = evt.touches[0].clientX;\n      } else {\n        // Do nothing if we have no valid clientX\n        return;\n      }\n\n      var _this$calcValue = _this.calcValue({\n        clientX: clientX\n      }),\n          value = _this$calcValue.value,\n          left = _this$calcValue.left;\n\n      _this.setState({\n        value: value,\n        left: left\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDrag\", throttle(_this._onDrag, EVENT_THROTTLE, {\n      leading: true,\n      trailing: false\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function (evt) {\n      // Do nothing if component is disabled or we don't have a valid event\n      if (_this.props.disabled || !('which' in evt)) {\n        return;\n      }\n\n      var which = Number.parseInt(evt.which);\n      var delta = 0;\n\n      if (matches(which, [keys.ArrowDown, keys.ArrowLeft])) {\n        delta = -_this.props.step;\n      } else if (matches(which, [keys.ArrowUp, keys.ArrowRight])) {\n        delta = _this.props.step;\n      } else {\n        // Ignore keys we don't want to handle\n        return;\n      } // If shift was held, account for the stepMultiplier\n\n\n      if (evt.shiftKey) {\n        var stepMultiplier = _this.props.stepMultiplier || _this.props.stepMuliplier;\n        delta *= stepMultiplier;\n      }\n\n      Math.floor(_this.state.value / _this.props.step) * _this.props.step;\n\n      var _this$calcValue2 = _this.calcValue({\n        // Ensures custom value from `<input>` won't cause skipping next stepping point with right arrow key,\n        // e.g. Typing 51 in `<input>`, moving focus onto the thumb and the hitting right arrow key should yield 52 instead of 54\n        value: (delta > 0 ? Math.floor(_this.state.value / _this.props.step) * _this.props.step : _this.state.value) + delta\n      }),\n          value = _this$calcValue2.value,\n          left = _this$calcValue2.left;\n\n      _this.setState({\n        value: value,\n        left: left\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (evt) {\n      // Do nothing if component is disabled\n      if (_this.props.disabled) {\n        return;\n      } // Do nothing if we have no valid event, target, or value\n\n\n      if (!evt || !('target' in evt) || typeof evt.target.value !== 'string') {\n        return;\n      }\n\n      var targetValue = Number.parseFloat(evt.target.value); // Avoid calling calcValue for invalid numbers, but still update the state\n\n      if (isNaN(targetValue)) {\n        _this.setState({\n          value: evt.target.value\n        });\n      } else {\n        // Recalculate the state's value and update the Slider\n        // if it is a valid number\n        if (evt.target.checkValidity() === false) {\n          return;\n        }\n\n        var _this$calcValue3 = _this.calcValue({\n          value: targetValue,\n          useRawValue: true\n        }),\n            value = _this$calcValue3.value,\n            left = _this$calcValue3.left;\n\n        _this.setState({\n          value: value,\n          left: left,\n          needsOnRelease: true\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"calcValue\", function (_ref) {\n      var _ref$clientX = _ref.clientX,\n          clientX = _ref$clientX === void 0 ? null : _ref$clientX,\n          _ref$value = _ref.value,\n          value = _ref$value === void 0 ? null : _ref$value,\n          _ref$useRawValue = _ref.useRawValue,\n          useRawValue = _ref$useRawValue === void 0 ? false : _ref$useRawValue;\n      var range = _this.props.max - _this.props.min;\n\n      var boundingRect = _this.element.getBoundingClientRect();\n\n      var totalSteps = range / _this.props.step;\n      var width = boundingRect.right - boundingRect.left; // Enforce a minimum width of at least 1 for calculations\n\n      if (width <= 0) {\n        width = 1;\n      } // If a clientX is specified, use it to calculate the leftPercent. If not,\n      // use the provided value or state's value to calculate it instead.\n\n\n      var leftPercent;\n\n      if (clientX != null) {\n        var leftOffset = clientX - boundingRect.left;\n        leftPercent = leftOffset / width;\n      } else {\n        if (value == null) {\n          value = _this.state.value;\n        }\n\n        leftPercent = (value - _this.props.min) / range;\n      }\n\n      if (useRawValue) {\n        // Adjusts only for min/max of thumb position\n        return {\n          value: value,\n          left: Math.min(1, Math.max(0, leftPercent)) * 100\n        };\n      }\n\n      var steppedValue = Math.round(leftPercent * totalSteps) * _this.props.step;\n\n      var steppedPercent = _this.clamp(steppedValue / range, 0, 1);\n\n      steppedValue = _this.clamp(steppedValue + _this.props.min, _this.props.min, _this.props.max);\n      return {\n        value: steppedValue,\n        left: steppedPercent * 100\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: \"componentDidMount\",\n    value:\n    /**\n     * Sets up initial slider position and value in response to component mount.\n     */\n    function componentDidMount() {\n      if (this.element) {\n        var _this$calcValue4 = this.calcValue({\n          useRawValue: true\n        }),\n            value = _this$calcValue4.value,\n            left = _this$calcValue4.left;\n\n        this.setState({\n          value: value,\n          left: left\n        });\n      }\n    }\n    /**\n     * Handles firing of `onChange` and `onRelease` callbacks to parent in\n     * response to state changes.\n     *\n     * @param {*} prevProps prevProps\n     * @param {*} prevState The previous Slider state, used to see if callbacks\n     * should be called.\n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      // Fire onChange event handler if present, if there's a usable value, and\n      // if the value is different from the last one\n      if (this.state.value !== '' && prevState.value !== this.state.value && typeof this.props.onChange === 'function') {\n        // TODO: pass event object as first param (breaking change/feat for v11)\n        this.props.onChange({\n          value: this.state.value\n        });\n      } // Fire onRelease event handler if present and if needed\n\n\n      if (this.state.needsOnRelease && typeof this.props.onRelease === 'function') {\n        // TODO: pass event object as first param (breaking change/feat for v11)\n        this.props.onRelease({\n          value: this.state.value\n        }); // Reset the flag\n\n        this.setState({\n          needsOnRelease: false\n        });\n      } // If value from props does not change, do nothing here.\n      // Otherwise, do prop -> state sync without \"value capping\".\n\n\n      if (prevProps.value === this.props.value) {\n        return;\n      }\n\n      this.setState(this.calcValue({\n        value: this.props.value,\n        useRawValue: true\n      }));\n    }\n    /**\n     * Synonymous to ECMA2017+ `Math.clamp`.\n     *\n     * @param {number} val\n     * @param {number} min\n     * @param {number} max\n     *\n     * @returns `val` if `max>=val>=min`; `min` if `val<min`; `max` if `val>max`.\n     */\n\n  }, {\n    key: \"clamp\",\n    value: function clamp(val, min, max) {\n      return Math.max(min, Math.min(val, max));\n    }\n    /**\n     * Sets up \"drag\" event handlers and calls `this.onDrag` in case dragging\n     * started on somewhere other than the thumb without a corresponding \"move\"\n     * event.\n     *\n     * @param {Event} evt The event.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames3,\n          _this2 = this;\n\n      var _this$props = this.props,\n          ariaLabelInput = _this$props.ariaLabelInput,\n          className = _this$props.className,\n          hideTextInput = _this$props.hideTextInput,\n          _this$props$id = _this$props.id,\n          id = _this$props$id === void 0 ? this.inputId = this.inputId || \"__carbon-slider_\".concat(Math.random().toString(36).substr(2)) : _this$props$id,\n          min = _this$props.min,\n          minLabel = _this$props.minLabel,\n          max = _this$props.max,\n          maxLabel = _this$props.maxLabel,\n          _this$props$formatLab = _this$props.formatLabel,\n          formatLabel = _this$props$formatLab === void 0 ? defaultFormatLabel : _this$props$formatLab,\n          labelText = _this$props.labelText,\n          step = _this$props.step,\n          stepMuliplier = _this$props.stepMuliplier,\n          stepMultiplier = _this$props.stepMultiplier,\n          inputType = _this$props.inputType,\n          required = _this$props.required,\n          disabled = _this$props.disabled,\n          name = _this$props.name,\n          light = _this$props.light,\n          invalid = _this$props.invalid,\n          other = _objectWithoutProperties(_this$props, [\"ariaLabelInput\", \"className\", \"hideTextInput\", \"id\", \"min\", \"minLabel\", \"max\", \"maxLabel\", \"formatLabel\", \"labelText\", \"step\", \"stepMuliplier\", \"stepMultiplier\", \"inputType\", \"required\", \"disabled\", \"name\", \"light\", \"invalid\"]);\n\n      delete other.onRelease;\n      var _this$state = this.state,\n          value = _this$state.value,\n          left = _this$state.left;\n      var labelId = \"\".concat(id, \"-label\");\n      var labelClasses = classNames(\"\".concat(prefix, \"--label\"), _defineProperty({}, \"\".concat(prefix, \"--label--disabled\"), disabled));\n      var sliderClasses = classNames(\"\".concat(prefix, \"--slider\"), _defineProperty({}, \"\".concat(prefix, \"--slider--disabled\"), disabled), className);\n      var inputClasses = classNames(\"\".concat(prefix, \"--text-input\"), \"\".concat(prefix, \"--slider-text-input\"), (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefix, \"--text-input--light\"), light), _defineProperty(_classNames3, \"\".concat(prefix, \"--text-input--invalid\"), this.props.invalid), _classNames3));\n      var filledTrackStyle = {\n        transform: \"translate(0%, -50%) scaleX(\".concat(left / 100, \")\")\n      };\n      var thumbStyle = {\n        left: \"\".concat(left, \"%\")\n      };\n      var hiddenInputStyle = {\n        display: 'none'\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--form-item\")\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: id,\n        className: labelClasses,\n        id: labelId\n      }, labelText), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--slider-container\")\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"\".concat(prefix, \"--slider__range-label\")\n      }, formatLabel(min, minLabel)), /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: sliderClasses,\n        ref: function ref(node) {\n          _this2.element = node;\n        },\n        onMouseDown: this.onDragStart,\n        onTouchStart: this.onDragStart,\n        onKeyDown: this.onKeyDown,\n        role: \"presentation\",\n        tabIndex: -1,\n        \"data-invalid\": invalid || null\n      }, other), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--slider__thumb\"),\n        role: \"slider\",\n        id: id,\n        tabIndex: 0,\n        \"aria-labelledby\": labelId,\n        \"aria-valuemax\": max,\n        \"aria-valuemin\": min,\n        \"aria-valuenow\": value,\n        style: thumbStyle\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--slider__track\"),\n        ref: function ref(node) {\n          _this2.track = node;\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--slider__filled-track\"),\n        style: filledTrackStyle\n      })), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"\".concat(prefix, \"--slider__range-label\")\n      }, formatLabel(max, maxLabel)), /*#__PURE__*/React.createElement(\"input\", {\n        type: hideTextInput ? 'hidden' : inputType,\n        style: hideTextInput ? hiddenInputStyle : null,\n        id: \"\".concat(id, \"-input-for-slider\"),\n        name: name,\n        className: inputClasses,\n        value: value,\n        \"aria-label\": ariaLabelInput,\n        disabled: disabled,\n        required: required,\n        min: min,\n        max: max,\n        step: step,\n        onChange: this.onChange,\n        \"data-invalid\": invalid || null,\n        \"aria-invalid\": invalid || null\n      })));\n    }\n  }]);\n\n  return Slider;\n}(PureComponent);\n\n_defineProperty(Slider, \"propTypes\", {\n  /**\n   * The `ariaLabel` for the `<input>`.\n   */\n  ariaLabelInput: PropTypes.string,\n\n  /**\n   * The child nodes.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The CSS class name for the slider.\n   */\n  className: PropTypes.string,\n\n  /**\n   * `true` to disable this slider.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The callback to format the label associated with the minimum/maximum value.\n   */\n  formatLabel: PropTypes.func,\n\n  /**\n   * `true` to hide the number input box.\n   */\n  hideTextInput: PropTypes.bool,\n\n  /**\n   * The ID of the `<input>`.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The `type` attribute of the `<input>`.\n   */\n  inputType: PropTypes.string,\n\n  /**\n   * `true` to specify if the control is invalid.\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * The label for the slider.\n   */\n  labelText: PropTypes.node,\n\n  /**\n   * `true` to use the light version.\n   */\n  light: PropTypes.bool,\n\n  /**\n   * The maximum value.\n   */\n  max: PropTypes.number.isRequired,\n\n  /**\n   * The label associated with the maximum value.\n   */\n  maxLabel: PropTypes.string,\n\n  /**\n   * The minimum value.\n   */\n  min: PropTypes.number.isRequired,\n\n  /**\n   * The label associated with the minimum value.\n   */\n  minLabel: PropTypes.string,\n\n  /**\n   * The `name` attribute of the `<input>`.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The callback to get notified of change in value.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The callback to get notified of value on handle release.\n   */\n  onRelease: PropTypes.func,\n\n  /**\n   * `true` to specify if the control is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * A value determining how much the value should increase/decrease by moving the thumb by mouse.\n   */\n  step: PropTypes.number,\n\n  /**\n   * A value determining how much the value should increase/decrease by Shift+arrow keys,\n   * which will be `(max - min) / stepMuliplier`.\n   */\n  stepMuliplier: deprecate(PropTypes.number, ' The `stepMuliplier` prop has been deprecated in favor of `stepMultiplier`. It will be removed in the next major release.'),\n\n  /**\n   * A value determining how much the value should increase/decrease by Shift+arrow keys,\n   * which will be `(max - min) / stepMultiplier`.\n   */\n  stepMultiplier: PropTypes.number,\n\n  /**\n   * The value.\n   */\n  value: PropTypes.number.isRequired\n});\n\n_defineProperty(Slider, \"defaultProps\", {\n  hideTextInput: false,\n  step: 1,\n  stepMultiplier: 4,\n  disabled: false,\n  minLabel: '',\n  maxLabel: '',\n  inputType: 'number',\n  ariaLabelInput: 'Slider number input',\n  light: false\n});\n\nexport { Slider as default };","map":null,"metadata":{},"sourceType":"module"}