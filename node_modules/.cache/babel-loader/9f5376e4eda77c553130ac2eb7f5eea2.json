{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar _defaultTranslations;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nimport { Add16, Subtract16, WarningFilled16, WarningAltFilled16 } from '@carbon/icons-react';\nimport mergeRefs from '../../tools/mergeRefs';\nimport requiredIfValueExists from '../../prop-types/requiredIfValueExists';\nimport { useControlledStateWithValue } from '../../internal/FeatureFlags';\nimport deprecate from '../../prop-types/deprecate';\nvar prefix = settings.prefix;\nexport var translationIds = {\n  'increment.number': 'increment.number',\n  'decrement.number': 'decrement.number'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['increment.number'], 'Increment number'), _defineProperty(_defaultTranslations, translationIds['decrement.number'], 'Decrement number'), _defaultTranslations);\n\nvar capMin = function capMin(min, value) {\n  return isNaN(min) || !min && min !== 0 || isNaN(value) || !value && value !== 0 ? value : Math.max(min, value);\n};\n\nvar capMax = function capMax(max, value) {\n  return isNaN(max) || !max && max !== 0 || isNaN(value) || !value && value !== 0 ? value : Math.min(max, value);\n};\n\nvar NumberInput = /*#__PURE__*/function (_Component) {\n  _inherits(NumberInput, _Component);\n\n  var _super = _createSuper(NumberInput);\n\n  function NumberInput(props) {\n    var _this;\n\n    _classCallCheck(this, NumberInput);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"_inputRef\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (evt) {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          onChange = _this$props.onChange;\n\n      if (!disabled) {\n        evt.persist();\n        evt.imaginaryTarget = _this._inputRef;\n        var prevValue = _this.state.value;\n        var value = evt.target.value;\n        var direction = prevValue < value ? 'up' : 'down';\n\n        _this.setState({\n          value: value\n        }, function () {\n          if (useControlledStateWithValue) {\n            onChange(evt, {\n              value: value,\n              direction: direction\n            });\n          } else if (onChange) {\n            onChange(evt, {\n              value: value,\n              direction: direction\n            });\n          }\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleArrowClick\", function (evt, direction) {\n      var value = typeof _this.state.value === 'string' ? Number(_this.state.value) : _this.state.value;\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          min = _this$props2.min,\n          max = _this$props2.max,\n          step = _this$props2.step,\n          onChange = _this$props2.onChange,\n          onClick = _this$props2.onClick;\n      var conditional = direction === 'down' ? min !== undefined && value > min || min === undefined : max !== undefined && value < max || max === undefined;\n\n      if (!disabled && conditional) {\n        value = direction === 'down' ? value - step : value + step;\n        value = capMax(max, capMin(min, value));\n        evt.persist();\n        evt.imaginaryTarget = _this._inputRef;\n\n        _this.setState({\n          value: value\n        }, function () {\n          //TO-DO v11: update these events to return the same things --> evt, {value, direction}\n          if (useControlledStateWithValue) {\n            onClick && onClick(evt, {\n              value: value,\n              direction: direction\n            });\n            onChange && onChange(evt, {\n              value: value,\n              direction: direction\n            });\n          } else {\n            // value added as a 3rd argument rather than in same obj so it doesn't break in v10\n            onClick && onClick(evt, direction, value);\n            onChange && onChange(evt, direction, value);\n          }\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleInputRef\", function (ref) {\n      _this._inputRef = ref;\n    });\n\n    _this.isControlled = props.value !== undefined;\n\n    if (useControlledStateWithValue && _this.isControlled) {\n      // Skips the logic of setting initial state if this component is controlled\n      _this.state = {};\n      return _possibleConstructorReturn(_this);\n    }\n\n    var _value = useControlledStateWithValue || typeof props.defaultValue !== 'undefined' ? props.defaultValue : props.value;\n\n    _value = _value === undefined ? 0 : _value;\n\n    if (props.min || props.min === 0) {\n      _value = Math.max(props.min, _value);\n    }\n\n    _this.state = {\n      value: _value\n    };\n    return _this;\n  }\n\n  _createClass(NumberInput, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames,\n          _classNames3,\n          _this2 = this;\n\n      var _this$props3 = this.props,\n          className = _this$props3.className,\n          disabled = _this$props3.disabled,\n          iconDescription = _this$props3.iconDescription,\n          id = _this$props3.id,\n          hideLabel = _this$props3.hideLabel,\n          hideSteppers = _this$props3.hideSteppers,\n          label = _this$props3.label,\n          max = _this$props3.max,\n          min = _this$props3.min,\n          step = _this$props3.step,\n          value = _this$props3.value,\n          readOnly = _this$props3.readOnly,\n          invalid = _this$props3.invalid,\n          invalidText = _this$props3.invalidText,\n          warn = _this$props3.warn,\n          warnText = _this$props3.warnText,\n          helperText = _this$props3.helperText,\n          ariaLabel = _this$props3.ariaLabel,\n          light = _this$props3.light,\n          allowEmpty = _this$props3.allowEmpty,\n          ref = _this$props3.innerRef,\n          t = _this$props3.translateWithId,\n          isMobile = _this$props3.isMobile,\n          size = _this$props3.size,\n          defaultValue = _this$props3.defaultValue,\n          other = _objectWithoutProperties(_this$props3, [\"className\", \"disabled\", \"iconDescription\", \"id\", \"hideLabel\", \"hideSteppers\", \"label\", \"max\", \"min\", \"step\", \"value\", \"readOnly\", \"invalid\", \"invalidText\", \"warn\", \"warnText\", \"helperText\", \"ariaLabel\", \"light\", \"allowEmpty\", \"innerRef\", \"translateWithId\", \"isMobile\", \"size\", \"defaultValue\"]);\n\n      var numberInputClasses = classNames(\"\".concat(prefix, \"--number \").concat(prefix, \"--number--helpertext\"), className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--number--readonly\"), readOnly), _defineProperty(_classNames, \"\".concat(prefix, \"--number--light\"), light), _defineProperty(_classNames, \"\".concat(prefix, \"--number--nolabel\"), hideLabel), _defineProperty(_classNames, \"\".concat(prefix, \"--number--nosteppers\"), hideSteppers), _defineProperty(_classNames, \"\".concat(prefix, \"--number--mobile\"), isMobile), _defineProperty(_classNames, \"\".concat(prefix, \"--number--\").concat(size), size), _classNames));\n      var props = {\n        disabled: disabled,\n        id: id,\n        max: max,\n        min: min,\n        step: step,\n        onChange: this.handleChange,\n        value: useControlledStateWithValue && this.isControlled ? value : this.state.value,\n        readOnly: readOnly,\n        'aria-label': label ? null : ariaLabel\n      };\n      var buttonProps = {\n        disabled: disabled\n      };\n      var inputWrapperProps = {};\n      var errorId = null;\n      var error = null;\n      var isInputInvalid; // If the user supplied `invalid` through props, we'll defer to the passed in value\n\n      if (invalid) {\n        isInputInvalid = true;\n      } else {\n        // Otherwise, if we don't allow an empty value then we check to see\n        // if the value is empty, or if it is out of range\n        if (!allowEmpty && this.state.value === '') {\n          isInputInvalid = true;\n        } else {\n          if (this.state.value !== '' && (this.state.value > max || this.state.value < min)) {\n            isInputInvalid = true;\n          }\n        }\n      }\n\n      if (isInputInvalid) {\n        inputWrapperProps['data-invalid'] = true;\n        errorId = \"\".concat(id, \"-error-id\");\n        error = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefix, \"--form-requirement\"),\n          id: errorId\n        }, invalidText);\n      } else if (warn) {\n        errorId = \"\".concat(id, \"-error-id\");\n        error = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefix, \"--form-requirement\"),\n          id: errorId\n        }, warnText);\n      }\n\n      var helperTextClasses = classNames(\"\".concat(prefix, \"--form__helper-text\"), _defineProperty({}, \"\".concat(prefix, \"--form__helper-text--disabled\"), disabled));\n      var helper = helperText ? /*#__PURE__*/React.createElement(\"div\", {\n        className: helperTextClasses\n      }, helperText) : null;\n      var labelClasses = classNames(\"\".concat(prefix, \"--label\"), (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefix, \"--label--disabled\"), disabled), _defineProperty(_classNames3, \"\".concat(prefix, \"--visually-hidden\"), hideLabel), _classNames3));\n      var labelText = label ? /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: id,\n        className: labelClasses\n      }, label) : null;\n      var _ref = [t('increment.number'), t('decrement.number')],\n          incrementNumLabel = _ref[0],\n          decrementNumLabel = _ref[1];\n      var wrapperClasses = classNames(\"\".concat(prefix, \"--number__input-wrapper\"), _defineProperty({}, \"\".concat(prefix, \"--number__input-wrapper--warning\"), !isInputInvalid && warn));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--form-item\")\n      }, /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: numberInputClasses\n      }, inputWrapperProps), function () {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, labelText, /*#__PURE__*/React.createElement(\"div\", {\n          className: wrapperClasses\n        }, /*#__PURE__*/React.createElement(\"input\", _extends({\n          \"data-invalid\": isInputInvalid,\n          \"aria-invalid\": isInputInvalid,\n          \"aria-describedby\": errorId,\n          type: \"number\",\n          pattern: \"[0-9]*\"\n        }, other, props, {\n          ref: mergeRefs(ref, _this2._handleInputRef)\n        })), isInputInvalid && /*#__PURE__*/React.createElement(WarningFilled16, {\n          className: \"\".concat(prefix, \"--number__invalid\")\n        }), !isInputInvalid && warn && /*#__PURE__*/React.createElement(WarningAltFilled16, {\n          className: \"\".concat(prefix, \"--number__invalid \").concat(prefix, \"--number__invalid--warning\")\n        }), !hideSteppers && /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefix, \"--number__controls\")\n        }, /*#__PURE__*/React.createElement(\"button\", _extends({\n          type: \"button\",\n          className: \"\".concat(prefix, \"--number__control-btn down-icon\")\n        }, buttonProps, {\n          onClick: function onClick(evt) {\n            return _this2.handleArrowClick(evt, 'down');\n          },\n          title: decrementNumLabel || iconDescription,\n          \"aria-label\": decrementNumLabel || iconDescription,\n          tabIndex: \"-1\"\n        }), /*#__PURE__*/React.createElement(Subtract16, {\n          className: \"down-icon\"\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefix, \"--number__rule-divider\")\n        }), /*#__PURE__*/React.createElement(\"button\", _extends({\n          type: \"button\",\n          className: \"\".concat(prefix, \"--number__control-btn up-icon\")\n        }, buttonProps, {\n          onClick: function onClick(evt) {\n            return _this2.handleArrowClick(evt, 'up');\n          },\n          title: incrementNumLabel || iconDescription,\n          \"aria-label\": incrementNumLabel || iconDescription,\n          tabIndex: \"-1\"\n        }), /*#__PURE__*/React.createElement(Add16, {\n          className: \"up-icon\"\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefix, \"--number__rule-divider\")\n        }))), error ? null : helper);\n      }(), error));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_ref2, state) {\n      var min = _ref2.min,\n          max = _ref2.max,\n          value = _ref2.value;\n      var prevValue = state.prevValue;\n\n      if (useControlledStateWithValue && value === '' && prevValue !== '') {\n        return {\n          value: '',\n          prevValue: ''\n        };\n      } // If `useControlledStateWithValue` feature flag is on, do nothing here.\n      // Otherwise, do prop -> state sync with \"value capping\".\n\n\n      return useControlledStateWithValue || prevValue === value ? null : {\n        value: capMax(max, capMin(min, value)),\n        prevValue: value\n      };\n    }\n    /**\n     * The DOM node reference to the `<input>`.\n     * @type {HTMLInputElement}\n     */\n\n  }]);\n\n  return NumberInput;\n}(Component);\n\n_defineProperty(NumberInput, \"propTypes\", {\n  /**\n   * `true` to allow empty string.\n   */\n  allowEmpty: PropTypes.bool,\n\n  /**\n   * Provide a description that would be used to best describe the use case of the NumberInput component\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Specify an optional className to be applied to the wrapper node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Optional starting value for uncontrolled state\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Specify if the control should be disabled, or not\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide text that is used alongside the control label for additional help\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * Specify whether you want the underlying label to be visually hidden\n   */\n  hideLabel: PropTypes.bool,\n\n  /**\n   * Specify whether you want the steppers to be hidden\n   */\n  hideSteppers: PropTypes.bool,\n\n  /**\n   * Provide a description for up/down icons that can be read by screen readers\n   */\n  iconDescription: PropTypes.string.isRequired,\n\n  /**\n   * Specify a custom `id` for the input\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Specify if the currently value is invalid.\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Message which is displayed if the value is invalid.\n   */\n  invalidText: PropTypes.node,\n\n  /**\n   * `true` to use the mobile variant.\n   */\n  isMobile: deprecate(PropTypes.bool, \"The `isMobile` prop no longer needed as the default NumberInput styles are now identical to the mobile variant styles. This prop will be removed in the next major version of `carbon-components-react`\"),\n\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: PropTypes.node,\n\n  /**\n   * `true` to use the light version.\n   */\n  light: PropTypes.bool,\n\n  /**\n   * The maximum value.\n   */\n  max: PropTypes.number,\n\n  /**\n   * The minimum value.\n   */\n  min: PropTypes.number,\n\n  /**\n   * The new value is available in 'imaginaryTarget.value'\n   * i.e. to get the value: evt.imaginaryTarget.value\n   *\n   * * _With_ `useControlledStateWithValue` feature flag, the signature of the event handler will be altered to provide additional context in the second parameter: `onChange(event, { value, direction })` where:\n   *   * `event` is the (React) raw event\n   *   * `value` is the new value\n   *   * `direction` tells you the button you hit is up button or down button\n   * * _Without_ this feature flag the event handler has `onChange(event, direction)` signature.\n   */\n  onChange: !useControlledStateWithValue ? PropTypes.func : requiredIfValueExists(PropTypes.func),\n\n  /**\n   * Provide an optional function to be called when the up/down button is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Specify if the component should be read-only\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Specify the size of the Number Input. Currently supports either `sm`, 'md' (default) or 'lg` as an option.\n   * TODO V11: remove `xl` (replaced with lg)\n   */\n  size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl']),\n\n  /**\n   * Specify how much the valus should increase/decrease upon clicking on up/down button\n   */\n  step: PropTypes.number,\n\n  /**\n   * Provide custom text for the component for each translation id\n   */\n  translateWithId: PropTypes.func.isRequired,\n\n  /**\n   * Specify the value of the input\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n});\n\n_defineProperty(NumberInput, \"defaultProps\", {\n  disabled: false,\n  hideLabel: false,\n  iconDescription: 'choose a number',\n  step: 1,\n  invalid: false,\n  invalidText: 'Provide invalidText',\n  warn: false,\n  warnText: '',\n  ariaLabel: 'Numeric input field with increment and decrement buttons',\n  helperText: '',\n  light: false,\n  allowEmpty: false,\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n});\n\nexport { NumberInput };\nexport default (function () {\n  var forwardRef = function forwardRef(props, ref) {\n    return /*#__PURE__*/React.createElement(NumberInput, _extends({}, props, {\n      innerRef: ref\n    }));\n  };\n\n  forwardRef.displayName = 'NumberInput';\n  return /*#__PURE__*/React.forwardRef(forwardRef);\n})();","map":null,"metadata":{},"sourceType":"module"}