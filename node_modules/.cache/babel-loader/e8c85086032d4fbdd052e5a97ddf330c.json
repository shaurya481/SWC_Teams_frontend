{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React, { useState, useRef } from 'react';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nimport { selectorTabbable } from '../../internal/keyboard/navigation';\nimport useIsomorphicEffect from '../../internal/useIsomorphicEffect';\nvar prefix = settings.prefix;\n/**\n * Determine if the node within the provided ref contains content that is tabbable.\n */\n\nfunction useTabbableContent(ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasTabbableContent = _useState2[0],\n      setHasTabbableContent = _useState2[1];\n\n  useIsomorphicEffect(function () {\n    if (ref.current) {\n      setHasTabbableContent(ref.current.querySelector(selectorTabbable));\n    }\n  });\n  return hasTabbableContent;\n}\n\nvar TabContent = function TabContent(props) {\n  var className = props.className,\n      selected = props.selected,\n      children = props.children,\n      other = _objectWithoutProperties(props, [\"className\", \"selected\", \"children\"]);\n\n  var tabContentClasses = classNames(\"\".concat(prefix, \"--tab-content\"), _defineProperty({}, className, className));\n  var ref = useRef(null);\n  var hasTabbableContent = useTabbableContent(ref);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"tabpanel\"\n  }, other, {\n    className: tabContentClasses,\n    selected: selected,\n    hidden: !selected,\n    ref: ref,\n    tabIndex: hasTabbableContent ? undefined : 0\n  }), children);\n};\n\nTabContent.propTypes = {\n  /**\n   * Pass in content to render inside of the TabContent\n   */\n  children: PropTypes.node,\n\n  /**\n   * Provide a className for the tab content container\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the TabContent is selected\n   */\n  selected: PropTypes.bool\n};\nTabContent.defaultProps = {\n  selected: false\n};\nexport default TabContent;","map":null,"metadata":{},"sourceType":"module"}