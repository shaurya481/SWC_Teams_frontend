{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { useRef, useLayoutEffect } from 'react';\nvar windowExists = typeof window !== \"undefined\";\n\nvar getScrollPosition = function getScrollPosition() {\n  if (!windowExists) {\n    return {\n      scrollX: -1,\n      scrollY: -1\n    };\n  } //\n\n\n  var _window = _objectSpread({}, window),\n      scrollX = _window.scrollX,\n      scrollY = _window.scrollY;\n\n  return {\n    scrollX: scrollX,\n    scrollY: scrollY\n  };\n};\n\nexport function useWindowScroll(effect, deps) {\n  var throttleInterval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var scrollPosition = useRef({});\n  var throttleTimeout = useRef(null);\n\n  var doGetScrollPosition = function doGetScrollPosition() {\n    var newVal = {\n      previous: scrollPosition.current,\n      current: getScrollPosition()\n    }; // call effect\n\n    effect(newVal);\n    scrollPosition.current = newVal.current;\n    throttleTimeout.current = null;\n  };\n\n  useLayoutEffect(function () {\n    var handleScroll = function handleScroll() {\n      if (throttleInterval) {\n        if (throttleTimeout.current === null) {\n          throttleTimeout.current = setTimeout(doGetScrollPosition, throttleInterval);\n        }\n      } else {\n        doGetScrollPosition();\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    doGetScrollPosition();\n    return function () {\n      return window.removeEventListener('scroll', handleScroll);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}","map":null,"metadata":{},"sourceType":"module"}