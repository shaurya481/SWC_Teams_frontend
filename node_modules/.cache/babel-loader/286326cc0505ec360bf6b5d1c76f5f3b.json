{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"backButtonText\", \"cancelButtonText\", \"children\", \"className\", \"hasToggle\", \"modalDangerButtonText\", \"modalDescription\", \"modalSecondaryButtonText\", \"modalTitle\", \"nextButtonText\", \"onClose\", \"onRequestSubmit\", \"submitButtonText\", \"toggleAriaLabel\", \"toggleLabelText\"];\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n/**\n * Copyright IBM Corp. 2021, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\nimport React, { useEffect, useCallback, useState } from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pkg } from '../../settings';\nimport { CREATE_FULL_PAGE_STEP } from './constants';\nimport uuidv4 from '../../global/js/utils/uuidv4'; // Carbon and package components we use.\n\nimport { Grid, ModalFooter, ProgressIndicator, ProgressStep, Toggle, ComposedModal, ModalHeader, ModalBody, Button } from 'carbon-components-react';\nimport { ActionSet } from '../ActionSet';\nvar blockClass = \"\".concat(pkg.prefix, \"--create-full-page\");\nvar componentName = 'CreateFullPage'; // Custom PropType validator which checks and ensures that the children property has no more than 4 nodes\n\nvar isValidChildren = function isValidChildren() {\n  return function (_ref) {\n    var children = _ref.children;\n    children.length > 1 && children.map(function (child) {\n      if (child && child.props && child.props.type !== CREATE_FULL_PAGE_STEP) {\n        throw new Error('Each child of Create Full Page is required to be a `CreateFullPageStep`. Please remove the HTML element, or wrap it around the `CreateFullPageStep` component.');\n      }\n\n      return;\n    });\n  };\n};\n\nexport var CreateFullPage = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var backButtonText = _ref2.backButtonText,\n      cancelButtonText = _ref2.cancelButtonText,\n      children = _ref2.children,\n      className = _ref2.className,\n      hasToggle = _ref2.hasToggle,\n      modalDangerButtonText = _ref2.modalDangerButtonText,\n      modalDescription = _ref2.modalDescription,\n      modalSecondaryButtonText = _ref2.modalSecondaryButtonText,\n      modalTitle = _ref2.modalTitle,\n      nextButtonText = _ref2.nextButtonText,\n      onClose = _ref2.onClose,\n      onRequestSubmit = _ref2.onRequestSubmit,\n      submitButtonText = _ref2.submitButtonText,\n      toggleAriaLabel = _ref2.toggleAriaLabel,\n      toggleLabelText = _ref2.toggleLabelText,\n      rest = _objectWithoutProperties(_ref2, _excluded);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      createFullPageActions = _useState2[0],\n      setCreateFullPageActions = _useState2[1];\n\n  var _useState3 = useState(1),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentStep = _useState4[0],\n      setCurrentStep = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isSubmitting = _useState6[0],\n      setIsSubmitting = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      modalIsOpen = _useState8[0],\n      setModalIsOpen = _useState8[1];\n\n  useEffect(function () {\n    var _getFullPageSteps;\n\n    var onUnmount = function onUnmount() {\n      setIsSubmitting(false);\n      onClose();\n    };\n\n    var handleOnRequestSubmit = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return onRequestSubmit();\n\n              case 3:\n                onUnmount();\n                _context.next = 10;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n                setIsSubmitting(false);\n                console.warn(\"\".concat(componentName, \" submit error: \").concat(_context.t0));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 6]]);\n      }));\n\n      return function handleOnRequestSubmit() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    var isSubmitDisabled = function isSubmitDisabled() {\n      var step = 0;\n      var submitDisabled = false;\n      var createFullPageSteps = getFullPageSteps();\n      createFullPageSteps.forEach(function (child) {\n        step++;\n\n        if (currentStep === step) {\n          submitDisabled = child.props.disableSubmit;\n        }\n      });\n      return submitDisabled;\n    };\n\n    var handleNext = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var createSteps;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                setIsSubmitting(true);\n                createSteps = getFullPageSteps();\n\n                if (!createSteps[currentStep - 1].props.onNext) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                _context2.prev = 3;\n                _context2.next = 6;\n                return createSteps[currentStep - 1].props.onNext();\n\n              case 6:\n                continueToNextStep();\n                _context2.next = 13;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n                setIsSubmitting(false);\n                console.warn(\"\".concat(componentName, \" onNext error: \").concat(_context2.t0));\n\n              case 13:\n                _context2.next = 16;\n                break;\n\n              case 15:\n                continueToNextStep();\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[3, 9]]);\n      }));\n\n      return function handleNext() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    var handleSubmit = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var createSteps;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                setIsSubmitting(true);\n                createSteps = getFullPageSteps(); // last step should have onNext as well\n\n                if (!createSteps[currentStep - 1].props.onNext) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                _context3.prev = 3;\n                _context3.next = 6;\n                return createSteps[currentStep - 1].props.onNext();\n\n              case 6:\n                _context3.next = 8;\n                return handleOnRequestSubmit();\n\n              case 8:\n                _context3.next = 14;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](3);\n                setIsSubmitting(false);\n                console.warn(\"\".concat(componentName, \" onNext error: \").concat(_context3.t0));\n\n              case 14:\n                _context3.next = 18;\n                break;\n\n              case 16:\n                _context3.next = 18;\n                return handleOnRequestSubmit();\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[3, 10]]);\n      }));\n\n      return function handleSubmit() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    if ((_getFullPageSteps = getFullPageSteps()) !== null && _getFullPageSteps !== void 0 && _getFullPageSteps.length) {\n      var createSteps = getFullPageSteps();\n      var total = createSteps.length;\n      var buttons = [];\n\n      if (total > 1) {\n        buttons.push({\n          label: backButtonText,\n          onClick: function onClick() {\n            return setCurrentStep(function (prev) {\n              return prev - 1;\n            });\n          },\n          kind: 'secondary',\n          disabled: currentStep === 1\n        });\n        buttons.push({\n          label: cancelButtonText,\n          onClick: function onClick() {\n            setModalIsOpen(true);\n          },\n          kind: 'ghost'\n        });\n        buttons.push({\n          label: currentStep < total ? nextButtonText : submitButtonText,\n          onClick: currentStep < total ? handleNext : handleSubmit,\n          disabled: isSubmitDisabled(),\n          kind: 'primary',\n          loading: isSubmitting,\n          className: \"\".concat(blockClass, \"__create-button\")\n        });\n        setCreateFullPageActions(buttons);\n      }\n    }\n  }, [getFullPageSteps, children, backButtonText, cancelButtonText, currentStep, onClose, nextButtonText, submitButtonText, onRequestSubmit, isSubmitting, modalIsOpen]);\n  useEffect(function () {\n    var createSteps = getFullPageSteps();\n    var total = createSteps.length;\n\n    if (total === 1) {\n      console.warn(\"\".concat(componentName, \": CreateFullPages with one step are not permitted. If you require only one step, please use either the CreateTearsheet, CreateSidePanel, or CreateModal components.\"));\n    }\n  }, [getFullPageSteps]);\n\n  var continueToNextStep = function continueToNextStep() {\n    setIsSubmitting(false);\n    setCurrentStep(function (prev) {\n      return prev + 1;\n    });\n  }; // returns an array of full page steps\n\n\n  var getFullPageSteps = useCallback(function () {\n    var steps = [];\n    var childrenArray = Array.isArray(children) ? children : [children];\n    childrenArray.forEach(function (child) {\n      if (isFullPageStep(child)) {\n        steps.push(child);\n      }\n    });\n    return steps;\n  }, [children]); // check if child is a full page step component\n\n  var isFullPageStep = function isFullPageStep(child) {\n    if (child && child.props && child.props.type === CREATE_FULL_PAGE_STEP) {\n      return true;\n    }\n\n    return false;\n  };\n\n  var renderProgressSteps = function renderProgressSteps(childrenElements) {\n    var childrenArray = Array.isArray(childrenElements) ? childrenElements : [childrenElements];\n    childrenArray = childrenArray.filter(function (child) {\n      return isFullPageStep(child);\n    });\n    return /*#__PURE__*/React.createElement(ProgressIndicator, {\n      currentIndex: currentStep - 1,\n      spaceEqually: true,\n      vertical: true,\n      className: \"\".concat(blockClass, \"__progress-indicator\")\n    }, childrenArray.map(function (child, stepIndex) {\n      return /*#__PURE__*/React.createElement(ProgressStep, {\n        label: child.props.title ? child.props.title : '',\n        key: stepIndex\n      });\n    }));\n  };\n\n  var renderChildren = function renderChildren(childrenElements) {\n    var step = 0;\n    var childrenArray = Array.isArray(childrenElements) ? childrenElements : [childrenElements];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, childrenArray.map(function (child, stepIndex) {\n      var _cx;\n\n      if (!isFullPageStep(child)) {\n        return child;\n      }\n\n      step++;\n      return /*#__PURE__*/React.cloneElement(child, {\n        className: cx(child.props.className, (_cx = {}, _defineProperty(_cx, \"\".concat(blockClass, \"__step--hidden-section\"), currentStep !== step), _defineProperty(_cx, \"\".concat(blockClass, \"__step--visible-section\"), currentStep === step), _cx)),\n        key: \"key_\".concat(stepIndex)\n      });\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    ref: ref,\n    className: cx(blockClass, className)\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__influencer\")\n  }, renderProgressSteps(children), hasToggle && /*#__PURE__*/React.createElement(Toggle, {\n    className: \"\".concat(blockClass, \"__influencer-toggle\"),\n    \"aria-label\": toggleAriaLabel,\n    id: \"toggle-\".concat(uuidv4()),\n    labelText: toggleLabelText\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__body\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__main\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(blockClass, \"__content\")\n  }, /*#__PURE__*/React.createElement(Grid, null, renderChildren(children))), /*#__PURE__*/React.createElement(ActionSet, {\n    className: \"\".concat(blockClass, \"__buttons\"),\n    actions: createFullPageActions,\n    size: \"max\"\n  }))), /*#__PURE__*/React.createElement(ComposedModal, {\n    size: \"sm\",\n    open: modalIsOpen\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    title: modalTitle\n  }), /*#__PURE__*/React.createElement(ModalBody, null, /*#__PURE__*/React.createElement(\"p\", null, modalDescription)), /*#__PURE__*/React.createElement(ModalFooter, null, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    kind: \"secondary\",\n    onClick: function onClick() {\n      setModalIsOpen(!modalIsOpen);\n    }\n  }, modalSecondaryButtonText), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    kind: \"danger\",\n    onClick: onClose\n  }, modalDangerButtonText))));\n}); // Return a placeholder if not released and not enabled by feature flag.\n\nCreateFullPage = pkg.checkComponentEnabled(CreateFullPage, componentName); // The display name of the component, used by React. Note that displayName\n// is used in preference to relying on function.name.\n\nCreateFullPage.displayName = componentName; // The types and DocGen commentary for the component props,\n// in alphabetical order (for consistency).\n// See https://www.npmjs.com/package/prop-types#usage.\n\nCreateFullPage.propTypes = {\n  /**\n   * The back button text\n   */\n  backButtonText: PropTypes.string.isRequired,\n\n  /**\n   * The cancel button text\n   */\n  cancelButtonText: PropTypes.string.isRequired,\n\n  /**\n   * The main content of the full page\n   */\n  children: isValidChildren(),\n\n  /**\n   * Provide an optional class to be applied to the containing node.\n   */\n  className: PropTypes.string,\n\n  /**\n   * An optional prop that provides a toggle element in the left side influencer panel\n   */\n  hasToggle: PropTypes.bool,\n\n  /**\n   * The primary 'danger' button text in the modal\n   */\n  modalDangerButtonText: PropTypes.string.isRequired,\n\n  /**\n   * The description located below the title in the modal\n   */\n  modalDescription: PropTypes.string,\n\n  /**\n   * The secondary button text in the modal\n   */\n  modalSecondaryButtonText: PropTypes.string.isRequired,\n\n  /**\n   * The title located in the header of the modal\n   */\n  modalTitle: PropTypes.string.isRequired,\n\n  /**\n   * The next button text\n   */\n  nextButtonText: PropTypes.string.isRequired,\n\n  /**\n   * An optional handler that is called when the user closes the full page (by\n   * clicking the secondary button, located in the modal, which triggers after\n   * clicking the ghost button in the modal\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Specify a handler for submitting the multi step full page (final step).\n   * This function can _optionally_ return a promise that is either resolved or rejected and the Createfull page will handle the submitting state of the create button.\n   */\n  onRequestSubmit: PropTypes.func.isRequired,\n\n  /**\n   * The submit button text\n   */\n  submitButtonText: PropTypes.string.isRequired,\n\n  /**\n   * The main title of the full page, displayed in the header area.\n   */\n  // title: isTitleRequired(),\n\n  /**\n   * The aria label applied to toggle element for accessibility purposes\n   */\n  toggleAriaLabel: PropTypes.string,\n\n  /**\n   * The text that will appear above the toggle element\n   */\n  toggleLabelText: PropTypes.string\n};","map":null,"metadata":{},"sourceType":"module"}