{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"alwaysRender\", \"children\", \"element\", \"neverRender\"];\n/**\n * Copyright IBM Corp. 2021, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\nimport React from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types'; // Examine a flat array of children to decide whether it is effectively empty.\n// If there are no children, or all the children are falsy, or all the non-falsy\n// children are themselves Wrap components that are empty, then return true.\n\nvar isEmpty = function isEmpty(children) {\n  var result = true;\n  React.Children.forEach(children, function (child) {\n    if (child) {\n      var _child$type, _child$props;\n\n      result && (result = (child === null || child === void 0 ? void 0 : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName) === 'Wrap' && isEmpty(child === null || child === void 0 ? void 0 : (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.children));\n    }\n  });\n  return result;\n};\n/**\n * A simple conditional wrapper that encloses its children in a <div> (or other\n * element if specified), passing any supplied attributes to the <div> (or other\n * element). The component renders nothing at all if there are no children or\n * the children are empty/falsy, or if all the non-falsy children are themselves\n * Wrap components that do not wish to render. This behavior can be overridden\n * by setting neverRender or alwaysRender to true. Note that if a ref is passed,\n * the ref.current will be set to the wrapper element if it renders, and will\n * remain undefined if it does not render.\n */\n\n\nexport var Wrap = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var alwaysRender = _ref.alwaysRender,\n      children = _ref.children,\n      Wrapper = _ref.element,\n      neverRender = _ref.neverRender,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return (neverRender || isEmpty(children)) && !alwaysRender ? null : /*#__PURE__*/React.createElement(Wrapper, _extends({}, rest, {\n    ref: ref\n  }), children);\n});\nWrap.displayName = 'Wrap';\nWrap.propTypes = {\n  /**\n   * Specify whether the wrapper element should render even if there are no\n   * children or the children are themselves empty wrappers. Useful if there\n   * are some conditions in which the wrapper element is still required. Note\n   * that this prop takes precedence over neverRender if both are set to true.\n   */\n  alwaysRender: PropTypes.bool,\n\n  /**\n   * The content of the wrapper element. If no children are supplied, or the\n   * resulting value(s) are falsy, or if all the non-falsy children are Wrap\n   * components that decide not to render, nothing will be rendered in the DOM.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The element name or component to use as a wrapper for the content.\n   */\n  element: PropTypes.elementType,\n\n  /**\n   * Specify whether nothing should be rendered even if there are children\n   * in the content. Useful if there are some circumstances in which the\n   * component should not render at all. Note that if alwaysRender is also\n   * set to true then it will take precedence and the wrapper element and\n   * content will be rendered.\n   */\n  neverRender: PropTypes.bool\n};\nWrap.defaultProps = {\n  element: 'div'\n};","map":null,"metadata":{},"sourceType":"module"}