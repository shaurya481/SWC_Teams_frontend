{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { isForwardRef } from 'react-is';\nimport debounce from 'lodash.debounce';\nimport classNames from 'classnames';\nimport { Information16 as Information } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nimport FloatingMenu, { DIRECTION_LEFT, DIRECTION_TOP, DIRECTION_RIGHT, DIRECTION_BOTTOM } from '../../internal/FloatingMenu';\nimport ClickListener from '../../internal/ClickListener';\nimport mergeRefs from '../../tools/mergeRefs';\nimport { keys, matches as keyDownMatch } from '../../internal/keyboard';\nimport isRequiredOneOf from '../../prop-types/isRequiredOneOf';\nimport requiredIfValueExists from '../../prop-types/requiredIfValueExists';\nimport { useControlledStateWithValue } from '../../internal/FeatureFlags';\nvar prefix = settings.prefix;\n/**\n * @param {Element} menuBody The menu body with the menu arrow.\n * @param {string} menuDirection Where the floating menu menu should be placed relative to the trigger button.\n * @returns {FloatingMenu~offset} The adjustment of the floating menu position, upon the position of the menu arrow.\n * @private\n */\n\nvar getMenuOffset = function getMenuOffset(menuBody, menuDirection) {\n  var _DIRECTION_LEFT$DIREC, _DIRECTION_LEFT$DIREC2;\n\n  var arrowStyle = menuBody.ownerDocument.defaultView.getComputedStyle(menuBody, ':before');\n  var arrowPositionProp = (_DIRECTION_LEFT$DIREC = {}, _defineProperty(_DIRECTION_LEFT$DIREC, DIRECTION_LEFT, 'right'), _defineProperty(_DIRECTION_LEFT$DIREC, DIRECTION_TOP, 'bottom'), _defineProperty(_DIRECTION_LEFT$DIREC, DIRECTION_RIGHT, 'left'), _defineProperty(_DIRECTION_LEFT$DIREC, DIRECTION_BOTTOM, 'top'), _DIRECTION_LEFT$DIREC)[menuDirection];\n  var menuPositionAdjustmentProp = (_DIRECTION_LEFT$DIREC2 = {}, _defineProperty(_DIRECTION_LEFT$DIREC2, DIRECTION_LEFT, 'left'), _defineProperty(_DIRECTION_LEFT$DIREC2, DIRECTION_TOP, 'top'), _defineProperty(_DIRECTION_LEFT$DIREC2, DIRECTION_RIGHT, 'left'), _defineProperty(_DIRECTION_LEFT$DIREC2, DIRECTION_BOTTOM, 'top'), _DIRECTION_LEFT$DIREC2)[menuDirection];\n  var values = [arrowPositionProp, 'border-bottom-width'].reduce(function (o, name) {\n    return _objectSpread(_objectSpread({}, o), {}, _defineProperty({}, name, Number((/^([\\d-]+)px$/.exec(arrowStyle.getPropertyValue(name)) || [])[1])));\n  }, {});\n  values[arrowPositionProp] = values[arrowPositionProp] || -6; // IE, etc.\n\n  if (Object.keys(values).every(function (name) {\n    return !isNaN(values[name]);\n  })) {\n    var arrowPosition = values[arrowPositionProp],\n        borderBottomWidth = values['border-bottom-width'];\n    return _defineProperty({\n      left: 0,\n      top: 0\n    }, menuPositionAdjustmentProp, Math.sqrt(Math.pow(borderBottomWidth, 2) * 2) - arrowPosition);\n  }\n};\n\nvar Tooltip = /*#__PURE__*/function (_Component) {\n  _inherits(Tooltip, _Component);\n\n  var _super = _createSuper(Tooltip);\n\n  function Tooltip(props) {\n    var _this;\n\n    _classCallCheck(this, Tooltip);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"_tooltipEl\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_triggerRef\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"_tooltipId\", _this.props.id || _this.props.tooltipId || \"__carbon-tooltip_\".concat(Math.random().toString(36).substr(2)));\n\n    _defineProperty(_assertThisInitialized(_this), \"_tooltipDismissed\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleUserInputOpenClose\", function (event, _ref2) {\n      var open = _ref2.open;\n\n      if (_this.isControlled) {\n        // Callback to the parent to let them decide what to do\n        _this.props.onChange(event, {\n          open: open\n        });\n\n        return;\n      } // capture tooltip body element before it is removed from the DOM\n\n\n      var tooltipBody = _this._tooltipEl;\n\n      _this.setState({\n        open: open\n      }, function () {\n        if (_this.props.onChange) {\n          _this.props.onChange(event, {\n            open: open\n          });\n        }\n\n        if (!open && tooltipBody && tooltipBody.id === _this._tooltipId) {\n          _this._tooltipDismissed = true;\n          var currentActiveNode = event === null || event === void 0 ? void 0 : event.relatedTarget;\n\n          if (!currentActiveNode && document.activeElement === document.body && (event === null || event === void 0 ? void 0 : event.type) !== 'click') {\n            var _this$_triggerRef;\n\n            (_this$_triggerRef = _this._triggerRef) === null || _this$_triggerRef === void 0 ? void 0 : _this$_triggerRef.current.focus();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleFocus\", function (state, evt) {\n      var currentTarget = evt.currentTarget,\n          relatedTarget = evt.relatedTarget;\n\n      if (currentTarget !== relatedTarget) {\n        _this._tooltipDismissed = false;\n      }\n\n      if (state === 'over') {\n        if (!_this._tooltipDismissed) {\n          _this._handleUserInputOpenClose(evt, {\n            open: true\n          });\n        }\n\n        _this._tooltipDismissed = false;\n      } else if (state !== 'out') {\n        // Note: SVGElement in IE11 does not have `.contains()`\n        var triggerEl = _this._triggerRef.current;\n\n        var shouldPreventClose = relatedTarget && (triggerEl && (triggerEl === null || triggerEl === void 0 ? void 0 : triggerEl.contains(relatedTarget)) || _this._tooltipEl && _this._tooltipEl.contains(relatedTarget));\n\n        if (!shouldPreventClose) {\n          _this._handleUserInputOpenClose(evt, {\n            open: false\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_debouncedHandleFocus\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_getTarget\", function () {\n      var triggerEl = _this._triggerRef.current;\n      return triggerEl && triggerEl.closest('[data-floating-menu-container]') || document.body;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMouse\", function (evt) {\n      evt.persist();\n      var state = {\n        focus: 'over',\n        blur: 'out',\n        click: 'click'\n      }[evt.type];\n      var hadContextMenu = _this._hasContextMenu;\n\n      if (evt.type === 'click' || evt.type === 'contextmenu') {\n        _this._hasContextMenu = evt.type === 'contextmenu';\n      }\n\n      if (_this._hasContextMenu) {\n        _this._handleUserInputOpenClose(evt, {\n          open: false\n        });\n\n        return;\n      }\n\n      if (state === 'click') {\n        evt.stopPropagation();\n        evt.preventDefault();\n        var shouldOpen = _this.isControlled ? !_this.props.open : !_this.state.open;\n\n        _this._handleUserInputOpenClose(evt, {\n          open: shouldOpen\n        });\n      } else if (state && (state !== 'out' || !hadContextMenu)) {\n        var _assertThisInitialize;\n\n        (_assertThisInitialize = _assertThisInitialized(_this)) === null || _assertThisInitialize === void 0 ? void 0 : _assertThisInitialize._debouncedHandleFocus(state, evt);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClickOutside\", function (evt) {\n      var shouldPreventClose = evt && evt.target && _this._tooltipEl && _this._tooltipEl.contains(evt.target);\n\n      if (!shouldPreventClose && _this.state.open) {\n        _this._handleUserInputOpenClose(evt, {\n          open: false\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyPress\", function (event) {\n      if (keyDownMatch(event, [keys.Escape])) {\n        event.stopPropagation();\n\n        _this._handleUserInputOpenClose(event, {\n          open: false\n        });\n      }\n\n      if (keyDownMatch(event, [keys.Enter, keys.Space])) {\n        event.stopPropagation();\n        event.preventDefault();\n        var shouldOpen = _this.isControlled ? !_this.props.open : !_this.state.open;\n\n        _this._handleUserInputOpenClose(event, {\n          open: shouldOpen\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEscKeyPress\", function (event) {\n      var _ref3 = _this.isControlled ? _this.props : _this.state,\n          open = _ref3.open;\n\n      if (open && keyDownMatch(event, [keys.Escape])) {\n        event.stopPropagation();\n        return _this._handleUserInputOpenClose(event, {\n          open: false\n        });\n      }\n    });\n\n    _this.isControlled = props.open !== undefined;\n\n    if (useControlledStateWithValue && _this.isControlled) {\n      // Skips the logic of setting initial state if this component is controlled\n      return _possibleConstructorReturn(_this);\n    }\n\n    var _open = useControlledStateWithValue ? props.defaultOpen : props.open;\n\n    _this.state = {\n      open: _open\n    };\n    return _this;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this._debouncedHandleFocus) {\n        this._debouncedHandleFocus = debounce(this._handleFocus, 200);\n      }\n\n      document.addEventListener('keydown', this.handleEscKeyPress, false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._debouncedHandleFocus) {\n        this._debouncedHandleFocus.cancel();\n\n        this._debouncedHandleFocus = null;\n      }\n\n      document.removeEventListener('keydown', this.handleEscKeyPress, false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames,\n          _this2 = this;\n\n      var _this$props = this.props,\n          _this$props$triggerId = _this$props.triggerId,\n          triggerId = _this$props$triggerId === void 0 ? this.triggerId = this.triggerId || \"__carbon-tooltip-trigger_\".concat(Math.random().toString(36).substr(2)) : _this$props$triggerId,\n          tooltipBodyId = _this$props.tooltipBodyId,\n          children = _this$props.children,\n          className = _this$props.className,\n          triggerClassName = _this$props.triggerClassName,\n          direction = _this$props.direction,\n          align = _this$props.align,\n          focusTrap = _this$props.focusTrap,\n          triggerText = _this$props.triggerText,\n          showIcon = _this$props.showIcon,\n          iconName = _this$props.iconName,\n          iconDescription = _this$props.iconDescription,\n          IconCustomElement = _this$props.renderIcon,\n          menuOffset = _this$props.menuOffset,\n          _this$props$tabIndex = _this$props.tabIndex,\n          tabIndex = _this$props$tabIndex === void 0 ? 0 : _this$props$tabIndex,\n          ref = _this$props.innerRef,\n          selectorPrimaryFocus = _this$props.selectorPrimaryFocus,\n          tooltipId = _this$props.tooltipId,\n          other = _objectWithoutProperties(_this$props, [\"triggerId\", \"tooltipBodyId\", \"children\", \"className\", \"triggerClassName\", \"direction\", \"align\", \"focusTrap\", \"triggerText\", \"showIcon\", \"iconName\", \"iconDescription\", \"renderIcon\", \"menuOffset\", \"tabIndex\", \"innerRef\", \"selectorPrimaryFocus\", \"tooltipId\"]);\n\n      var _ref4 = this.isControlled ? this.props : this.state,\n          open = _ref4.open;\n\n      var tooltipClasses = classNames(\"\".concat(prefix, \"--tooltip\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--tooltip--shown\"), open), _defineProperty(_classNames, \"\".concat(prefix, \"--tooltip--\").concat(direction), direction), _defineProperty(_classNames, \"\".concat(prefix, \"--tooltip--align-\").concat(align), align), _classNames), className);\n      var triggerClasses = classNames(\"\".concat(prefix, \"--tooltip__label\"), triggerClassName);\n      var refProp = mergeRefs(this._triggerRef, ref);\n      var iconProperties = {\n        name: iconName,\n        role: null,\n        description: null\n      };\n\n      var properties = _objectSpread({\n        role: 'button',\n        tabIndex: tabIndex,\n        onClick: this.handleMouse,\n        onContextMenu: this.handleMouse,\n        onKeyDown: this.handleKeyPress,\n        onMouseOver: this.handleMouse,\n        onMouseOut: this.handleMouse,\n        onFocus: this.handleMouse,\n        onBlur: this.handleMouse,\n        'aria-controls': !open ? undefined : this._tooltipId,\n        'aria-expanded': open,\n        'aria-describedby': open ? this._tooltipId : null\n      }, triggerText ? {\n        'aria-labelledby': triggerId\n      } : {\n        'aria-label': iconDescription\n      });\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ClickListener, {\n        onClickOutside: this.handleClickOutside\n      }, showIcon ? /*#__PURE__*/React.createElement(\"div\", {\n        id: triggerId,\n        className: triggerClasses\n      }, triggerText, /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: \"\".concat(prefix, \"--tooltip__trigger\")\n      }, properties, {\n        ref: refProp,\n        \"aria-describedby\": tooltipBodyId\n      }), /*#__PURE__*/React.createElement(IconCustomElement, iconProperties))) : /*#__PURE__*/React.createElement(\"div\", _extends({\n        id: triggerId,\n        className: triggerClasses,\n        ref: refProp\n      }, properties, {\n        \"aria-describedby\": tooltipBodyId\n      }), triggerText)), open && /*#__PURE__*/React.createElement(FloatingMenu, {\n        focusTrap: focusTrap,\n        selectorPrimaryFocus: this.props.selectorPrimaryFocus,\n        target: this._getTarget,\n        triggerRef: this._triggerRef,\n        menuDirection: direction,\n        menuOffset: menuOffset,\n        menuRef: function menuRef(node) {\n          _this2._tooltipEl = node;\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: tooltipClasses\n      }, other, {\n        id: this._tooltipId,\n        \"data-floating-menu-direction\": direction,\n        onMouseOver: this.handleMouse,\n        onMouseOut: this.handleMouse,\n        onFocus: this.handleMouse,\n        onBlur: this.handleMouse,\n        onContextMenu: this.handleMouse\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"\".concat(prefix, \"--tooltip__caret\")\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--tooltip__content\"),\n        role: \"dialog\"\n      }, children))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_ref5, state) {\n      var open = _ref5.open;\n      /**\n       * so that tooltip can be controlled programmatically through this `open` prop\n       */\n\n      var prevOpen = state.prevOpen;\n      return prevOpen === open ? null : {\n        open: open,\n        prevOpen: open\n      };\n    }\n  }]);\n\n  return Tooltip;\n}(Component);\n\n_defineProperty(Tooltip, \"propTypes\", _objectSpread({\n  /**\n   * Specify the alignment (to the trigger button) of the tooltip.\n   * Can be one of: start, center, or end.\n   */\n  align: PropTypes.oneOf(['start', 'center', 'end']),\n\n  /**\n   * Contents to put into the tooltip.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The CSS class names of the tooltip.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Optional starting value for uncontrolled state\n   */\n  defaultOpen: PropTypes.bool,\n\n  /**\n   * Where to put the tooltip, relative to the trigger UI.\n   */\n  direction: PropTypes.oneOf(['bottom', 'top', 'left', 'right']),\n\n  /**\n   * Enable or disable focus trap behavior\n   */\n  focusTrap: PropTypes.bool,\n\n  /**\n   * The name of the default tooltip icon.\n   */\n  iconName: PropTypes.string,\n\n  /**\n   * The adjustment of the tooltip position.\n   */\n  menuOffset: PropTypes.oneOfType([PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number\n  }), PropTypes.func]),\n\n  /**\n   * * the signature of the event handler will be:\n   * * `onChange(event, { open })` where:\n   *   * `event` is the (React) raw event\n   *   * `open` is the new value\n   */\n  onChange: !useControlledStateWithValue ? PropTypes.func : requiredIfValueExists(PropTypes.func),\n\n  /**\n   * Open/closed state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The callback function to optionally render the icon element.\n   * It should be a component with React.forwardRef().\n   */\n  renderIcon: function renderIcon(props, propName, componentName) {\n    if (props[propName] == undefined) {\n      return;\n    }\n\n    var RefForwardingComponent = props[propName];\n\n    if (!isForwardRef( /*#__PURE__*/React.createElement(RefForwardingComponent, null))) {\n      return new Error(\"Invalid value of prop '\".concat(propName, \"' supplied to '\").concat(componentName, \"',\\n                          it should be created/wrapped with React.forwardRef() to have a ref and access the proper\\n                          DOM node of the element to calculate its position in the viewport.\"));\n    }\n  },\n\n  /**\n   * Specify a CSS selector that matches the DOM element that should\n   * be focused when the Tooltip opens\n   */\n  selectorPrimaryFocus: PropTypes.string,\n\n  /**\n   * `true` to show the default tooltip icon.\n   */\n  showIcon: PropTypes.bool,\n\n  /**\n   * Optional prop to specify the tabIndex of the Tooltip\n   */\n  tabIndex: PropTypes.number,\n\n  /**\n   * The ID of the tooltip body content.\n   */\n  tooltipBodyId: PropTypes.string,\n\n  /**\n   * The ID of the tooltip content.\n   */\n  tooltipId: PropTypes.string,\n\n  /**\n   * The CSS class names of the trigger UI.\n   */\n  triggerClassName: PropTypes.string,\n\n  /**\n   * The ID of the trigger button.\n   */\n  triggerId: PropTypes.string\n}, isRequiredOneOf({\n  /**\n   * The content to put into the trigger UI, except the (default) tooltip icon.\n   */\n  triggerText: PropTypes.node,\n\n  /**\n   * The description of the default tooltip icon, to be put in its SVG 'aria-label' and 'alt' .\n   */\n  iconDescription: PropTypes.string\n})));\n\n_defineProperty(Tooltip, \"defaultProps\", {\n  align: 'center',\n  direction: DIRECTION_BOTTOM,\n  focusTrap: true,\n  renderIcon: Information,\n  showIcon: true,\n  triggerText: null,\n  menuOffset: getMenuOffset,\n  selectorPrimaryFocus: '[data-tooltip-primary-focus]'\n});\n\nexport { Tooltip };\nexport default (function () {\n  var forwardRef = function forwardRef(props, ref) {\n    return /*#__PURE__*/React.createElement(Tooltip, _extends({}, props, {\n      innerRef: ref\n    }));\n  };\n\n  forwardRef.displayName = 'Tooltip';\n  return /*#__PURE__*/React.forwardRef(forwardRef);\n})();","map":null,"metadata":{},"sourceType":"module"}