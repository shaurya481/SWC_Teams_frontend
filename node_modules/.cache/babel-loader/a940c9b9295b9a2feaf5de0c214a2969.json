{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.elementOrParentIsFloatingMenu = elementOrParentIsFloatingMenu;\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash.findlast\"));\n\nvar _carbonComponents = require(\"carbon-components\");\n\nvar _navigation = require(\"./keyboard/navigation\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright IBM Corp. 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar prefix = _carbonComponents.settings.prefix;\n/**\n * @param {Node} node A DOM node.\n * @param {string[]} selectorsFloatingMenus The CSS selectors that matches floating menus.\n * @returns {boolean} `true` of the given `node` is in a floating menu.\n */\n\nfunction elementOrParentIsFloatingMenu(node) {\n  var selectorsFloatingMenus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [\".\".concat(prefix, \"--overflow-menu-options\"), \".\".concat(prefix, \"--tooltip\"), '.flatpickr-calendar'];\n\n  if (node && typeof node.closest === 'function') {\n    return selectorsFloatingMenus.some(function (selector) {\n      return node.closest(selector);\n    });\n  }\n}\n/**\n * Ensures the focus is kept in the given `modalNode`, implementing \"focus-wrap\" behavior.\n * @param {object} options The options.\n * @param {Node} options.modalNode The DOM node of the inner modal.\n * @param {Node} options.startTrapNode The DOM node of the focus sentinel the is placed earlier next to `modalNode`.\n * @param {Node} options.endTrapNode The DOM node of the focus sentinel the is placed next to `modalNode`.\n * @param {Node} options.currentActiveNode The DOM node that has focus.\n * @param {Node} options.oldActiveNode The DOM node that previously had focus.\n * @param {Node} [options.selectorsFloatingMenus] The CSS selectors that matches floating menus.\n */\n\n\nfunction wrapFocus(_ref) {\n  var bodyNode = _ref.bodyNode,\n      startTrapNode = _ref.startTrapNode,\n      endTrapNode = _ref.endTrapNode,\n      currentActiveNode = _ref.currentActiveNode,\n      oldActiveNode = _ref.oldActiveNode,\n      selectorsFloatingMenus = _ref.selectorsFloatingMenus;\n\n  if (bodyNode && currentActiveNode && oldActiveNode && !bodyNode.contains(currentActiveNode) && !elementOrParentIsFloatingMenu(currentActiveNode, selectorsFloatingMenus)) {\n    var comparisonResult = oldActiveNode.compareDocumentPosition(currentActiveNode);\n\n    if (currentActiveNode === startTrapNode || comparisonResult & _navigation.DOCUMENT_POSITION_BROAD_PRECEDING) {\n      var tabbable = (0, _lodash.default)(bodyNode.querySelectorAll(_navigation.selectorTabbable), function (elem) {\n        return Boolean(elem.offsetParent);\n      });\n\n      if (tabbable) {\n        tabbable.focus();\n      } else if (bodyNode !== oldActiveNode) {\n        bodyNode.focus();\n      }\n    } else if (currentActiveNode === endTrapNode || comparisonResult & _navigation.DOCUMENT_POSITION_BROAD_FOLLOWING) {\n      var _tabbable = Array.prototype.find.call(bodyNode.querySelectorAll(_navigation.selectorTabbable), function (elem) {\n        return Boolean(elem.offsetParent);\n      });\n\n      if (_tabbable) {\n        _tabbable.focus();\n      } else if (bodyNode !== oldActiveNode) {\n        bodyNode.focus();\n      }\n    }\n  }\n}\n\nvar _default = wrapFocus;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}