{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _carbonComponents = require(\"carbon-components\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _AriaPropTypes = require(\"../../prop-types/AriaPropTypes\");\n\nvar _Button = _interopRequireDefault(require(\"../Button\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar prefix = _carbonComponents.settings.prefix;\n/**\n * HeaderGlobalAction is used as a part of the `HeaderGlobalBar`. It is\n * essentially an Icon Button with an additional state to indicate whether it is\n * \"active\". The active state comes from when a user clicks on the global action\n * which should trigger a panel to appear.\n *\n * Note: children passed to this component should be an Icon.\n */\n\nvar HeaderGlobalAction = /*#__PURE__*/_react.default.forwardRef(function HeaderGlobalAction(_ref, ref) {\n  var _cx;\n\n  var ariaLabel = _ref['aria-label'],\n      ariaLabelledBy = _ref['aria-labelledby'],\n      children = _ref.children,\n      customClassName = _ref.className,\n      onClick = _ref.onClick,\n      isActive = _ref.isActive,\n      tooltipAlignment = _ref.tooltipAlignment,\n      rest = _objectWithoutProperties(_ref, [\"aria-label\", \"aria-labelledby\", \"children\", \"className\", \"onClick\", \"isActive\", \"tooltipAlignment\"]);\n\n  var className = (0, _classnames.default)((_cx = {}, _defineProperty(_cx, customClassName, !!customClassName), _defineProperty(_cx, \"\".concat(prefix, \"--header__action\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--header__action--active\"), isActive), _cx));\n  var accessibilityLabel = {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy\n  };\n  return /*#__PURE__*/_react.default.createElement(_Button.default, _extends({}, rest, accessibilityLabel, {\n    className: className,\n    onClick: onClick,\n    type: \"button\",\n    hasIconOnly: true,\n    iconDescription: ariaLabel,\n    tooltipPosition: \"bottom\",\n    tooltipAlignment: tooltipAlignment,\n    ref: ref\n  }), children);\n});\n\nHeaderGlobalAction.propTypes = _objectSpread(_objectSpread({}, _AriaPropTypes.AriaLabelPropType), {}, {\n  /**\n   * Provide a custom icon for this global action\n   */\n  children: _propTypes.default.node.isRequired,\n\n  /**\n   * Optionally provide a custom class name that is applied to the underlying\n   * button\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * Specify whether the action is currently active\n   */\n  isActive: _propTypes.default.bool,\n\n  /**\n   * Optionally provide an onClick handler that is called when the underlying\n   * button fires it's onclick event\n   */\n  onClick: _propTypes.default.func,\n\n  /**\n   * Specify the alignment of the tooltip to the icon-only button.\n   * Can be one of: start, center, or end.\n   */\n  tooltipAlignment: _propTypes.default.oneOf(['start', 'center', 'end'])\n});\nHeaderGlobalAction.displayName = 'HeaderGlobalAction';\nvar _default = HeaderGlobalAction;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}