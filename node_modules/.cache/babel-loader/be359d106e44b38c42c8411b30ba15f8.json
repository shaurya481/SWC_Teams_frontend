{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { settings } from 'carbon-components';\nimport { CaretRight16, CaretLeft16 } from '@carbon/icons-react';\nimport Button from '../../Button';\nimport Select from '../../Select';\nimport SelectItem from '../../SelectItem';\nvar prefix = settings.prefix;\n\nfunction Pagination(_ref) {\n  var backwardText = _ref.backwardText,\n      children = _ref.children,\n      className = _ref.className,\n      disabled = _ref.disabled,\n      forwardText = _ref.forwardText,\n      id = _ref.id,\n      initialPage = _ref.initialPage,\n      itemsPerPageText = _ref.itemsPerPageText,\n      itemRangeText = _ref.itemRangeText,\n      itemText = _ref.itemText,\n      pageRangeText = _ref.pageRangeText,\n      pageSize = _ref.pageSize,\n      pageSizes = _ref.pageSizes,\n      pageText = _ref.pageText,\n      pagesUnknown = _ref.pagesUnknown,\n      totalItems = _ref.totalItems,\n      other = _objectWithoutProperties(_ref, [\"backwardText\", \"children\", \"className\", \"disabled\", \"forwardText\", \"id\", \"initialPage\", \"itemsPerPageText\", \"itemRangeText\", \"itemText\", \"pageRangeText\", \"pageSize\", \"pageSizes\", \"pageText\", \"pagesUnknown\", \"totalItems\"]);\n\n  var _useState = useState(initialPage),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentPage = _useState2[0],\n      setCurrentPage = _useState2[1];\n\n  var _useState3 = useState(pageSize),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentPageSize = _useState4[0],\n      setCurrentPageSize = _useState4[1];\n\n  var totalPages = totalItems ? Math.max(Math.ceil(totalItems / currentPageSize), 1) : undefined;\n  var backButtonDisabled = disabled || currentPage === 1;\n  var forwardButtonDisabled = disabled || currentPage === totalPages;\n\n  function onSetPage(newPage) {\n    setCurrentPage(Number(newPage));\n  }\n\n  var namespace = \"\".concat(prefix, \"--unstable-pagination\");\n  return /*#__PURE__*/React.createElement(\"section\", _extends({\n    className: classnames(namespace, className)\n  }, other), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(namespace, \"__left\")\n  }, pageSizes && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    id: \"\".concat(namespace, \"__page-sizer__counter-\").concat(id),\n    className: \"\".concat(namespace, \"__text\"),\n    htmlFor: \"\".concat(namespace, \"__page-sizer__input-\").concat(id)\n  }, itemsPerPageText), /*#__PURE__*/React.createElement(Select, {\n    id: \"\".concat(namespace, \"__page-sizer__input-\").concat(id),\n    className: \"\".concat(namespace, \"__page-sizer\"),\n    labelText: \"\",\n    hideLabel: true,\n    noLabel: true,\n    inline: true,\n    onChange: function onChange(event) {\n      return setCurrentPageSize(Number(event.target.value));\n    },\n    value: currentPageSize\n  }, pageSizes.map(function (size) {\n    return /*#__PURE__*/React.createElement(SelectItem, {\n      key: size,\n      value: size,\n      text: String(size)\n    });\n  }))), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(namespace, \"__text\")\n  }, totalItems && !pagesUnknown && itemRangeText(Math.min(currentPageSize * (currentPage - 1) + 1, totalItems), Math.min(currentPage * currentPageSize, totalItems), totalItems), totalItems && pagesUnknown && itemText(currentPageSize * (currentPage - 1) + 1, currentPage * currentPageSize), !totalItems && itemText(currentPageSize * (currentPage - 1) + 1, currentPage * currentPageSize))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(namespace, \"__right\")\n  }, children && totalItems && children({\n    currentPage: currentPage,\n    currentPageSize: currentPageSize,\n    onSetPage: onSetPage,\n    totalPages: totalPages\n  }), children && totalItems && !pagesUnknown && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(namespace, \"__text\")\n  }, pageRangeText('', totalPages)), children && !totalItems && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(namespace, \"__text\")\n  }, pageText(currentPage)), !children && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(namespace, \"__text\")\n  }, !totalItems ? pageText(currentPage) : pageRangeText(currentPage, totalPages)), /*#__PURE__*/React.createElement(Button, {\n    className: classnames(\"\".concat(namespace, \"__button\"), \"\".concat(namespace, \"__button--backward\"), _defineProperty({}, \"\".concat(namespace, \"__button--no-index\"), backButtonDisabled)),\n    onClick: function onClick() {\n      return setCurrentPage(currentPage - 1);\n    },\n    disabled: backButtonDisabled,\n    hasIconOnly: true,\n    renderIcon: CaretLeft16,\n    tooltipAlignment: \"center\",\n    tooltipPosition: \"top\",\n    iconDescription: backwardText\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: classnames(\"\".concat(namespace, \"__button\"), \"\".concat(namespace, \"__button--forward\"), _defineProperty({}, \"\".concat(namespace, \"__button--no-index\"), forwardButtonDisabled)),\n    onClick: function onClick() {\n      return setCurrentPage(currentPage + 1);\n    },\n    disabled: forwardButtonDisabled,\n    hasIconOnly: true,\n    renderIcon: CaretRight16,\n    tooltipAlignment: \"center\",\n    tooltipPosition: \"top\",\n    iconDescription: forwardText\n  })));\n}\n\nPagination.propTypes = {\n  /**\n   * The description for the backward icon.\n   */\n  backwardText: PropTypes.string,\n\n  /**\n   * The children of the pagination component.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * Extra classes to add.\n   */\n  className: PropTypes.string,\n\n  /**\n   * `true` if the backward/forward buttons should be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The description for the forward icon.\n   */\n  forwardText: PropTypes.string,\n\n  /** The unique ID of this component instance. */\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The initial active page when the component is first mounted.\n   */\n  initialPage: PropTypes.number,\n\n  /**\n   * The function returning a translatable text showing where the current page is,\n   * in a manner of the range of items.\n   */\n  itemRangeText: PropTypes.func,\n\n  /**\n   * A variant of `itemRangeText`, used if the total number of items is unknown.\n   */\n  itemText: PropTypes.func,\n\n  /**\n   * The translatable text indicating the number of items per page.\n   */\n  itemsPerPageText: PropTypes.string,\n\n  /**\n   * The function returning a translatable text showing where the current page is,\n   * in a manner of the total number of pages.\n   */\n  pageRangeText: PropTypes.func,\n\n  /**\n   * The number dictating how many items a page contains.\n   */\n  pageSize: PropTypes.number,\n\n  /**\n   * The choices for `pageSize`.\n   */\n  pageSizes: PropTypes.arrayOf(PropTypes.number),\n\n  /**\n   * The translatable text showing the current page.\n   */\n  pageText: PropTypes.func,\n\n  /**\n   * `true` if total number of pages is unknown.\n   */\n  pagesUnknown: PropTypes.bool,\n\n  /**\n   * The total number of items.\n   * You need to provide total items to calculate total page,\n   * which is required by a child like the `PageSelector`\n   * to know how many pages to display.\n   */\n  totalItems: PropTypes.number\n};\nPagination.defaultProps = {\n  backwardText: 'Previous page',\n  className: null,\n  children: undefined,\n  disabled: false,\n  forwardText: 'Next page',\n  id: 1,\n  itemsPerPageText: 'Items per page:',\n  itemRangeText: function itemRangeText(min, max, total) {\n    return \"\".concat(min, \"\\u2013\").concat(max, \" of \").concat(total, \" items\");\n  },\n  itemText: function itemText(min, max) {\n    return \"\".concat(min, \"\\u2013\").concat(max, \" items\");\n  },\n  initialPage: 1,\n  pageRangeText: function pageRangeText(current, total) {\n    return \"\".concat(current, \" of \").concat(total, \" pages\");\n  },\n  pageSize: 10,\n  pageSizes: undefined,\n  pageText: function pageText(page) {\n    return \"page \".concat(page);\n  },\n  pagesUnknown: false,\n  totalItems: undefined\n};\nexport default Pagination;","map":null,"metadata":{},"sourceType":"module"}