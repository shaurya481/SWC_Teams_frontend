{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2020, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Import portions of React that are needed.\n\n\nimport React from 'react'; // Other standard imports.\n\nimport PropTypes from 'prop-types';\nimport { pkg } from '../../settings';\nimport cx from 'classnames'; // Carbon and package components we use.\n\nimport { Button, Link } from 'carbon-components-react'; // The block part of our conventional BEM class names (blockClass__E--M).\n\nvar blockClass = \"\".concat(pkg.prefix, \"--empty-state\");\nvar componentName = 'EmptyStateContent';\nexport var EmptyStateContent = function EmptyStateContent(_ref) {\n  var action = _ref.action,\n      link = _ref.link,\n      size = _ref.size,\n      subtitle = _ref.subtitle,\n      title = _ref.title;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n    className: cx(\"\".concat(blockClass, \"__header\"), _defineProperty({}, \"\".concat(blockClass, \"__header--small\"), size === 'sm'))\n  }, title), /*#__PURE__*/React.createElement(\"p\", {\n    className: cx(\"\".concat(blockClass, \"__subtitle\"), _defineProperty({}, \"\".concat(blockClass, \"__subtitle--small\"), size === 'sm'))\n  }, subtitle), (action === null || action === void 0 ? void 0 : action.text) && (action === null || action === void 0 ? void 0 : action.onClick) && /*#__PURE__*/React.createElement(Button, _extends({}, action, {\n    className: \"\".concat(blockClass, \"__action-button\"),\n    kind: action.kind || 'tertiary',\n    onClick: action.onClick,\n    renderIcon: action.renderIcon || null\n  }), action.text), (link === null || link === void 0 ? void 0 : link.text) && (link === null || link === void 0 ? void 0 : link.href) && /*#__PURE__*/React.createElement(Link, _extends({}, link, {\n    className: \"\".concat(blockClass, \"__link\"),\n    href: link.href\n  }), link.text));\n}; // The display name of the component, used by React. Note that displayName\n// is used in preference to relying on function.name.\n\nEmptyStateContent.displayName = componentName; // The types and DocGen commentary for the component props,\n// in alphabetical order (for consistency).\n// See https://www.npmjs.com/package/prop-types#usage.\n\nEmptyStateContent.propTypes = {\n  /**\n   * Empty state action button\n   */\n  action: PropTypes.shape(_objectSpread(_objectSpread({}, Button.propTypes), {}, {\n    iconDescription: PropTypes.string,\n    kind: PropTypes.oneOf(['primary', 'secondary', 'tertiary']),\n    renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    onClick: Button.propTypes.onClick,\n    text: PropTypes.string\n  })),\n\n  /**\n   * Empty state link object\n   */\n  link: PropTypes.shape(_objectSpread(_objectSpread({}, Link.propTypes), {}, {\n    text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    href: PropTypes.string\n  })),\n\n  /**\n   * Empty state size\n   */\n  size: PropTypes.oneOf(['lg', 'sm']),\n\n  /**\n   * Empty state subtitle\n   */\n  subtitle: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n\n  /**\n   * Empty state title\n   */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired\n};","map":null,"metadata":{},"sourceType":"module"}